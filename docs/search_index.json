[["index.html", "EPFR Strategy Notebooks 1 Introduction", " EPFR Strategy Notebooks 1 Introduction The objectives of this notebook are; to present EPFRs proof of concept strategies, so that readers have a profound understanding of their inputs and composition. to enable the reader to construct signals and find initial value in the data. This book has ten proof-of-concept strategies created by Quantitative Analysts at EPFR. The backtesting methodology across each of these is relatively similar. They are quintile based, long/short, and we apply similar lookback periods for our backtests. We use a standard backtest period because we seek to avoid optimizing any one strategy. Our goal is to help the reader to construct a signal from EPFRs data, from which they can build off of and optimize for their own use cases. For this type of testing on our data, we provide the time series file available for download. To access the files you can find them readily available on the FTP, or click here to email our team for assistance. "],["epfr-library.html", "2 EPFR Library 2.1 About 2.2 Set up 2.3 Strategy Functions 2.4 FTP Functions", " 2 EPFR Library The EPFR Library has an extensive list of applicable functions for use on our data and will be used in this demonstration of our strategies. To install the library EPFR, click here to download zip from github or you can find code to do this below. library(&quot;devtools&quot;) install_github(&quot;EPFR/EPFR-Quant-Library-R&quot;) library(&quot;EPFR.r&quot;) 2.1 About This library includes a variety of different functions that can help create signals, rank factors, evaluate performance of strategies, along with a list of other useful tools for handling EPFR data. To learn more please refer to the library documentation for all of the descriptions and complete list of parameters for each function. 2.2 Set up To use various functions in the EPFR library it will be helpful to set up a folder called EPFR in your computers C drive (i.e. C://EPFR). This is the default directory that is used throughout the library to find any files used to preform backtests. Some of the R functions built in this library are dependent on existing files that the user will need to download and store in the folder EPFR in order to avoid any challenges: classif-Ctry.txt MsciCtry2016.txt MsciCtryClassification.txt Inside of the folder EPFR it is suggested that the user follow the folder structure below: Add daily folder; to store EPFR daily cvs files. Add monthly folder; to store EPFR monthly csv files. Add returns folder; to store any return files used. 2.3 Strategy Functions Compunding Flows EPFRs function compound.flows() uses other functions within library('EPFR') to compute a rolling cumulative sum of flows over a trailing lookback period (typically we use 20 days). compound.flows &lt;- function(x, y, n = F) { # ----------------------------------------------------------------- # Args : x = a matrix/data-frame of percentage flows # : y = number of trailing rows to compound/sum # : n = if T, flows get summed. Otherwise they get compounded. # Output : compounded flows over &lt;n&gt; trailing periods indexed by last day in the flow window # ----------------------------------------------------------------- # # FIND NA&#39;s : # creates new df with value of 1 for all non-NA flows, else NA h &lt;- nonneg(mat.to.obs(x)) # # PRELIMINARIES : # convert all NA values to 0 in order to do computations # convert to log form z &lt;- zav(x) if (!n) z &lt;- log(1 + z/100) # # ROLLING WINDOWS # calculate rolling sum # reverse log form z &lt;- mat.rollsum(z, y) if (!n) z &lt;- 100 * exp(z) - 100 # # ENSURE FINAL DATE IN EACH ROLLING WINDOW IS NON-NA # multiply compounded flow matrix by h (1/NA df) z &lt;- z * h # # RETURN RESULT z } Please refer to the library documentation for more details. Model EPFRs function bbk() creates a standardized backtest model based on our inputs (e.g. ranking factors into 5 equal baskets based on compounded flows). bbk &lt;- function(x, y, floW = 1, retW = 5, nBin = 5, doW = NULL, sum.flows = F, lag = 0, delay = 2, idx = NULL, prd.size = 1, sprds = F) { # ----------------------------------------------------------------- # Args : x = predictor indexed by yyyymmdd or yyyymm (compounded percentage flow) # : y = total return index indexed by the same date format as &lt;x&gt; # : floW = number of &lt;prd.size&gt;&#39;s over which the predictor should be compounded/summed # : retW = return window in days or months depending on whether &lt;x&gt; is YYYYMMDD or YYYYMM # : nBin = number of bins to divide the variable into # : doW = day of the week you will trade on (5 = Fri) # : sum.flows = T/F depending on whether &lt;x&gt; should be summed or compounded # : lag = predictor lag in days or months depending on whether &lt;x&gt; is YYYYMMDD or YYYYMM # : delay = delay in knowing data in days or months depending on whether &lt;x&gt; is YYYYMMDD or YYYYMM # : idx = the index within which you are trading # : prd.size = size of each period in days or months depending on whether &lt;x&gt; is YYYYMMDD or YYYYMM # : sprds = T/F depending on whether spread changes, rather than returns, are needed # Output : standard model output # ----------------------------------------------------------------- # # GET DATA x &lt;- bbk.data(x, y, floW, sum.flows, lag, delay, doW, retW, idx, prd.size, sprds) # # BIN RETURNS z &lt;- lapply(bbk.bin.xRet(x$x, x$fwdRet, nBin, T, T), mat.reverse) # # SUMMARY z &lt;- c(z, bbk.summ(z$rets, z$bins, retW, ifelse(is.null(doW), 1, 5))) # # RETURN RESULT z } Please refer to the library documentation for more details. Example Step 1: Compounding Flows x &lt;- mat.read(&quot;C:\\\\temp\\\\DailyPercentageFlow.csv&quot;) x &lt;- compound.flows(x, lookback = 20) Step 2: Define variables y &lt;- mat.read(&quot;C:\\\\temp\\\\ETFCountryReturns.csv&quot;) # Return file hz &lt;- c(5, 10, 20, 45, 65, 130) # RETURN HORIZON (IN WEEKDAYS OR MONTHS) - holding periods nBin &lt;- 5 # Number of bins (to sort) doW &lt;- 5 # Day of the week to trade on delay &lt;- 2 # Delay in getting the data (able to trade on data @ T+2) idx &lt;- &quot;ACWI&quot; # Optional: Universe that is being used for signal (e.g. ACWI/EM/EAFE/G10) Step 3: Create standardized backtest model z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, idx) Step 4: Evaluate output z[[&quot;raw&quot;]] # Flow percentage compounded over trailing 20 days z[[&quot;raw.fwd.rets&quot;]] # One-week ahead return (Friday to Friday) z[[&quot;bins&quot;]] # Twenty-day flow percentage ranked into quintiles (computed only where forward returns are available) z[[&quot;rets&quot;]] # Quintile Returns over the equal-weight universe Step 5: Re-balance as needed Step 6: Find Annualized mean one-week returns bbk(x, y, 1, hz[1], 5, doW, T, 0, delay)$annSumm 2.4 FTP Functions Below are some functions built in library('EPFR') that connect a local R workspace to FTP server for convince accessing and working directly with data. () RCurl Functions built in library('EPFR') which give access to files on EPFRs ftp require the RCurl library. library(RCurl) Extract FTP File Path ftp.parent &lt;- function(x) { # ----------------------------------------------------------------- # Args : x = a string of full paths # Output : returns paths to the parent directory # ----------------------------------------------------------------- z &lt;- dirname(x) z &lt;- ifelse(z == &quot;.&quot;, &quot;&quot;, z) z } Extract FTP File Name ftp.file &lt;- function(x) { # ----------------------------------------------------------------- # Args : x = a string of full paths # Output : strips out parent directory, returning just the file name # ----------------------------------------------------------------- txt.right(x, nchar(x) - nchar(ftp.parent(x)) - 1) } Download FTP file ftp.get &lt;- function(x, y, n, w, h, u = &quot;ftp&quot;, v = F) { # ----------------------------------------------------------------- # Name : ftp.get # Args : x = remote file on an ftp site (e.g. &quot;/ftpdata/mystuff/foo.txt&quot;) # : y = local folder (e.g. &quot;C:\\\\temp&quot;) # : n = ftp site (defaults to standard) # : w = user id (defaults to standard) # : h = password (defaults to standard) # : u = protocol (either &quot;ftp&quot; or &quot;sftp&quot;) # : v = T/F flag for ftp.use.epsv argument of getCurlHandle # Output : file &lt;x&gt; from remote site # ----------------------------------------------------------------- # # MISSING ARGUMENTS if (missing(n)) n &lt;- ftp.credential(&quot;ftp&quot;, u, v) if (missing(w)) w &lt;- ftp.credential(&quot;user&quot;, u, v) if (missing(h)) h &lt;- ftp.credential(&quot;pwd&quot;, u, v) # # GET DATA z &lt;- getCurlHandle(ftp.use.epsv = v, userpwd = paste0(w, &quot;:&quot;, h)) z &lt;- getBinaryURL(paste0(u, &quot;://&quot;, n, x), curl = z) writeBin(z, con = paste0(y, &quot;\\\\&quot;, ftp.file(x))) # # RETURN NOTHING invisible() } Tip: Add a folder inside of EPFR called parameters, and add to it a file called ftp-credential.txt for the function to automatically generate ftp, username and password. See below example. ftp &lt;- &quot;000.000.000.00&quot; user &lt;- &quot;mydatafeed&quot; pwd &lt;- &quot;mypassword100!&quot; x &lt;- t(data.frame(ftp, user, pwd)) mat.write(x, &quot;c:\\\\EPFR\\\\parameters\\\\ftp-credential.txt&quot;) Example To download a desired ftp file you can set the file path to the csv file that will be used for your strategy and a local folder that this file will be downloaded to: file &lt;- &quot;/Strategies/daily/FloPctCtry-daily.csv&quot; # FTP FILE - FloPctCtry-daily.csv fldr &lt;- &quot;C:\\\\temp&quot; # LOCAL FOLDER Next you will enter your username and password: usr &lt;- &quot;YOUR USER NAME&quot; # FTP USERNAME pwd &lt;- &quot;YOUR PASSWORD&quot; #FTP PASSWORD Now you can call ftp.get() with the following inputs: ftp.get(file, fldr, &quot;filetransport.epfrglobal.com&quot;, usr, pwd, &quot;ftp&quot;) # DOWNLOADS FILE FROM FTP TO LOCAL FOLDER, USING CREDENTIALS After the file is downloaded the flow files local path can be easily stored with follow line: flow.file &lt;- paste(fldr, ftp.file(file), sep = &quot;\\\\&quot;) # STORES FLOW FILE PATH "],["Filters.html", "3 Filters", " 3 Filters EPFR has an extensive list of over two dozen filters that can be applied to our data sets, therefore the signals we can get can be fine-tuned. For example EPFR data can be filtered by: Investor Type (retail or institutional) Share class Fund domicile Theme (ESG, Sharia, ect.) Currency of flows Individual managers Duration Style Sector "],["multi-asset-strategy.html", "4 Multi-Asset Strategy 4.1 Overview 4.2 Daily Percentage Flow 4.3 Strategy Implementation", " 4 Multi-Asset Strategy 4.1 Overview This is a Multi-Asset Strategy, where we are essentially rotating between asset classes within the equity and bond universes. This approach uses active equity and fixed income funds to calculate percentage flow into asset classes. In terms of twenty-day percentage flows, the top fifth of asset classes outperform the bottom fifth by 10% per year. The strategy works well whether you consider only equity or fixed income asset classes. 4.2 Daily Percentage Flow The Multi-Asset Strategy developed by EPFR Global is based on percentage flow into asset classes. In this section, the reader will gain an understanding of the aggregations which can be used to create a signal as well as the methodology behind daily percentage flow calculations. 4.2.1 Aggregations The first step is defining a subset of data to capture in calculating our signal. For this strategy we can include equity, fixed-income, or both types of asset classes. Although, we will limit ourselves to actively managed funds when compiling the raw equity data. Equity and Fixed income (i.e. Multi-Asset) funds, which report their daily flows, are only a subset of those that report their fund flows to EPFR. The figure below shows EPFRs coverage of these universes over time compared to our total coverage. Updated at the end of July each year Users looking for more specific detail can customize this aggregation even further using EPFRs fund-level or share class-level granularity. Some good examples would be Active/Passive, ETF or Mutual funds, Institutional or Retail. Users can use these tags to different degrees in creating aggregated signals to backtest. Further detail about this is available in section 3. This can be achieved using fund-level flow files or reaching out to EPFRs quant team for customized aggregations. 4.2.2 Calculation To begin calculating the Daily Percentage flow, we start with our subset of Multi-Asset funds. To calculate the flow into an asset class, we sum the flows into funds that invest in that asset class. We repeat the process across the same funds Assets held under Management (AuM), to get the total AuM held in an asset class. Finally, to find the daily percentage flow for an asset class, we divide the flow into by the assets held. Then we repeat this across all different asset classes for the entire history. \\[\\text{Percentage Flow}_{c,t} = \\frac{\\sum^{N}_{i=m} \\text{Flow}_{i}}{\\sum^{N}_{i=m}{\\text{AuM}_{i}}}\\] Where: \\(\\text{Percentage Flow}\\) = the scaled flow as a percentage into an asset class \\(c\\), across all funds \\(i\\), for day \\(t\\) 4.2.3 Flow File The users may create flow percentages for their desired Equity and Fixed Income (Multi-Asset) aggregations and granularity using the methodology described in the previous section. EPFR also provides a pre-calculated aggregations for its users for the Multi-Asset Strategy. These files can be found on the FTP under the strategies folder. Please refer to the FTP Folder Structure section for the exact location of this file. These files contains daily flow data for asset classes listed below and are both updated daily at 5:00 PM est. with a T+1 day lag. Asset Classes 7 Global Equity Regions: Asia ex Japan Europe ex UK Japan Latin America Pacific ex Japan United Kingdom United States 10 Fixed Income: Global Emerging Markets Western Europe Bond High Yield Bond Floating Rate Funds USA Treasuries - USA Treasuries - Long USA Treasuries - Short Cash USA Munis Global Fixed Income For this demonstration, we use the pre-calculated files MultiAsset-Rgn-daily.csv and MultiAsset-FI-daily.csv. Below shows a snippet of what these files contain. AsiaXJP EurXGB Japan LatAm PacXJP UK USA 20211201 -0.065787 -0.057720 0.045671 -0.130202 -0.092976 -0.025578 -0.014164 20211202 -0.005170 -0.048366 0.065743 -0.371025 -0.010026 -0.015544 -0.112020 20211203 -0.066599 -0.097014 -0.058116 -0.032491 -0.022317 -0.032831 -0.039998 20211206 -0.038543 -0.127436 -0.002605 -0.101188 1.083445 -0.007502 0.044352 20211207 -0.097312 0.010563 0.003289 0.012547 0.004478 -0.015479 -0.251809 20211208 -0.007509 0.014343 0.040831 0.137045 -0.000494 -0.089466 0.120754 GLOBEM WESEUR HYIELD FLOATS USTRIN USTRLT USTRST CASH USMUNI GLOFIX 20211201 -0.028088 0.006219 -0.106159 -0.074881 0.252969 0.883080 0.416743 0.002679 0.024716 -0.051465 20211202 -0.014515 -0.035552 -0.233503 -0.176588 -0.034228 2.224331 0.482904 0.268642 0.040513 0.027430 20211203 0.025867 0.014347 -0.259077 0.187543 -0.277126 1.117413 0.156570 -0.159001 0.019765 -0.014492 20211206 -0.029981 -0.056445 0.196371 0.234828 0.221533 1.059680 0.147758 0.268698 0.048877 0.000639 20211207 -0.152535 -0.024498 0.233409 0.122840 0.048355 1.120573 -0.144327 -0.058648 0.039898 -0.030768 20211208 -0.027842 -0.045515 0.122184 0.121195 0.073612 -0.434690 -0.218566 0.247836 0.021011 -0.043152 We will download these file from the ftp and store them in local folder EPFR/daily using ftp.get(), more about this function can be referred to in section 2.4. file.Rgn &lt;- &quot;/Strategies/daily/MultiAsset-Rgn-daily.csv&quot; # PATH TO .csv FILE file.FI &lt;- &quot;/Strategies/daily/MultiAsset-FI-daily.csv&quot; # PATH TO .csv FILE fldr &lt;- &quot;C:\\\\EPFFR\\\\daily&quot; # LOCAL FOLDER ftp.get(file.Rgn, fldr, &quot;filetransport.epfrglobal.com&quot;, w = &quot;username&quot;, h = &quot;password&quot;, &quot;ftp&quot;) ftp.get(file.FI, fldr, &quot;filetransport.epfrglobal.com&quot;, w = &quot;username&quot;, h = &quot;password&quot;, &quot;ftp&quot;) # DOWNLOADS FILE FROM FTP TO LOCAL FOLDER, USING CREDENTIALS After downloading the csv files you will store both of the paths together as flow.file. A quick way to do this is shown below: flow.file.Rgn &lt;- paste(fldr, ftp.file(file.Rgn), sep = &quot;\\\\&quot;) # STORES FLOW FILE PATH, C:\\\\EPFFR\\\\daily\\\\MultiAsset-Rgn-daily.csv flow.file.FI &lt;- paste(fldr, ftp.file(file.FI), sep = &quot;\\\\&quot;) # STORES FLOW FILE PATH, C:\\\\EPFFR\\\\daily\\\\MultiAsset-FI-daily.csv flow.file &lt;- c(flow.file.Rgn, flow.file.FI) 4.2.4 Return File The return file for this strategy should contain daily returns for each of the asset classes in the flow file, which the user can find with their own resources. EPFR also provides Fund Return data, that can be used as a proxy to returns. To create a return file using EPFR daily flow data, the following equation can be used: \\[\\text{Fund Return}_{c,t} = \\frac{\\sum^{N}_{i=m} \\text{Portfolio Change}_i}{\\sum^{N}_{i=m} \\text{Assets Start}_i}\\] Where: \\(\\text{Fund Return}\\) = the return value of an asset class \\(c\\), across all funds \\(i\\), for day \\(t\\) For this demonstration, we will use files that have calculated returns using EPFR daily flow data, which have been locally saved in the folder EPFR/returns and are named PsuedoReturns-Rgn.csv and PsuedoReturns-FI.csv. ret.file.Rgn &lt;- &quot;C:\\\\EPFR\\\\returns\\\\PsuedoReturns-Rgn.csv&quot; ret.file.FI &lt;- &quot;C:\\\\EPFR\\\\returns\\\\PsuedoReturns-FI.csv&quot; For your reference a snippet of our return file looks like this AsiaXJP EurXGB Japan LatAm PacXJP UK USA GLOBEM WESEUR HYIELD FLOATS USTRIN USTRLT USTRST CASH USMUNI GLOFIX 20211201 214.1131 161.9943 119.2173 78.83982 154.0745 177.0324 291.9835 135.8781 141.4412 146.3335 114.4219 141.0385 212.2570 123.5804 102.3682 143.3444 149.7536 20211202 214.8790 160.6190 118.3444 79.37666 153.5210 176.2673 296.3693 136.1899 141.6530 146.4360 114.4118 140.7892 212.2643 123.4992 102.3683 143.3476 149.8067 20211203 213.7301 160.1943 120.0065 80.18004 153.5826 177.0106 293.1333 136.4219 141.7254 146.6076 114.4840 141.2850 214.3524 123.5313 102.3681 143.3861 150.0184 20211206 211.6420 160.0753 119.2455 80.47108 152.9334 177.3153 296.2200 136.5582 141.8860 146.9627 114.5514 140.8142 212.2902 123.4913 102.3681 143.3881 150.1093 20211207 215.1935 163.9383 121.5673 81.73758 154.7535 180.1470 302.6847 137.0147 141.9751 147.6908 114.6925 140.4383 210.9993 123.4109 102.3676 143.3552 150.2401 20211208 216.7263 164.5640 122.5717 83.11249 156.2248 180.8519 304.2680 137.2775 141.8604 147.6839 114.7470 140.0966 208.6260 123.4210 102.3680 143.3227 150.1685 4.3 Strategy Implementation The final step is implementing this strategy to create a signal. Lets begin by reading in the flow and return files to our R studio work space. x.rgn &lt;- mat.read(flow.file[1]) x.FI &lt;- mat.read(flow.file[2]) The next step is to ensure both of our flow files have the same rows so that we can combine the two files, like we do below. x.rgn &lt;- x.rgn[is.element(dimnames(x.rgn)[[1]], dimnames(x.FI)[[1]]), ] # ENSURES RGN MATCHES FI ROWS x.FI &lt;- x.FI[is.element(dimnames(x.FI)[[1]], dimnames(x.rgn)[[1]]), ] # ENSURES FI MATCHES RGN ROWS x &lt;- cbind(x.rgn, x.FI) # COMBINES RGN AND FI DATA One of the first options we have is choosing the universe we want to use. EPFR has tested this signal within two different universes of asset classes Rgn (7 Region Equity) and F.I. (Fixed Income). For this example, we choose Multi, which includes both of our equity and fixed income asset classes. idx &lt;- &quot;Multi&quot; # Multi/Rgn/FI 4.3.1 Compounding Flows Next, we set up a variable for our look-back period, which can also be called a flow window. This variable will be the window of time we use to create a trailing compounded daily percentage flow. The look-back period we choose for our demonstrations is 20 days. lookback &lt;- 20 # FLOW WINDOW (IN WEEKDAYS) - 20 day look back period Using a function from the library('EPFR'), compound.flows() compounds the daily percentage flow over the trailing lookback period for each country. x &lt;- compound.flows(x, lookback, F) # COMPOUND FLOWS AsiaXJP EurXGB Japan LatAm PacXJP UK USA GLOBEM WESEUR HYIELD FLOATS USTRIN USTRLT USTRST CASH USMUNI GLOFIX 20211201 -0.1073810 -0.4833747 0.2452820 -0.6449284 -0.6689483 -0.6543282 -0.1369923 -0.7747314 0.2903142 -0.9503836 2.221620 0.6259901 7.106534 -0.3645326 0.9494519 0.5049202 0.5533458 20211202 -0.1067017 -0.5021670 0.2997200 -1.2267527 -0.6143652 -0.5796300 -0.2272361 -0.7287482 0.2207563 -1.3649590 1.851977 0.3184149 8.999227 0.2149761 0.9037804 0.4945785 0.5197633 20211203 -0.2132681 -0.5958369 0.1262806 -1.4153423 -0.6406437 -0.6690165 -0.2781814 -0.6728415 0.2003685 -1.9841639 1.806125 -0.2942509 9.851501 0.6084120 0.7801322 0.4269182 0.4134913 20211206 -0.2035581 -0.6744460 0.1230035 -1.6635164 0.4696432 -0.6160469 -0.2144786 -0.6849000 0.0870160 -1.8216523 1.907120 -0.1263517 11.085778 0.7712465 0.9187198 0.4603109 0.3484459 20211207 -0.3431428 -0.6310035 0.0815080 -1.7407650 0.4792958 -0.5800523 -0.4603933 -1.0400291 0.0647392 -1.7416572 1.852801 -0.1450764 13.360745 0.6687900 0.6096639 0.4642767 0.2341388 20211208 -0.3477511 -0.6011026 0.0815390 -1.7123546 0.5695323 -0.6619960 -0.3506365 -0.9962117 0.0535301 -1.4408171 1.767762 -0.0815211 10.726226 0.3975193 1.2062302 0.3948241 0.1551764 4.3.2 Return file We will then import our two total return files and modify them to be one data frame of total index returns indexed so that time moves forward. To do this we will use function ret.to.idx() from library('EPFR') which will translate these returns to a total return index. We also use the functions map.rname() to ensure the row names of the matrices line up with our flow file and ret.idx.gaps.fix() to replace any NA values. #RGN RETURNS y &lt;- mat.read(ret.file.Rgn) y &lt;- ret.to.idx(map.rname(y, dimnames(x)[[1]])) # CONVERT TO A TOTAL-RETURN INDEX y &lt;- ret.idx.gaps.fix(y) #F.I. RETURNS z &lt;- mat.read(ret.file.FI) z &lt;- ret.to.idx(map.rname(z, dimnames(y)[[1]])) # CONVERT TO A TOTAL-RETURN INDEX #COMBINE RETURN FILES y &lt;- data.frame(y, z)[, dimnames(x)[[2]]] # FINAL TOTAL-RETURN INDEX TABLE y &lt;- y[max(simplify2array(lapply(y, function(x) {find.data(!is.na(x), T)}))):min(simplify2array(lapply(y, function(x) {find.data(!is.na(x), F)}))), ] # ENSURE ALL PIECES HAVE RETURN OVER THE SAME HORIZON Then, to subset the flow file \\(x\\) and return file \\(y\\) to the selected universe \\(idx\\) of asset classes, the function the following code is used. if (idx == &quot;Rgn&quot;) { x &lt;- x[, 1:7] y &lt;- y[, 1:7] } else if (idx == &quot;FI&quot;) { x &lt;- x[, 8:dim(x)[2]] y &lt;- y[, 8:dim(y)[2]] } else if (idx == &quot;Multi&quot;){ x &lt;- portfolio.residual(x, map.rname(portfolio.beta.wrapper(y, &quot;ACWorld&quot;, lookback), dimnames(x)[[1]])) } * Note: subsetting can be also be done when creating the flow and return files 4.3.3 Ranking Asset Classes Next, we sort the countries in each universe into five equal bins based on their 20-day Percentage Flow Compounded value for the selected holding period. To do this, we will use the function from library('EPFR'), called bbk(). This function will output a standardized backtest result. The bbk() function requires our compounded daily percentage flow file, a return file, and our selected universe. Please refer to the library documentation for the complete list of parameters of this function. The first parameter we add is the number of bins we want to use. For our case, we want to use 5 because our strategy is to go long the top fifth and short the bottom fifth. nBin &lt;- 5 # NUMBER OF BINS Since EPFR data is published with T+1 day lag and is released around 5:00 pm EST, we account for a T+2 day delay in our model since that is when one can trade on the information. Users interested in more timely signals can also use the T+2 Open Prices for backtesting purposes. EPFR also offers a Premium Daily offering, an earlier release of the end-of-day data covering a significant subset of fund-level flow information. delay &lt;- 2 # DELAY IN KNOWING DATA (IN WEEKDAYS) - data takes time to have It is also important to note that this model will need to be re-balanced weekly. The day of the week the rebalancing occurs is at the discretion of the user. For this example we will set the day of the week to trade as Friday. doW &lt;- 5 # DAY OF THE WEEK YOU WILL TRADE ON (5 = FRIDAYS) Additionally, we also evaluate the returns for different holding periods. The user can input return horizons that they are interested in here. For this example we define a return horizon for weekly, fortnightly, monthly, bi-monthly, quarterly, and semi-annually. hz &lt;- c(5, 10, 20, 45, 65, 130) # RETURN HORIZON (IN WEEKDAYS) - holding periods Now that we have defined all of our inputs, to rank the countries into quintiles by their 20-day percentage flow, we call function bbk() for a 1-week holding period. z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay) 4.3.4 Model Twenty-day flow percentage ranked into quintiles (computed only where forward returns are available) z[[&quot;bins&quot;]] AsiaXJP EurXGB Japan LatAm PacXJP UK USA GLOBEM WESEUR HYIELD FLOATS USTRIN USTRLT USTRST CASH USMUNI GLOFIX 20211231 3 2 2 3 2 4 1 5 5 4 1 3 1 2 4 4 5 20211224 3 2 2 1 2 3 1 5 5 4 3 4 1 2 4 4 5 20211217 2 2 3 1 2 3 1 5 4 5 3 5 1 2 4 4 4 20211210 1 2 2 3 2 3 1 5 4 5 2 5 1 4 3 4 4 20211203 2 3 2 2 4 2 1 5 4 5 1 4 1 5 3 4 3 Quintile Returns over the equal-weight universe z[[&quot;rets&quot;]] Q1 Q2 Q3 Q4 Q5 TxB uRet 20211231 -0.7607755 -0.0852404 -0.6037578 0.7473380 0.4817365 -1.2425120 -1.2013195 20211224 0.5751196 0.1738560 0.1233121 -0.3480753 -0.4661392 1.0412588 0.4471162 20211217 -0.0700287 0.4056082 0.3467158 -0.4147732 -0.2644672 0.1944385 0.2635537 20211210 -0.6923424 -0.2095814 -0.2435611 0.5157179 0.5277215 -1.2200639 -0.5107398 20211203 -0.4315280 1.0438719 -0.0097634 -0.4828764 -0.3067026 -0.1248254 0.7003021 4.3.5 Performance Performance over all holding periods fcn &lt;- function(retW) {as.matrix(bbk(x, y, 1, retW, nBin, doW, T, 0, delay)$summ)} # DEFINE SUMMARY FUNCTION sapply(split(hz, hz), fcn, simplify = &quot;array&quot;) # WRITE SUMMARIES Q1 Q2 Q3 Q4 Q5 TxB uRet Bi-Monthly AnnMn 5.280606e-01 8.026527e-01 8.868803e-01 -3.743213e-01 -1.986049e+00 2.514110e+00 2.854067e+00 AnnSd 5.686655e+00 4.846886e+00 5.471247e+00 4.836181e+00 5.214445e+00 7.398493e+00 9.175470e+00 Sharpe 1.027116e+01 1.704276e+01 1.654363e+01 -8.534610e+00 -3.881332e+01 3.493154e+01 3.120821e+01 HitRate -5.689075e-01 1.207477e+00 3.253802e+00 -1.584814e+00 -8.469755e+00 6.699176e+00 1.335336e+01 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -2.231990e+01 -1.508245e+01 -2.006664e+01 -2.118549e+01 -3.435812e+01 -1.954053e+01 -3.101945e+01 DDnBeg 2.012615e+07 2.012294e+07 2.008624e+07 2.008396e+07 2.008191e+07 2.014288e+07 2.007096e+07 DDnN 4.922222e+01 2.600000e+01 2.888889e+01 4.222222e+01 7.766667e+01 2.244444e+01 7.666667e+00 AnnTo 3.647894e+02 4.026139e+02 4.493911e+02 4.070812e+02 3.797711e+02 7.445605e+02 0.000000e+00 Fortnightly AnnMn 1.251462e+00 1.417914e+00 8.296590e-01 -5.579654e-01 -3.227720e+00 4.479182e+00 2.878926e+00 AnnSd 5.463321e+00 5.009008e+00 5.849879e+00 4.723587e+00 5.154145e+00 7.092517e+00 8.345413e+00 Sharpe 2.296212e+01 2.882142e+01 1.419686e+01 -1.182472e+01 -6.297364e+01 6.315282e+01 3.450064e+01 HitRate 0.000000e+00 6.186869e+00 1.893939e+00 0.000000e+00 -7.828283e+00 5.429293e+00 1.153983e+01 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -2.236177e+01 -1.857836e+01 -1.925588e+01 -2.947129e+01 -5.242117e+01 -1.362123e+01 -3.576917e+01 DDnBeg 2.011612e+07 2.007555e+07 2.009062e+07 2.008047e+07 2.007581e+07 2.019061e+07 2.007106e+07 DDnN 2.620000e+02 3.050000e+01 3.950000e+01 2.200000e+02 3.610000e+02 3.550000e+01 3.150000e+01 AnnTo 1.063380e+03 1.449993e+03 1.765032e+03 1.445906e+03 1.078683e+03 2.142063e+03 0.000000e+00 Monthly AnnMn 7.556037e-01 1.074856e+00 1.673338e+00 -6.054024e-01 -3.054880e+00 3.810484e+00 2.919293e+00 AnnSd 5.703025e+00 5.061661e+00 5.583297e+00 4.596060e+00 5.161587e+00 7.532636e+00 8.820410e+00 Sharpe 1.384317e+01 2.168641e+01 3.103659e+01 -1.327136e+01 -6.020730e+01 5.077084e+01 3.313709e+01 HitRate -1.265831e+00 2.532303e+00 4.307671e+00 1.517074e+00 -1.127391e+01 6.327232e+00 1.081308e+01 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -1.990382e+01 -1.596995e+01 -1.635772e+01 -2.699249e+01 -5.378384e+01 -1.563823e+01 -3.389934e+01 DDnBeg 2.012842e+07 2.010819e+07 2.011562e+07 2.007794e+07 2.007589e+07 2.016053e+07 2.007104e+07 DDnN 8.700000e+01 2.575000e+01 2.425000e+01 1.160000e+02 1.700000e+02 2.850000e+01 1.675000e+01 AnnTo 7.625605e+02 8.755632e+02 9.718505e+02 8.644524e+02 7.905173e+02 1.553078e+03 0.000000e+00 Quarterly AnnMn 4.845173e-01 7.794995e-01 7.458470e-01 -3.233709e-01 -1.838536e+00 2.323053e+00 2.948677e+00 AnnSd 5.979057e+00 4.807720e+00 5.323023e+00 5.045031e+00 5.246715e+00 7.764461e+00 9.228914e+00 Sharpe 8.068015e+00 1.481141e+01 1.345123e+01 -5.132971e+00 -3.497125e+01 2.902856e+01 3.205937e+01 HitRate -1.345103e+00 2.370744e+00 3.123161e+00 3.089533e-01 -9.543926e+00 4.289618e+00 1.598361e+01 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -2.371920e+01 -1.815086e+01 -1.729125e+01 -2.181058e+01 -3.442094e+01 -2.055855e+01 -2.855401e+01 DDnBeg 2.012383e+07 2.011369e+07 2.010450e+07 2.008231e+07 2.008468e+07 2.013920e+07 2.007107e+07 DDnN 3.246154e+01 1.907692e+01 2.261538e+01 2.669231e+01 4.684615e+01 1.984615e+01 4.692308e+00 AnnTo 2.639288e+02 2.850273e+02 3.171445e+02 2.801828e+02 2.760011e+02 5.399299e+02 0.000000e+00 Semi-Annual AnnMn -2.744810e-02 -8.853910e-02 1.139665e+00 4.469293e-01 -1.590071e+00 1.562623e+00 3.130603e+00 AnnSd 5.719410e+00 5.151840e+00 5.445908e+00 5.484217e+00 5.898570e+00 8.085143e+00 9.905354e+00 Sharpe -4.156297e-01 -1.397536e+00 2.077930e+01 8.561763e+00 -2.974563e+01 1.988518e+01 3.163771e+01 HitRate -2.736516e+00 -4.712644e+00 4.973475e+00 1.392573e+00 -1.169761e+01 6.781609e+00 1.752431e+01 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -2.467921e+01 -1.942057e+01 -1.395949e+01 -1.769732e+01 -3.290273e+01 -2.414600e+01 -2.575678e+01 DDnBeg 2.011135e+07 2.011140e+07 2.011793e+07 2.009184e+07 2.008349e+07 2.011827e+07 2.007133e+07 DDnN 1.692308e+01 1.426923e+01 6.653846e+00 9.076923e+00 2.403846e+01 8.692308e+00 2.500000e+00 AnnTo 1.400796e+02 1.479067e+02 1.582258e+02 1.458621e+02 1.417359e+02 2.818155e+02 0.000000e+00 Weekly AnnMn 1.482130e+00 1.665591e+00 1.183893e+00 -9.406481e-01 -3.634849e+00 5.116979e+00 2.796159e+00 AnnSd 5.440578e+00 5.167859e+00 5.915631e+00 4.955516e+00 5.083907e+00 6.731680e+00 8.038673e+00 Sharpe 2.724214e+01 3.222980e+01 2.001296e+01 -1.898184e+01 -7.149716e+01 7.601340e+01 3.478384e+01 HitRate 1.828499e+00 2.585120e+00 2.711223e+00 3.152585e-01 -6.998739e+00 6.368222e+00 7.178841e+00 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -1.634423e+01 -1.997538e+01 -3.106995e+01 -3.161576e+01 -5.779001e+01 -1.279376e+01 -3.582700e+01 DDnBeg 2.012112e+07 2.007092e+07 2.010072e+07 2.008043e+07 2.008112e+07 2.018020e+07 2.007103e+07 DDnN 4.980000e+02 6.900000e+01 1.120000e+02 4.150000e+02 6.840000e+02 3.800000e+01 5.600000e+01 AnnTo 1.427708e+03 2.203778e+03 3.006045e+03 2.257809e+03 1.491016e+03 2.918724e+03 0.000000e+00 Annualized mean one-week returns bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay)$annSumm # DISPLAY CALENDAR-YEAR RETURNS Q1 Q2 Q3 Q4 Q5 TxB uRet nPrds 2007 5.5262428 1.1621261 1.3307199 2.9439689 -12.392901 17.9191440 1.794936 29 2008 22.1485878 -15.8079587 6.5057877 -7.9325772 2.999672 19.1489155 -27.417418 52 2009 0.1437382 4.0957642 16.8652941 -6.5124604 -13.786771 13.9305089 24.141740 52 2010 4.6395165 5.4329699 4.7684875 -10.1174228 -3.162067 7.8015833 9.964876 53 2011 4.7583767 -1.7937327 -15.6605055 6.2891454 4.908245 -0.1498686 -2.537112 52 2012 0.6443603 6.2562635 -7.0180903 0.0584413 -2.045876 2.6902368 9.883816 52 2013 -3.5021394 7.8707450 5.1453363 -2.9599879 -8.190873 4.6887335 4.569832 52 2014 1.2558166 2.1857787 3.7878894 -3.5078164 -3.280989 4.5368057 4.051446 52 2015 0.8312377 1.8822919 1.2544472 -1.5632083 -2.511130 3.3423673 -1.968191 52 2016 -2.0473366 4.2822107 2.6780787 -1.1423927 -4.817166 2.7698295 5.941342 53 2017 3.0046060 -0.5971810 -3.9675876 4.3296370 -4.013626 7.0182325 8.457597 52 2018 -5.2758622 -5.6791875 -0.8303557 7.9286853 3.106888 -8.3827498 -6.120206 52 2019 0.0207033 -0.8478387 2.0600647 2.4213320 -4.178759 4.1994624 11.606858 52 2020 -2.8206326 8.7078981 -0.2150123 -0.3029195 -8.170993 5.3503606 5.327833 52 2021 0.9551899 9.4118101 -5.0516511 -0.7864662 -7.403997 8.3591871 3.660437 53 2022 -8.3575713 -1.6001987 10.9420577 -3.0838240 3.660877 -12.0184484 -13.046450 33 "],["fx-strategy.html", "5 FX Strategy 5.1 Overview 5.2 Daily Percentage Flow 5.3 Strategy Implementation", " 5 FX Strategy 5.1 Overview The FX Strategy an equity based currency rotation strategy, which ranks different foreign exchange markets of countries across a customized universe of both developed and emerging markets. This approach uses the stated allocations of equity funds with a cross-border focus and calculates percentage flow into currencies. In terms of twenty-day percentage flows, the top fifth of ACWI currencies outperform the bottom fifth by over 4% per year. The strategy works best amongst G10 currencies, but adds value across the board. 5.2 Daily Percentage Flow The FX Strategy developed by EPFR Global is based on percentage flow into currencies. In this section, the reader will gain an understanding of the aggregations which can be used to create a signal as well as the methodology behind daily percentage flow calculations. 5.2.1 Aggregations The first step is defining a subset of data to capture in calculating our signal. This strategy requires; Equity funds with a cross-boarder focus. These are essentially any fund that has a mandate spanning more than one country. The vast majority of these will be global and regional funds. Funds must report both daily flows and country allocations, since these values are needed to calculate Daily Percentage Flow. Cross-border equity funds, which report their country allocations and their fund flows, are a subset of those that only report their fund flows to EPFR. The figure below shows EPFRs coverage of this universe over time compared to our total coverage. Updated at the end of July each year Users looking for more specific detail can customize this aggregation even further using EPFRs fund-level or share class-level granularity. Some good examples would be Active/Passive, ETF or Mutual funds, Institutional or Retail. Users can use these tags to different degrees in creating aggregated signals to backtest. Further detail about this is available in section 3. This can be achieved using fund-level flow files or reaching out to EPFRs quant team for customized aggregations. 5.2.2 Calculation To begin calculating the Daily Percentage flow, we start with our subset of cross-border equity funds. To calculate the funds impact on a currency, we scale a funds flow by multiplying it against its stated country allocation to countries using that currency, which is available in EPFRs Country Allocation Database, on that day. EPFR releases country allocations of all funds on the \\(23^{\\text{rd}}\\) of each month (or the next available business day) at a monthly frequency. Hence, our calculation assumes constant country allocation between two consecutive release dates within the month. We then apply the same procedure to all funds with a fund flow and country allocation information and then sum the flows for each currency across all funds. \\[\\text{Total Impact}_{c,t} = \\sum^{N}_{i=m}{\\text{Flow}_i \\times \\text{Allocation}_i}\\] Where: \\(\\text{Total Impact}\\) = the impact on a currency \\(c\\), across all funds \\(i\\), for day \\(t\\) Additionally, we repeat the process across the same funds Assets held under Management (AuM), to get the total AuM held in a country. \\[\\text{Total AuM}_{c,t} = \\sum^{N}_{i=m}{\\text{AuM}_i \\times \\text{Allocation}_i}\\] Where: \\(\\text{Total AuM}\\) = the assets held in a currency \\(c\\), across all funds \\(i\\), for day \\(t\\) Finally, to find the daily percentage flow into a currency, we divide the Total Impact by the Total AuM. Then we repeat this across all different currencies for the entire history. \\[\\text{Percentage Flow}_{c,t} = \\frac{\\text{Total Impact}_{c,t}}{\\text{Total AuM}_{c,t}}\\] Where: \\(\\text{Percentage Flow}\\) = the scaled flow as a percentage into a currency \\(c\\), across all funds \\(i\\), for day \\(t\\) 5.2.3 Flow File The users may create flow percentages for their desired FX aggregations and granularity using the methodology described in the previous section. EPFR also provides a pre-calculated aggregation for its users for the FX Strategy. This file can be found on the FTP under the strategies folder. Please refer to the FTP Folder Structure section for the exact location of this file. This file contains daily flow data for 37 currencies and is updated daily at 5:00 PM est. with a T+1 day lag. For this demonstration, we use the pre-calculated file FX-daily.csv. Below shows a snippet of what this file contains. ARS AUD BRL CAD CHF CLP CNY CZK EGP GBP HUF IDR ILS INR JPY KRW MXN MYR NOK NZD PEN PHP PLN RUB SEK SGD THB TRY TWD ZAR USD EUR COP PKR MAD VND KWD 20211101 0.0951956 0.0233905 0.0531035 0.0202649 0.0136956 0.0124597 0.0367144 0.0407582 -0.0099286 0.0090056 0.0118883 0.1026345 0.0227167 0.0737441 0.0112211 0.0301935 0.0528308 0.0424596 0.0250291 0.0173961 0.0983880 0.0163313 0.0203153 0.0215331 0.0123521 0.0900571 0.0397868 0.0233967 0.0497635 0.0189636 0.0685452 0.0189129 0.0224357 0.0303562 -0.0103072 0.8665646 0.0194010 20211102 0.0942688 0.1720646 0.0354197 0.0926433 0.1266238 0.0483671 0.0439027 0.0997758 0.0577666 0.1349584 0.0443015 0.0569077 0.1323832 0.0365911 0.1419282 0.0531659 0.0390083 0.0445662 0.1255181 0.1113622 0.0203433 0.0313609 0.0642350 0.0238631 0.1268904 0.1101238 0.0296805 0.0237125 0.0333732 0.0499104 0.0734126 0.0871499 0.0279508 0.1460037 0.4337403 0.2818899 0.0219654 20211103 0.1089451 0.0281285 0.0119845 0.0444364 0.0277638 0.0629838 -0.0350514 0.0068424 0.0119071 0.0291382 -0.1047347 -0.0518616 0.0345525 -0.0505650 0.0315910 -0.0571837 0.0040123 -0.0116749 0.0233558 0.0178623 0.1200862 0.0187043 0.0137464 -0.1117925 0.0391676 0.0475302 -0.0179925 -0.0101861 -0.0450093 -0.0520347 0.0805151 0.0191132 0.0292842 0.0274489 0.0643956 0.0460473 0.0091691 20211104 0.1709919 -0.0259282 0.0564485 0.0874951 0.0043956 0.0467287 0.0444763 0.0745158 0.0684307 -0.0166590 0.0797765 0.0305560 0.0520806 0.0258512 0.0087418 0.0312389 0.0481343 0.0384663 0.0556068 0.0611684 0.0294905 0.0120414 0.0888283 0.0753834 0.0201077 0.0511059 0.0432660 0.0708349 0.0285761 0.0572320 0.0638265 0.0284550 -0.0555654 0.0271469 0.1155251 0.0171987 0.0251618 20211105 0.0811163 0.1188916 0.0800062 0.0734998 0.0777874 0.0776826 0.0057655 0.0836201 0.0531953 0.0844895 0.0276116 0.0705703 0.0725028 0.0420120 0.0905879 0.0299950 0.0407647 0.0050806 0.0596630 0.0803083 0.1076447 0.0376676 0.0586687 0.0104820 0.0812884 0.0810288 0.0379855 -0.1275677 0.0186814 0.0148055 0.0585696 0.0532085 0.1140662 0.0360098 0.0395516 0.2613120 0.0587149 20211108 0.1190233 0.0493196 0.0734154 0.0765835 0.0388529 0.0709732 -0.0219888 0.0400470 0.0860873 0.0218624 0.0117260 0.0381564 0.0477718 0.0318928 0.0512294 0.0285295 0.0356488 0.0659128 -0.0015951 0.0117628 0.0458379 0.0270478 0.0694772 0.0586824 0.0310111 0.0067519 0.0474835 0.0182717 0.0363691 0.0662294 0.0588712 0.0100783 0.0906876 0.1440479 0.3945202 0.1805212 0.0545738 We will download this file from the ftp and store it in local folder EPFR/daily using ftp.get(), more about this function can be referred to in section 2.4. file &lt;- &quot;/Strategies/daily/FX-daily.csv&quot; # PATH TO .csv FILE fldr &lt;- &quot;C:\\\\EPFR\\\\daily&quot; # LOCAL FOLDER ftp.get(file, fldr, &quot;filetransport.epfrglobal.com&quot;, w = &quot;username&quot;, h = &quot;password&quot;, &quot;ftp&quot;) # DOWNLOADS FILE FROM FTP TO LOCAL FOLDER, USING CREDENTIALS After downloading the csv file you will store its path as flow.file. A quick way to do this is shown below: flow.file &lt;- paste(fldr, ftp.file(file), sep = &quot;\\\\&quot;) # STORES FLOW FILE PATH, C:\\\\EPFR\\\\daily\\\\FX-daily.csv 5.2.4 Return File The return file for this strategy should contain daily Exchange rates for each of the currencies in the flow file, which the user can find with their own resources. For this demonstration, we will the file, which is locally stored in the folder EPFR/returns and has been named ExchRates.csv. ret.file &lt;- &quot;C:\\\\EPFR\\\\returns\\\\ExchRates.csv&quot; For your reference a snippet of our return file looks like this XDR AUD EGP INR MXN NZD QAR TRY ZAR ARS BRL EUR IDR KRW NOK PHP SEK CAD CHF CLP HUF JPY PEN RUB TWD CNY CZK GBP ILS MYR PLN SGD THB JOR PKR MAD COP CNH VND KWD 20211101 1.41082 1.3294 15.7013 74.8737 20.8426 1.3914 3.6413 9.5398 15.4295 99.8178 5.6863 0.8616 14248 1176.55 8.4063 50.420 8.5196 1.2369 0.9091 814.50 310.85 114.00 3.9915 71.5655 27.847 6.3977 22.0433 0.7318 3.1118 4.1515 3.9776 1.3485 33.455 NA 171.9875 9.0679 3767.37 6.3942 22753 0.30175 20211102 1.41229 1.3459 15.7013 74.6850 20.7844 1.4060 3.6413 9.6039 15.4431 99.8679 5.6863 0.8636 14253 1174.40 8.5277 50.385 8.5747 1.2411 0.9146 812.70 310.30 113.96 4.0086 71.5587 27.844 6.4000 22.0850 0.7344 3.1341 4.1487 3.9801 1.3491 33.247 NA 171.9875 9.0760 3795.98 6.4028 22744 0.30165 20211103 1.41165 1.3428 15.7013 74.4600 20.5391 1.3964 3.6415 9.6447 15.2702 99.9104 5.5533 0.8612 14298 1181.60 8.5071 50.570 8.5383 1.2391 0.9118 812.75 308.91 114.01 4.0125 71.7646 27.847 6.4066 21.9603 0.7307 3.1179 4.1540 3.9457 1.3478 33.315 NA 169.9842 9.0661 3834.24 6.3948 22743 0.30165 20211104 1.40951 1.3513 15.7010 74.4600 20.5443 1.4080 3.6417 9.7039 15.2169 99.9493 5.6035 0.8654 14338 1182.65 8.5559 50.615 8.5900 1.2456 0.9127 814.31 311.80 113.76 4.0139 71.7646 27.860 6.3972 21.9440 0.7407 3.1084 4.1540 3.9827 1.3511 33.410 NA 169.9625 9.0867 3869.34 6.3974 22686 0.30165 20211105 1.40747 1.3513 15.7010 74.4600 20.3434 1.4047 3.6417 9.6922 15.0529 99.9498 5.5423 0.8644 14328 1185.05 8.5590 50.345 8.5711 1.2457 0.9127 811.55 310.26 113.41 4.0105 71.2684 27.874 6.3988 21.8231 0.7409 3.1112 4.1588 3.9750 1.3502 33.320 NA 169.9625 9.0781 3878.85 6.3944 22698 0.30165 20211108 1.41024 1.3471 15.7010 74.0237 20.3424 1.3952 3.6417 9.6853 14.9184 100.0605 5.5423 0.8630 14258 1183.20 8.5045 50.175 8.5765 1.2442 0.9133 802.58 311.67 113.23 4.0140 71.2364 27.836 6.3927 21.7967 0.7371 3.1113 4.1543 3.9637 1.3476 33.055 NA 169.9625 9.0574 3876.38 6.3884 22658 0.30175 5.3 Strategy Implementation The final step is implementing this strategy to create a signal. Lets begin by reading in the flow and return files to our R studio work space. x &lt;- read.csv(flow.file, row.names = 1) # GET FLOW PERCENTAGE y &lt;- 1/read.csv(ret.file, row.names = 1) # READ IN EXCHANGE RATES One of our first options is choosing the universe we want to use. EPFR has tested this signal within three different universes of countries ACWI (All Country World Index), G10 (ten of the most heavily traded currencies), EM (Emerging Markets). For this example, we choose ACWI, which includes 52 countries and 37 currencies. idx &lt;- &quot;ACWI&quot; # ACWI/G10/EM If needed, subset the flow file \\(x\\) and return file \\(y\\) to the selected universe \\(idx\\). For this example, our flow file is already in the ACWI universe but below is an example of how we set this using the functions Ctry.msci.members.rng() and Ctry.info(), from the library('EPFR') is used. This function first returns a list of two letter country codes from \\(idx\\) and then will produce a unique list of three letter currency codes that these countries use. idx.curr &lt;- unique(Ctry.info(Ctry.msci.members(idx, &quot;&quot;), &quot;Curr&quot;)) # CURRENCY CLASSIFICATION 2016 if (idx != &quot;G10&quot;) idx.curr &lt;- union(Ctry.info(Ctry.msci(idx)[, &quot;CCODE&quot;], &quot;Curr&quot;), idx.curr) else idx &lt;- NULL # CAPTURE INDEX CHANGES if (is.element(&quot;EM&quot;, idx)) idx.curr &lt;- setdiff(idx.curr, c(&quot;USD&quot;, &quot;EUR&quot;)) # ENSURE NO OVERLAP BETWEEN DEVELOPED AND EM CURRENCIES x &lt;- x[, is.element(dimnames(x)[[2]], idx.curr)] # SUBSET TO CURRENCIES OF INTEREST We will also subset the return file \\(y\\) to use the same currencies as \\(x\\). y &lt;- y[, dimnames(x)[[2]]]/y[, &quot;XDR&quot;] # CURRENCIES OF INTEREST ON AN SDR BASE (OTHERWISE &lt;get.fwdRet&gt; THINKS THE USD NEVER TRADES!) * Note: subsetting can be also be done when creating the flow and return files 5.3.1 Compounding Flows Next, we set up a variable for our look-back period, which can also be called a flow window. This variable will be the window of time we use to create a trailing compounded daily percentage flow. The look-back period we choose for our demonstrations is 20 days. lookback &lt;- 20 # FLOW WINDOW (IN WEEKDAYS) - 20 day look back period Using a function from the library('EPFR'), compound.flows() compounds the daily percentage flow over the trailing lookback period for each country. x &lt;- compound.flows(x, lookback, F) # COMPOUND FLOWS ARS AUD BRL CAD CHF CLP CNY CZK EGP GBP HUF IDR ILS INR JPY KRW MXN MYR NOK NZD PEN PHP PLN RUB SEK SGD THB TRY TWD ZAR USD EUR COP PKR MAD VND KWD 20211101 0.9527874 0.8886917 -0.1643256 0.7911437 0.5886318 0.0941707 0.0136028 0.1973409 0.4458388 0.4883132 -0.0835879 0.3253984 0.6767142 0.0568839 0.6975504 0.0003825 -0.3566255 0.5171869 0.6827073 0.8891241 0.0448713 0.3602971 0.2698957 -0.1146523 0.6586210 0.9203488 0.4436781 0.2297049 0.1158142 0.1358923 0.5331267 0.5057824 0.0762317 0.3584083 0.965048 2.010549 0.3581192 20211102 0.9511879 0.9113120 -0.1215076 0.8226356 0.6456834 0.1367749 0.0853221 0.3447459 0.4660920 0.5460583 0.0460547 0.4075028 0.6598749 0.1126144 0.6961294 0.0646005 -0.3007117 0.5624623 0.7498127 0.8348205 0.0729561 0.4042960 0.3494553 -0.0367560 0.7114888 0.9576903 0.4826777 0.2880251 0.1651396 0.1777627 0.5863308 0.5350202 0.1003466 0.4909221 1.375735 2.431359 0.3612804 20211103 1.0513516 0.9160408 -0.1097747 0.8785058 0.6874933 0.1864272 -0.0221081 0.3186403 0.4780846 0.5855840 -0.0826498 0.3266397 0.6896169 0.0377962 0.7290372 -0.0283303 -0.2942868 0.4956191 0.7621672 0.8442814 0.1892010 0.3710247 0.3234475 -0.1713463 0.7630596 0.9751096 0.4171425 0.2530661 0.0948579 0.1030250 0.7126995 0.5548281 0.1200707 0.4598254 1.389126 2.323259 0.3628481 20211104 1.2183855 0.8414238 -0.0211902 0.8939104 0.6637428 0.2638770 0.1060178 0.3824682 0.5165306 0.5571391 -0.0376093 0.3852991 0.7288608 0.1056081 0.7074698 0.0498978 -0.2102378 0.5236246 0.8071756 0.8558580 0.2598218 0.3824082 0.3975286 -0.0884708 0.7788151 1.0324599 0.4610131 0.3289220 0.1592458 0.1532068 0.7550539 0.6041268 0.0671506 0.4698074 1.509447 2.607490 0.3565739 20211105 1.2742174 0.9314653 0.0935136 0.9438265 0.7302135 0.3749336 0.1619661 0.4575477 0.5899856 0.6339812 -0.0357945 0.4945322 0.7735925 0.1862533 0.7706071 0.1166506 -0.1208222 0.5668301 0.8649407 0.8996040 0.4389306 0.4449501 0.4283310 -0.0729828 0.8590396 1.1081347 0.5289094 0.2554504 0.2111732 0.2017390 0.7672262 0.6327286 0.3363588 0.5046355 1.511611 2.836261 0.4729630 20211108 1.2782616 0.9511809 0.1597602 0.9740415 0.7498179 0.4381970 0.1308746 0.6198284 0.7043644 0.6368313 0.1010411 0.4771341 0.7967628 0.2129500 0.7879206 0.1223963 -0.0846933 0.5913104 0.8340679 0.8533027 0.4839689 0.4238052 0.6375655 0.0964786 0.8732623 1.0222730 0.5139547 0.2608682 0.2383972 0.2704215 0.8277552 0.6320875 0.4255152 0.6409877 1.904923 2.919542 0.5269095 5.3.2 Ranking Currencies Next, we sort the currencies in each universe into five equal bins based on their 20-day Percentage Flow Compounded value for the selected holding period. To do this, we will use the function from library('EPFR'), called bbk(). This function will output a standardized backtest result. The bbk() function requires our compounded daily percentage flow file, a return file, and our selected universe. Please refer to the library documentation for the complete list of parameters of this function. The first parameter we add is the number of bins we want to use. For our case, we want to use 5 because our strategy is to go long the top fifth and short the bottom fifth. nBin &lt;- 5 # NUMBER OF BINS Since EPFR data is published with T+1 day lag and is released around 5:00 pm EST, we account for a T+2 day delay in our model since that is when one can trade on the information. Users interested in more timely signals can also use the T+2 Open Prices for backtesting purposes. EPFR also offers a Premium Daily offering, an earlier release of the end-of-day data covering a significant subset of fund-level flow information. delay &lt;- 2 # DELAY IN KNOWING DATA (IN WEEKDAYS) - data takes time to have It is also important to note that this model will need to be re-balanced weekly. The day of the week the rebalancing occurs is at the discretion of the user. For this example we will set the day of the week to trade as Friday. doW &lt;- 5 # DAY OF THE WEEK YOU WILL TRADE ON (5 = FRIDAYS) Additionally, we also evaluate the returns for different holding periods. The user can input return horizons that they are interested in here. For this example we define a return horizon for weekly, fortnightly, monthly, bi-monthly, quarterly, and semi-annually. hz &lt;- c(5, 10, 20, 45, 65, 130) # RETURN HORIZON (IN WEEKDAYS) - holding periods Now that we have defined all of our inputs, to rank the currencies into quintiles by their 20-day percentage flow, we call function bbk() for a 1-week holding period. z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, idx) 5.3.3 Model Twenty-day flow percentage ranked into quintiles (computed only where forward returns are available) z[[&quot;bins&quot;]] ARS AUD BRL CAD CHF CLP CNY CZK EGP GBP HUF IDR ILS INR JPY KRW MXN MYR NOK NZD PEN PHP PLN RUB SEK SGD THB TRY TWD ZAR USD EUR COP PKR MAD VND KWD 20211126 1 1 4 1 2 3 5 4 4 2 5 3 2 4 1 5 5 3 2 1 2 3 4 5 2 1 3 5 4 4 1 3 5 2 NA NA 3 20211119 1 1 4 1 2 3 5 4 3 2 5 4 2 4 2 5 5 3 1 1 3 3 4 5 1 1 3 5 5 4 2 3 4 2 NA NA 2 20211112 1 1 5 1 2 4 5 3 2 2 5 3 1 5 2 5 5 3 2 1 4 4 2 5 1 1 3 4 4 4 2 3 4 3 NA NA 3 20211105 1 1 5 1 2 4 5 4 3 2 5 3 2 5 2 5 5 2 1 1 4 3 3 5 1 1 3 4 4 4 2 2 4 3 NA NA 3 Quintile Returns over the equal-weight universe z[[&quot;rets&quot;]] Q1 Q2 Q3 Q4 Q5 TxB uRet 20211126 -0.3518588 -0.0742545 -0.2356399 0.6669874 -0.0052342 -0.3466246 0.2425766 20211119 -0.2261018 0.7205219 0.6028981 0.1247873 -1.2221055 0.9960037 -1.5876957 20211112 0.4273747 0.3637810 0.5490416 -1.5277204 0.1875232 0.2398515 -1.5849676 20211105 -0.4166332 0.1161974 0.4211856 -0.1150009 -0.0057489 -0.4108843 -0.7804385 5.3.4 Performance Performance over all holding periods fcn &lt;- function(retW) {as.matrix(bbk(x, y, 1, retW, nBin, doW, T, 0, delay, idx)$summ)} # DEFINE SUMMARY FUNCTION sapply(split(hz, hz), fcn, simplify = &quot;array&quot;) # WRITE SUMMARIES Q1 Q2 Q3 Q4 Q5 TxB uRet Bi-Monthly AnnMn 1.202793e+00 -1.666856e-01 4.507323e-01 -6.814861e-01 -7.777664e-01 1.980559e+00 -2.307785e+00 AnnSd 3.212562e+00 2.674507e+00 2.868744e+00 3.133586e+00 3.209554e+00 5.337835e+00 1.089995e+01 Sharpe 3.735070e+01 -5.077422e+00 1.635085e+01 -2.257005e+01 -2.466220e+01 3.694592e+01 -2.126384e+01 HitRate 4.365079e+00 -1.354625e-01 3.459871e+00 -7.904634e-01 -1.200038e+00 4.106904e+00 -2.266208e+00 Beta -6.701050e-02 -3.967260e-02 -1.071010e-02 4.252560e-02 6.917680e-02 -1.361873e-01 1.000000e+00 Alpha 1.048506e+00 -2.593877e-01 4.261955e-01 -5.829167e-01 -6.180728e-01 1.666578e+00 0.000000e+00 DrawDn -7.883003e+00 -1.043619e+01 -1.209756e+01 -2.068240e+01 -1.772203e+01 -1.057861e+01 -5.788302e+01 DDnBeg 2.016404e+07 2.009163e+07 2.008412e+07 2.010976e+07 2.008756e+07 2.013400e+07 2.011062e+07 DDnN 1.011111e+01 4.188889e+01 3.388889e+01 4.522222e+01 5.477778e+01 1.200000e+01 5.122222e+01 AnnTo 3.474523e+02 4.248691e+02 4.328587e+02 4.330536e+02 3.640098e+02 7.114621e+02 0.000000e+00 Fortnightly AnnMn 2.263666e+00 -6.950581e-01 1.974790e-02 -6.026635e-01 -9.126483e-01 3.176315e+00 -2.334166e+00 AnnSd 3.425184e+00 2.932973e+00 3.111426e+00 3.365906e+00 3.412246e+00 5.572719e+00 1.001495e+01 Sharpe 6.611333e+01 -2.368521e+01 3.750774e-01 -1.795153e+01 -2.704696e+01 5.759251e+01 -2.330919e+01 HitRate 4.270618e+00 -1.118594e+00 7.238569e-01 1.380370e+00 -3.256665e-01 3.350256e+00 -1.982318e-01 Beta -6.646200e-03 -3.719760e-02 -7.018090e-02 3.299640e-02 7.605300e-02 -8.269920e-02 1.000000e+00 Alpha 2.248129e+00 -7.818885e-01 -1.440789e-01 -5.255930e-01 -7.351219e-01 2.983251e+00 0.000000e+00 DrawDn -8.451962e+00 -1.661653e+01 -1.052911e+01 -2.537488e+01 -2.355988e+01 -1.406975e+01 -6.085436e+01 DDnBeg 2.019562e+07 2.008525e+07 2.007621e+07 2.011017e+07 2.008048e+07 2.019062e+07 2.011058e+07 DDnN 4.200000e+01 1.615000e+02 1.645000e+02 2.680000e+02 2.650000e+02 6.000000e+01 2.300000e+02 AnnTo 8.829337e+02 1.489343e+03 1.575801e+03 1.570955e+03 9.842115e+02 1.867145e+03 0.000000e+00 Monthly AnnMn 2.054549e+00 -5.842837e-01 5.817147e-01 -1.069296e+00 -8.707516e-01 2.925300e+00 -2.324331e+00 AnnSd 3.351651e+00 2.750413e+00 2.984443e+00 3.334230e+00 3.335077e+00 5.567418e+00 1.037449e+01 Sharpe 6.146225e+01 -2.156491e+01 1.928186e+01 -3.199690e+01 -2.656219e+01 5.313350e+01 -2.242420e+01 HitRate 6.652743e+00 -9.851016e-01 2.969925e+00 -1.991089e-01 -1.252437e+00 4.413812e+00 -1.385408e+00 Beta -4.002120e-02 -3.125860e-02 -4.566500e-02 3.463950e-02 7.608590e-02 -1.161071e-01 1.000000e+00 Alpha 1.960868e+00 -6.565334e-01 4.743020e-01 -9.878636e-01 -6.933243e-01 2.654192e+00 0.000000e+00 DrawDn -9.168314e+00 -1.561330e+01 -1.090424e+01 -2.690417e+01 -2.099594e+01 -1.326259e+01 -5.962323e+01 DDnBeg 2.018557e+07 2.007819e+07 2.008099e+07 2.012289e+07 2.007584e+07 2.019282e+07 2.011055e+07 DDnN 3.500000e+01 1.522500e+02 7.500000e+01 9.175000e+01 1.245000e+02 2.925000e+01 1.157500e+02 AnnTo 6.562868e+02 9.047021e+02 9.368678e+02 9.123413e+02 7.268272e+02 1.383114e+03 0.000000e+00 Quarterly AnnMn 1.273269e+00 1.814666e-01 4.927360e-02 -6.205964e-01 -8.784326e-01 2.151702e+00 -2.241157e+00 AnnSd 3.044936e+00 2.704247e+00 2.788437e+00 3.100221e+00 3.327981e+00 5.251225e+00 1.109528e+01 Sharpe 4.120683e+01 6.621168e+00 2.755499e+00 -2.048491e+01 -2.669018e+01 4.099666e+01 -2.027714e+01 HitRate 7.173438e+00 5.374843e-01 -1.209921e-01 -7.980827e-01 -3.066685e+00 6.647587e+00 -5.356229e+00 Beta -6.918030e-02 -2.996160e-02 -1.078060e-02 2.417190e-02 8.226400e-02 -1.514442e-01 1.000000e+00 Alpha 1.121021e+00 1.117134e-01 2.554630e-02 -5.665063e-01 -6.949753e-01 1.815996e+00 0.000000e+00 DrawDn -7.618745e+00 -1.074578e+01 -1.221118e+01 -1.966290e+01 -1.823469e+01 -9.750479e+00 -5.611454e+01 DDnBeg 2.014820e+07 2.009745e+07 2.009528e+07 2.010227e+07 2.008844e+07 2.013676e+07 2.010832e+07 DDnN 9.384615e+00 2.038462e+01 2.115385e+01 3.300000e+01 4.038462e+01 6.384615e+00 3.692308e+01 AnnTo 2.566343e+02 3.056862e+02 3.016657e+02 3.053099e+02 2.659915e+02 5.226258e+02 0.000000e+00 Semi-Annual AnnMn 9.177409e-01 4.439425e-01 -1.383753e-01 -3.273155e-01 -8.739833e-01 1.791724e+00 -2.262511e+00 AnnSd 3.157032e+00 2.748816e+00 2.746325e+00 2.993448e+00 3.265982e+00 5.303546e+00 1.166746e+01 Sharpe 2.839549e+01 1.665954e+01 -5.085238e+00 -9.732261e+00 -2.891797e+01 3.410903e+01 -1.955780e+01 HitRate 7.772831e+00 4.357711e+00 -2.136226e+00 1.023115e+00 -4.670330e+00 7.701781e+00 -7.043388e+00 Beta -4.615820e-02 -2.720850e-02 -9.123300e-03 1.721130e-02 6.411980e-02 -1.102780e-01 1.000000e+00 Alpha 8.194506e-01 3.783634e-01 -1.612186e-01 -2.849533e-01 -7.327706e-01 1.552221e+00 0.000000e+00 DrawDn -6.664032e+00 -8.558616e+00 -1.183254e+01 -1.554557e+01 -1.879887e+01 -1.178804e+01 -5.279337e+01 DDnBeg 2.012368e+07 2.009720e+07 2.008460e+07 2.010916e+07 2.010229e+07 2.011208e+07 2.010597e+07 DDnN 4.346154e+00 9.000000e+00 1.434615e+01 1.453846e+01 1.688462e+01 4.807692e+00 1.896154e+01 AnnTo 1.342416e+02 1.554783e+02 1.556258e+02 1.566897e+02 1.455070e+02 2.797486e+02 0.000000e+00 Weekly AnnMn 2.594197e+00 -5.597578e-01 -4.816678e-01 1.303513e-01 -1.589334e+00 4.183531e+00 -2.335283e+00 AnnSd 3.517560e+00 3.033187e+00 3.258497e+00 3.828038e+00 3.617964e+00 5.757854e+00 9.732166e+00 Sharpe 7.374990e+01 -1.845444e+01 -1.478190e+01 3.405173e+00 -4.392895e+01 7.265782e+01 -2.399551e+01 HitRate 4.724409e+00 -2.624672e-01 0.000000e+00 1.312336e-01 -9.186352e-01 3.543307e+00 -1.968504e+00 Beta 6.545400e-03 -5.511870e-02 -5.953710e-02 2.269710e-02 8.401150e-02 -7.746620e-02 1.000000e+00 Alpha 2.609482e+00 -6.884756e-01 -6.207038e-01 1.833555e-01 -1.393143e+00 4.002625e+00 0.000000e+00 DrawDn -8.927208e+00 -1.636911e+01 -1.451313e+01 -1.825955e+01 -3.015362e+01 -1.184978e+01 -6.285831e+01 DDnBeg 2.019083e+07 2.008102e+07 2.007101e+07 2.013071e+07 2.008052e+07 2.019082e+07 2.011043e+07 DDnN 9.800000e+01 5.950000e+02 4.850000e+02 3.800000e+02 7.090000e+02 1.080000e+02 4.640000e+02 AnnTo 1.153118e+03 2.270166e+03 2.496013e+03 2.432971e+03 1.295451e+03 2.448569e+03 0.000000e+00 Annualized mean one-week returns bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, idx)$annSumm # DISPLAY CALENDAR-YEAR RETURNS Q1 Q2 Q3 Q4 Q5 TxB uRet nPrds 2007 -7.8360034 0.7784924 -1.4774981 2.3996230 6.1353861 -13.9713895 16.0985100 31 2008 4.6375210 -1.6014541 -0.6020764 0.8319950 -3.2659855 7.9035065 -13.1533701 52 2009 1.5601528 0.4728078 -0.2398714 -2.0667256 -0.4248972 1.9850500 10.2375370 52 2010 1.5754798 -3.3674781 -2.0555851 7.1616423 -2.7720355 4.3475154 2.9512123 53 2011 7.0131670 -4.6978445 1.2435742 0.1744792 -4.3795708 11.3927378 -4.1065988 52 2012 1.7869536 0.2928114 -3.1586101 2.9275709 -1.3886712 3.1756248 3.4833257 52 2013 5.7106674 -1.5637326 -0.5121886 -3.5315647 -0.4958326 6.2065001 -4.9124563 52 2014 7.1731441 1.6506633 -0.7707926 -1.4234973 -6.6673785 13.8405226 -16.2172346 52 2015 7.8482385 -0.2984466 -1.8293253 -4.9756229 0.1341678 7.7140707 -14.6408438 52 2016 4.6023613 0.0341821 -4.1909022 -0.6751532 0.4215097 4.1808516 -6.0898082 53 2017 2.8555923 -0.9374345 1.9506039 -2.1033874 -1.5728443 4.4284367 12.5654405 52 2018 3.1978511 0.5139022 0.5724439 -0.6389634 -3.6630997 6.8609507 -9.3094558 52 2019 -0.7877788 -1.7878981 2.2889560 1.2438881 -1.0945793 0.3068004 -0.9546108 52 2020 -2.9491378 2.3086817 1.6519839 -3.2017083 2.3657727 -5.3149105 4.7790869 52 2021 -1.6253314 0.3714917 -0.3979036 6.5067803 -4.0215014 2.3961699 -8.2316355 53 2022 NaN NaN NaN NaN NaN NaN NaN 0 2023 NaN NaN NaN NaN NaN NaN NaN 0 "],["flow-percentage-country-strategy.html", "6 Flow-Percentage Country Strategy 6.1 Overview 6.2 Daily Percentage Flow 6.3 Strategy Implementation", " 6 Flow-Percentage Country Strategy 6.1 Overview The Flow-Percentage Country Strategy is an equity based rotation strategy, which ranks different countries across a customized universe of both developed and emerging markets. This approach uses the stated allocations of equity funds with a cross-border focus and calculates percentage flow into countries. In terms of twenty-day percentage flows, the top fifth of ACWI countries outperform the bottom fifth by over 3% per year. The strategy works best in Emerging Markets, but adds value across the board. 6.2 Daily Percentage Flow The Flow-Percentage Country Strategy developed by EPFR Global is based on percentage flow into countries. In this section, the reader will gain an understanding of the aggregations which can be used to create a signal as well as the methodology behind daily percentage flow calculations. 6.2.1 Aggregations The first step is defining a subset of data to capture in calculating our signal. This strategy requires; Equity funds with a cross-boarder focus. These are essentially any fund that has a mandate spanning more than one country. The vast majority of these will be global and regional funds. Funds must report both daily flows and country allocations, since these values are needed to calculate Daily Percentage Flow. Cross-border equity funds, which report their country allocations and their fund flows, are a subset of those that only report their fund flows to EPFR. The figure below shows EPFRs coverage of this universe over time compared to our total coverage. Updated at the end of July each year Users looking for more specific detail can customize this aggregation even further using EPFRs fund-level or share class-level granularity. Some good examples would be Active/Passive, ETF or Mutual funds, Institutional or Retail. Users can use these tags to different degrees in creating aggregated signals to backtest. Further detail about this is available in section 3. This can be achieved using fund-level flow files or reaching out to EPFRs quant team for customized aggregations. 6.2.2 Calculation To begin calculating the Daily Percentage flow, we start with our subset of cross-border equity funds. To calculate the funds impact on a country, we scale a funds flow by multiplying it against its stated country allocation, which is available in EPFRs Country Allocation Database, on that day. EPFR releases country allocations of all funds on the \\(23^{\\text{rd}}\\) of each month (or the next available business day) at a monthly frequency. Hence, our calculation assumes constant country allocation between two consecutive release dates within the month. We then apply the same procedure to all funds with a fund flow and country allocation information and then sum the flows for each country across all funds. \\[\\text{Total Impact}_{c,t} = \\sum^{N}_{i=m}{\\text{Flow}_i \\times \\text{Allocation}_i}\\] Where: \\(\\text{Total Impact}\\) = the impact on a country \\(c\\), across all funds \\(i\\), for day \\(t\\) Additionally, we repeat the process across the same funds Assets held under Management (AuM), to get the total AuM held in a country. \\[\\text{Total AuM}_{c,t} = \\sum^{N}_{i=m}{\\text{AuM}_i \\times \\text{Allocation}_i}\\] Where: \\(\\text{Total AuM}\\) = the assets held in a country \\(c\\), across all funds \\(i\\), for day \\(t\\) Finally, to find the daily percentage flow for a country, we divide the Total Impact by the Total AuM. Then we repeat this across all different countries for the entire history. \\[\\text{Percentage Flow}_{c,t} = \\frac{\\text{Total Impact}_{c,t}}{\\text{Total AuM}_{c,t}}\\] Where: \\(\\text{Percentage Flow}\\) = the scaled flow as a percentage into a country \\(c\\), across all funds \\(i\\), for day \\(t\\) 6.2.3 Flow File The users may create flow percentages for their desired country aggregations and granularity using the methodology described in the previous section. EPFR also provides a pre-calculated aggregation for its users for the Daily Flow-Percentage Country Strategy. This file can be found on the FTP under the strategies folder. Please refer to the FTP Folder Structure section for the exact location of this file. This file contains daily cross-border equity fund flow data for 52 countries and is updated daily at 5:00 PM est. with a T+1 day lag. For this demonstration, we use the pre-calculated file FloPctCtry-daily.csv. Below shows a snippet of what this file contains. AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US JO MA PK AE QA SA KW 20220201 0.0682839 0.0084836 0.1025408 0.0139744 0.0221570 0.0205982 0.0548555 0.0319277 0.0060054 0.0221536 0.0286116 0.0230859 0.0379905 0.0195777 0.0146236 0.0208210 0.0363276 0.0807825 0.0289586 0.0385508 0.0306830 0.0330318 0.0469420 0.0361752 0.0453934 0.1034383 -0.0009420 0.0483840 0.0732804 0.0681679 0.0814963 0.1422620 0.1951290 0.0597506 0.2557560 0.1649068 0.1873234 0.0161138 0.1056664 0.1899218 0.1672633 0.1732925 0.1840847 0.0328124 0.0580442 0.1000220 0.1490446 -0.0443664 0.0431735 0.0427901 0.0462380 0.0299807 20220202 0.1071915 0.0281719 0.0950954 0.0202414 0.0344230 0.0163766 0.1111745 0.0417981 0.0245983 0.0504768 -0.0090245 0.0232131 0.0608292 0.0215472 -0.0117807 0.0184948 0.0378151 0.0529031 0.0224223 0.0489514 0.0360707 0.0268137 0.0133663 0.0955032 0.0783371 0.1482123 0.0650883 0.0575084 0.1073821 0.1102016 0.1021990 0.1753984 0.2864324 0.0724588 0.3588564 0.1960113 0.2311478 0.0461036 0.1557974 0.2426154 0.1954004 0.3344284 0.2244875 0.0394673 0.1199526 0.1302887 0.0396339 -0.0027174 0.0435513 0.0366501 0.0279959 0.0179536 20220203 0.0232839 0.0232704 0.0761505 0.0289616 0.0273847 0.0345332 0.0218809 0.0518640 0.0100158 0.0419875 0.0341742 0.0317831 0.0142656 0.0407090 -0.0425790 0.0449413 0.0516080 -0.0154822 0.0202419 0.0298686 0.0427326 -0.0100498 0.0006513 0.0224383 0.0630011 0.0594039 0.0454787 0.0349888 0.0310588 0.0406977 0.0843723 0.0592398 0.0618084 0.0473398 0.0813880 0.0405348 0.0415332 0.0349092 0.0467131 0.0649067 0.0371971 0.0825533 0.0770435 0.0275676 0.0901542 0.0017727 0.0246136 -0.0329425 0.0539309 0.0525786 0.0450357 0.0293389 20220204 0.0427605 0.0005431 0.0182251 0.0287499 0.0712703 0.0435060 0.0363027 0.0484562 -0.0030307 0.0577206 0.0478340 -0.1376946 0.0192682 0.0321432 -0.1510468 0.0421362 0.0360338 0.0059707 0.0473132 0.0457560 0.0483058 -0.0528643 -0.1633261 -0.0060812 0.0199169 0.0299800 -0.0224904 -0.1080532 0.0151556 0.0154724 0.0360337 0.0249990 0.0172963 -0.0035172 0.0360927 0.0188039 0.0210176 -0.0338378 0.0008837 0.0172023 0.0118729 0.0078131 0.0379598 -0.0100599 0.0647590 -0.0866469 0.0035331 0.0121018 0.0245301 0.0388262 0.0097923 0.0293662 20220207 0.0441435 0.0664523 0.0375737 0.0818605 0.0600913 0.0626405 0.0510620 0.0711956 0.0639915 0.1208601 0.0704777 -0.0070066 0.0388531 0.1213585 -0.0351091 0.0684053 0.1530069 0.0202382 0.0663745 0.0377460 0.0608658 0.0361060 -0.0094240 0.0387820 0.0365660 0.0762125 0.0265846 -0.0243340 0.0134566 0.0106205 0.0437974 0.0323487 0.0402917 -0.0128579 0.0555223 0.0155998 0.0353678 0.0139098 0.0200929 0.0320488 -0.0032316 0.0231484 0.0331243 0.0682547 0.0168594 -0.0235971 0.3344607 0.1606458 0.0998821 0.1439076 0.0371702 0.0266549 20220208 0.0755702 0.1394943 0.0547752 0.0364907 0.0922338 0.0896671 0.0667618 0.0688405 0.1180297 0.1237705 0.0781433 -0.0512573 0.0673441 0.1097059 -0.0799028 0.0898746 0.1163105 0.0313015 0.0910412 0.0432795 0.0653109 0.1015608 -0.1620651 0.0553638 0.0604454 0.0494414 0.1915267 -0.0821655 0.0221925 0.0278058 0.0287122 0.0487003 0.0518997 -0.0119569 0.0578275 0.0392554 0.0331660 -0.0396982 0.0050530 0.0597397 0.0194525 0.0270428 0.0478461 -0.0445550 0.0560942 0.0545403 0.0111911 -0.0012755 0.1037661 0.1163175 0.1036285 0.0850615 We will download this file from the ftp and store it in local folder EPFR/daily using ftp.get(), more about this function can be referred to in section 2.4. file &lt;- &quot;/Strategies/daily/FloPctCtry-daily.csv&quot; # PATH TO .csv FILE fldr &lt;- &quot;C:\\\\EPFR\\\\daily&quot; # LOCAL FOLDER ftp.get(file, fldr, &quot;filetransport.epfrglobal.com&quot;, w = &quot;username&quot;, h = &quot;password&quot;, &quot;ftp&quot;) # DOWNLOADS FILE FROM FTP TO LOCAL FOLDER, USING CREDENTIALS After downloading the csv file you will store its path as flow.file. A quick way to do this is shown below: flow.file &lt;- paste(fldr, ftp.file(file), sep = &quot;\\\\&quot;) # STORES FLOW FILE PATH, C:\\\\temp\\\\FloPctCtry-daily.csv 6.2.4 Return File The return file for this strategy should contain daily equity returns for each of the countries in the flow file, which the user can find with their own resources. EPFR also provides Fund Return data, that can be used as a proxy to returns. To create a return file using EPFR daily flow data, the following equation can be used: \\[\\text{Fund Return}_{c,t} = \\frac{\\sum^{N}_{i=m} \\text{Portfolio Change}_i}{\\sum^{N}_{i=m} \\text{Assets Start}_i}\\] Where: \\(\\text{Fund Return}\\) = the return value of country \\(c\\), across all funds \\(i\\), for day \\(t\\) For this demonstration, we will use a file that has calculated returns using EPFR daily flow data, which is locally stored in the folder EPFR/returns and has been named ETFCountryReturns.csv. ret.file &lt;- &quot;C:\\\\EPFR\\\\returns\\\\ETFCountryReturns.csv&quot; For your reference a snippet of our return file looks like this AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US PK AE QA SA KW 20220201 1.216153 0.9016166 1.848297 1.877648 0.8810507 1.840429 1.537664 1.303538 1.535172 0.7575718 0.9317495 1.236400 1.197279 1.047307 0.4112086 2.754831 1.917478 1.580909 0.7649221 0.8232780 1.260463 0.5450894 1.288094 2.012249 1.623388 1.585561 1.190278 0.9101336 2.341319 1.871180 1.660703 2.139739 1.332858 4.050880 2.673355 2.094102 1.905758 0.6483668 1.518307 2.464057 2.677256 0.8455714 1.642391 1.585187 3.162870 0.4981388 0.8767887 0.9909682 1.560791 1.528031 20220202 1.229971 0.8914860 1.854747 1.876020 0.8843670 1.852444 1.567557 1.304787 1.542828 0.7579900 0.9444344 1.235136 1.195559 1.047929 0.4067939 2.758704 1.918054 1.551835 0.7516109 0.8187220 1.277934 0.5488876 1.276596 2.015293 1.652679 1.595796 1.184149 0.9296423 2.359213 1.873940 1.672066 2.160430 1.338070 4.141353 2.672666 2.099197 1.905684 0.6551584 1.528388 2.481204 2.680701 0.8503853 1.643611 1.587420 3.190279 0.5038590 0.8798715 0.9955980 1.544955 1.527794 20220203 1.226963 0.8883007 1.833780 1.873542 0.8799717 1.826094 1.552677 1.316727 1.517052 0.7617148 0.9347483 1.206224 1.214456 1.048969 0.3961473 2.746480 1.914590 1.504623 0.7286515 0.8114083 1.292432 0.5449740 1.275142 1.961160 1.659353 1.583173 1.162599 0.9313575 2.310394 1.851140 1.659340 2.151387 1.320238 4.033247 2.629636 2.067067 1.877527 0.6513808 1.505205 2.454486 2.617539 0.8495833 1.642705 1.584409 3.108921 0.5044404 0.8757572 0.9996700 1.533813 1.528008 20220204 1.233514 0.8882288 1.845554 1.881782 0.8842343 1.824873 1.562143 1.336320 1.518061 0.7622830 0.9406746 1.218201 1.222897 1.056475 0.3914212 2.743207 1.916969 1.509815 0.7180452 0.8152001 1.284537 0.5453844 1.259993 1.978811 1.657073 1.591187 1.169147 0.9087460 2.284492 1.837019 1.655472 2.143534 1.304880 3.944003 2.595245 2.053071 1.847395 0.6503386 1.501491 2.411192 2.615541 0.8519894 1.630650 1.609301 3.125973 0.5079538 0.8767967 1.0008716 1.534457 1.529081 20220207 1.233101 0.8934258 1.844329 1.871690 0.8957612 1.802879 1.556472 1.321601 1.518591 0.7650501 0.9275738 1.219366 1.235957 1.060229 0.3999828 2.766496 1.925832 1.518986 0.7278336 0.8209700 1.290253 0.5437079 1.248669 1.983558 1.652063 1.608149 1.174699 0.9106971 2.302398 1.844615 1.667302 2.154655 1.311711 3.964043 2.634784 2.068715 1.858852 0.6465406 1.517363 2.379000 2.639204 0.8479773 1.619189 1.619199 3.114157 0.5073301 0.8790720 1.0012910 1.549670 1.532303 20220208 1.246383 0.8951421 1.855057 1.880200 0.8947920 1.809617 1.562096 1.321507 1.545723 0.7654877 0.9348395 1.257207 1.250049 1.067788 0.4053601 2.780996 1.943669 1.529488 0.7385582 0.8161895 1.306226 0.5437769 1.254819 1.992795 1.658260 1.587118 1.224245 0.9296387 2.295751 1.837115 1.667085 2.173732 1.318192 3.890220 2.629188 2.075322 1.863715 0.6521946 1.519889 2.388347 2.643522 0.8479773 1.641555 1.637959 3.142427 0.5085918 0.8845530 1.0013951 1.548731 1.541016 6.3 Strategy Implementation The final step is implementing this strategy to create a signal. Lets begin by reading in the flow and return files to our R studio work space. x &lt;- mat.read(flow.file) # GET FLOW PERCENTAGE y &lt;- mat.read(ret.file) # GET RETURN One of our first options is choosing the universe we want to use. EPFR has tested this signal within three different universes of countries ACWI (All Country World Index), EAFE (Europe, Australasia, and the Far East (EAFE), and EM (Emerging Markets). For this example, we choose ACWI, which includes 52 countries. idx &lt;- &quot;ACWI&quot; Then, to subset the flow file \\(x\\) to the selected universe \\(idx\\) the function Ctry.msci.members.rng() from the library('EPFR') is used. This function returns a list of two letter country codes from \\(idx\\) that are in \\(x\\). x &lt;- x[, is.element(dimnames(x)[[2]], Ctry.msci.members.rng(idx, dimnames(x)[[1]][1], dimnames(x)[[1]][dim(x)[1]]))] # SUBSET TO INDEX COUNTRIES We will also subset the return file \\(y\\) to use the same countries as \\(x\\). y &lt;- y[, dimnames(x)[[2]]] # TOTAL RETURN INDEX * Note: subsetting can be also be done when creating the flow and return files 6.3.1 Compounding Flows Next, we set up a variable for our look-back period, which can also be called a flow window. This variable will be the window of time we use to create a trailing compounded daily percentage flow. The look-back period we choose for our demonstrations is 20 days. lookback &lt;- 20 # FLOW WINDOW (IN WEEKDAYS) - 20 day look back period Again, using a function from the library('EPFR'), compound.flows() compounds the daily percentage flow over the trailing lookback period for each country. x &lt;- compound.flows(x, lookback, F) # COMPOUND FLOWS AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US PK AE QA SA KW 20220201 1.695092 0.8956733 2.063833 0.7271091 0.9426943 0.6964292 1.524033 0.7990852 0.8919134 1.419051 1.1535678 0.4800635 1.386685 1.1331340 0.7235974 0.7281222 1.173349 1.0277834 1.386671 1.471901 0.9313852 0.6540640 0.6566465 1.339803 1.0970795 1.552139 0.8404185 0.8089432 1.1812861 1.283772 1.497817 1.503535 1.560870 0.9719636 1.683330 1.243455 1.289938 0.7314205 0.7206113 1.350597 1.0910952 1.286315 1.486433 1.1533874 2.313395 0.4031779 1.264408 1.358975 1.0466353 1.1042466 20220202 1.731964 0.8687557 2.107286 0.6759108 0.9247791 0.6658331 1.576946 0.7954228 0.8679853 1.424527 1.0902695 0.4632308 1.375429 1.1067276 0.6855281 0.6992272 1.160812 0.9444863 1.351930 1.439832 0.9319557 0.6695283 0.6210998 1.382906 1.1010139 1.621488 0.8452453 0.8271424 1.1984612 1.314368 1.528429 1.637728 1.762992 0.9517786 1.974771 1.374431 1.448574 0.7374430 0.7875962 1.525683 1.2042251 1.579271 1.633617 1.0697399 2.347465 0.4403477 1.261515 1.360978 1.0510618 1.0949054 20220203 1.626377 0.8394779 2.008515 0.6186800 0.9012758 0.6484295 1.484440 0.7754210 0.8147986 1.367550 1.0516171 0.4365379 1.300942 1.0765942 0.5912039 0.6969822 1.137966 0.7878565 1.281467 1.325633 0.8817094 0.5708724 0.5845868 1.310560 1.0288271 1.553199 0.7619803 0.7985394 1.1333105 1.257788 1.512803 1.653864 1.736619 0.9125970 1.965527 1.341146 1.414505 0.6974852 0.7699205 1.514267 1.1654000 1.617363 1.624691 0.9448688 2.229203 0.3404675 1.202900 1.301223 0.9995534 1.0231983 20220204 1.532328 0.7811643 1.865744 0.5606279 0.8625573 0.5768271 1.386277 0.7413796 0.7480784 1.234843 0.9345539 0.1735295 1.168880 0.9548012 0.3243255 0.6274899 1.037028 0.7479860 1.226853 1.222101 0.7797623 0.3770805 0.2687186 1.178456 0.9312816 1.472652 0.7328853 0.5678964 1.0401687 1.162474 1.442076 1.587797 1.638086 0.8283374 1.895316 1.278650 1.346514 0.5347725 0.7117450 1.441525 1.0977623 1.537649 1.566137 0.8849444 2.161350 0.1563037 1.079144 1.177267 0.8612783 0.8826006 20220207 1.484031 0.8280083 1.767824 0.6146402 0.9132366 0.6335915 1.343931 0.7838898 0.7867806 1.335617 0.9728531 0.1568496 1.135682 1.0657497 0.2825486 0.6881150 1.173333 0.6562403 1.271845 1.236586 0.8385317 0.4077192 0.2483390 1.171250 0.8620616 1.485546 0.7361149 0.5072493 0.9914315 1.111113 1.430715 1.572091 1.612114 0.7573199 1.887822 1.248030 1.333999 0.5369278 0.7054003 1.419109 1.0501459 1.507637 1.549178 0.8539385 2.057653 0.3096477 1.165577 1.309447 0.8906014 0.8999861 20220208 1.472706 0.8185676 1.717035 0.5876077 0.9343163 0.6396381 1.333841 0.8166971 0.7622232 1.306481 0.9213935 0.0440313 1.154466 1.0494184 0.0861126 0.6916074 1.178620 0.6119710 1.173741 1.073762 0.8073279 0.3716791 0.0258098 1.156309 0.8464903 1.464266 0.8147882 0.3813900 0.9353056 1.064155 1.363201 1.585702 1.587684 0.6574123 1.839468 1.218158 1.311485 0.4054928 0.6356833 1.413500 0.9914214 1.451665 1.522581 0.7958580 2.074265 0.0245053 1.125824 1.274673 0.8534067 0.8333133 6.3.2 Ranking Countries Next, we sort the countries in each universe into five equal bins based on their 20-day Percentage Flow Compounded value for the selected holding period. To do this, we will use the function from library('EPFR'), called bbk(). This function will output a standardized backtest result. The bbk() function requires our compounded daily percentage flow file, a return file, and our selected universe. Please refer to the library documentation for the complete list of parameters of this function. The first parameter we add is the number of bins we want to use. For our case, we want to use 5 because our strategy is to go long the top fifth and short the bottom fifth. nBin &lt;- 5 # NUMBER OF BINS Since EPFR data is published with T+1 day lag and is released around 5:00 pm EST, we account for a T+2 day delay in our model since that is when one can trade on the information. Users interested in more timely signals can also use the T+2 Open Prices for backtesting purposes. EPFR also offers a Premium Daily offering, an earlier release of the end-of-day data covering a significant subset of fund-level flow information. delay &lt;- 2 # DELAY IN KNOWING DATA (IN WEEKDAYS) - data takes time to have It is also important to note that this model will need to be re-balanced weekly. The day of the week the rebalancing occurs is at the discretion of the user. For this example we will set the day of the week to trade as Friday. doW &lt;- 5 # DAY OF THE WEEK YOU WILL TRADE ON (5 = FRIDAYS) Additionally, we also evaluate the returns for different holding periods. The user can input return horizons that they are interested in here. For this example we define a return horizon for weekly, fortnightly, monthly, bi-monthly, quarterly, and semi-annually. hz &lt;- c(5, 10, 20, 45, 65, 130) # RETURN HORIZON (IN WEEKDAYS) - holding periods Now that we have defined all of our inputs, to rank the countries into quintiles by their 20-day percentage flow, we call function bbk() for a 1-week holding period. z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, idx) 6.3.3 Model Twenty-day flow percentage ranked into quintiles (computed only where forward returns are available) z[[&quot;bins&quot;]] AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US PK AE QA SA KW 20220225 3 1 3 3 2 4 2 4 1 1 2 5 4 1 5 3 1 NA 1 1 3 5 4 5 5 1 1 5 4 4 2 3 2 5 1 4 3 4 5 2 5 3 3 3 5 NA 2 2 2 4 20220218 3 2 2 4 3 5 2 4 3 1 3 5 3 2 5 4 2 NA 1 1 4 5 5 4 5 1 3 5 4 3 2 1 1 5 1 2 2 5 5 1 4 3 1 4 2 NA 3 1 3 4 20220211 2 4 1 5 3 5 2 4 4 2 3 5 3 3 5 5 2 NA 2 3 4 5 5 3 5 1 4 5 3 3 1 1 1 4 1 2 2 5 4 1 3 1 1 4 1 NA 2 2 3 4 20220204 1 4 1 5 4 5 1 5 4 2 3 5 2 3 5 5 3 NA 3 2 4 5 5 2 3 1 4 4 3 3 2 1 1 4 1 2 2 5 5 2 3 1 1 4 1 NA 3 2 4 3 Quintile Returns over the equal-weight universe z[[&quot;rets&quot;]] Q1 Q2 Q3 Q4 Q5 TxB uRet 20220225 5.2910368 2.8962912 -0.4855041 -0.4607084 -6.9975571 12.2885940 -4.6152826 20220218 1.1741643 1.5396248 1.8426982 0.5842906 -4.9283863 6.1025506 -2.7415387 20220211 -1.0651267 0.5892771 0.8472477 0.1733038 -0.4684438 -0.5966829 -0.9261476 20220204 -0.5636523 -0.3544004 0.0887137 1.0192039 -0.1233846 -0.4402677 1.3032221 6.3.4 Performance Go long the top basket and short the bottom basket. Performance over all holding periods fcn &lt;- function(retW) {as.matrix(bbk(x, y, 1, retW, nBin, doW, T, 0, delay, idx)$summ)} # DEFINE SUMMARY FUNCTION sapply(split(hz, hz), fcn, simplify = &quot;array&quot;) # WRITE SUMMARIES Q1 Q2 Q3 Q4 Q5 TxB uRet Bi-Monthly AnnMn -3.667348e+00 -1.158872e+00 7.734473e-01 1.667838e+00 2.513779e+00 -6.181127e+00 5.483049e+00 AnnSd 5.363668e+00 4.792023e+00 4.215072e+00 4.421763e+00 6.000888e+00 1.009272e+01 1.594861e+01 Sharpe -7.105842e+01 -2.447900e+01 1.856333e+01 3.792949e+01 4.468081e+01 -6.602825e+01 3.435824e+01 HitRate -1.286550e+01 -7.070025e+00 4.723347e+00 6.755136e+00 8.547009e+00 -9.716599e+00 1.315040e+01 Beta -1.478121e-01 -1.196730e-02 1.161160e-02 6.673640e-02 8.154510e-02 -2.293572e-01 1.000000e+00 Alpha -2.884656e+00 -1.124723e+00 7.242273e-01 1.311851e+00 2.102379e+00 -4.987035e+00 0.000000e+00 DrawDn -3.070239e+01 -2.066016e+01 -9.764700e+00 -8.679266e+00 -1.014188e+01 -5.565608e+01 -2.647945e+01 DDnBeg 2.015600e+07 2.015744e+07 2.017068e+07 2.017505e+07 2.019930e+07 2.015392e+07 2.018901e+07 DDnN 3.111111e+01 2.700000e+01 1.133333e+01 6.888889e+00 8.333333e+00 3.033333e+01 7.777778e+00 AnnTo 3.708705e+02 4.283792e+02 4.436285e+02 4.394258e+02 3.550319e+02 7.259023e+02 0.000000e+00 Fortnightly AnnMn -3.519279e+00 -7.357005e-01 -9.227690e-02 1.363968e+00 2.889283e+00 -6.408562e+00 5.239828e+00 AnnSd 5.696370e+00 4.538582e+00 4.747530e+00 5.075523e+00 7.164521e+00 1.126841e+01 1.547504e+01 Sharpe -6.169317e+01 -1.622664e+01 -2.416807e+00 2.734825e+01 4.042979e+01 -5.687269e+01 3.384004e+01 HitRate -3.389830e+00 -2.259887e+00 -2.824859e-01 4.519774e+00 2.542373e+00 -3.672316e+00 8.192090e+00 Beta -1.020305e-01 -9.860000e-05 5.060400e-03 1.592130e-02 8.227580e-02 -1.843063e-01 1.000000e+00 Alpha -2.989229e+00 -7.346950e-01 -1.280797e-01 1.294359e+00 2.456386e+00 -5.445615e+00 0.000000e+00 DrawDn -3.252271e+01 -1.924537e+01 -1.361857e+01 -1.150657e+01 -1.354643e+01 -6.513031e+01 -3.471675e+01 DDnBeg 2.015081e+07 2.015547e+07 2.018516e+07 2.019555e+07 2.021556e+07 2.015081e+07 2.019012e+07 DDnN 1.460000e+02 1.225000e+02 6.100000e+01 5.500000e+01 7.000000e+00 1.680000e+02 3.050000e+01 AnnTo 9.009416e+02 1.477169e+03 1.622225e+03 1.431877e+03 9.021657e+02 1.803107e+03 0.000000e+00 Monthly AnnMn -4.096170e+00 -9.957615e-01 1.684271e+00 1.444052e+00 2.074891e+00 -6.171061e+00 5.114207e+00 AnnSd 5.416322e+00 4.556909e+00 4.426222e+00 4.849517e+00 6.616150e+00 1.033563e+01 1.575257e+01 Sharpe -7.534713e+01 -2.207303e+01 3.841572e+01 3.038562e+01 3.070248e+01 -5.898969e+01 3.256064e+01 HitRate -7.954546e+00 -1.704546e+00 2.840909e+00 3.693182e+00 7.954546e+00 -8.522727e+00 9.375000e+00 Beta -9.489770e-02 1.183400e-03 -2.751680e-02 5.199940e-02 6.671430e-02 -1.616120e-01 1.000000e+00 Alpha -3.611450e+00 -1.007717e+00 1.822987e+00 1.185881e+00 1.733886e+00 -5.345336e+00 0.000000e+00 DrawDn -3.545821e+01 -1.964419e+01 -7.973902e+00 -1.050657e+01 -1.183815e+01 -6.187441e+01 -3.115392e+01 DDnBeg 2.015092e+07 2.015090e+07 2.017078e+07 2.019779e+07 2.021044e+07 2.015321e+07 2.019014e+07 DDnN 7.725000e+01 5.750000e+01 3.000000e+01 2.350000e+01 7.500000e+00 8.200000e+01 1.525000e+01 AnnTo 6.722822e+02 8.977715e+02 9.482347e+02 8.797569e+02 6.694508e+02 1.341733e+03 0.000000e+00 Quarterly AnnMn -3.010612e+00 -1.379175e+00 3.278103e-01 1.486830e+00 2.706998e+00 -5.717610e+00 5.989698e+00 AnnSd 4.975540e+00 4.755567e+00 4.267548e+00 4.230194e+00 5.615394e+00 9.360382e+00 1.524739e+01 Sharpe -6.159571e+01 -2.710429e+01 6.779117e+00 3.316403e+01 4.861341e+01 -6.153727e+01 4.049393e+01 HitRate -1.143984e+01 -4.010519e+00 -3.287310e-02 7.747096e+00 1.112207e+01 -1.089196e+01 1.530791e+01 Beta -1.452777e-01 3.048890e-02 9.560300e-03 3.942740e-02 6.504100e-02 -2.103187e-01 1.000000e+00 Alpha -2.179808e+00 -1.617811e+00 2.681731e-01 1.296172e+00 2.367950e+00 -4.547758e+00 0.000000e+00 DrawDn -2.439755e+01 -1.964698e+01 -1.046343e+01 -7.760201e+00 -9.064333e+00 -4.719616e+01 -2.328108e+01 DDnBeg 2.015458e+07 2.015624e+07 2.017071e+07 2.016764e+07 2.019436e+07 2.015456e+07 2.018968e+07 DDnN 2.000000e+01 1.684615e+01 1.100000e+01 6.000000e+00 4.692308e+00 1.892308e+01 2.923077e+00 AnnTo 2.722512e+02 3.057292e+02 3.165133e+02 3.060959e+02 2.688957e+02 5.411469e+02 0.000000e+00 Semi-Annual AnnMn -1.845390e+00 -1.131811e+00 2.882473e-01 1.240077e+00 1.505930e+00 -3.351319e+00 6.595841e+00 AnnSd 5.051874e+00 4.588560e+00 4.195620e+00 4.524511e+00 5.329069e+00 9.237284e+00 1.423706e+01 Sharpe -4.009151e+01 -2.236897e+01 4.776800e+00 2.957938e+01 2.428975e+01 -3.450307e+01 4.709465e+01 HitRate -1.047830e+01 -7.396450e+00 7.889546e-01 1.107002e+01 8.111440e+00 -9.689349e+00 2.011834e+01 Beta -1.469613e-01 1.173060e-02 2.308390e-02 7.227790e-02 3.930550e-02 -1.862668e-01 1.000000e+00 Alpha -9.308688e-01 -1.235009e+00 1.265326e-01 8.130467e-01 1.285399e+00 -2.216268e+00 0.000000e+00 DrawDn -1.749112e+01 -1.446985e+01 -9.924052e+00 -7.242502e+00 -9.758454e+00 -3.217780e+01 -1.752810e+01 DDnBeg 2.015890e+07 2.016303e+07 2.017149e+07 2.018354e+07 2.018304e+07 2.015543e+07 2.017642e+07 DDnN 8.230769e+00 6.923077e+00 5.000000e+00 2.730769e+00 4.192308e+00 7.846154e+00 2.307692e+00 AnnTo 1.433542e+02 1.633492e+02 1.655669e+02 1.554958e+02 1.544844e+02 2.978386e+02 0.000000e+00 Weekly AnnMn -2.382350e+00 -1.264825e+00 -6.822750e-02 1.232895e-01 3.616185e+00 -5.998535e+00 5.171820e+00 AnnSd 6.075655e+00 4.586436e+00 4.755661e+00 4.986296e+00 6.943735e+00 1.150496e+01 1.487190e+01 Sharpe -3.921141e+01 -2.757752e+01 -1.434659e+00 2.472566e+00 5.207839e+01 -5.213868e+01 3.477578e+01 HitRate -7.042254e-01 -1.408451e-01 2.676056e+00 -2.676056e+00 2.676056e+00 -4.647887e+00 6.056338e+00 Beta -9.556540e-02 3.473940e-02 -9.112000e-03 2.837870e-02 4.115190e-02 -1.367174e-01 1.000000e+00 Alpha -1.888102e+00 -1.444491e+00 -2.110200e-02 -2.348010e-02 3.403355e+00 -5.291457e+00 0.000000e+00 DrawDn -2.698652e+01 -2.177673e+01 -1.084032e+01 -1.107965e+01 -1.548982e+01 -6.580269e+01 -3.837292e+01 DDnBeg 2.015081e+07 2.016010e+07 2.018060e+07 2.019053e+07 2.021102e+07 2.015081e+07 2.018013e+07 DDnN 3.410000e+02 2.380000e+02 1.730000e+02 1.260000e+02 2.000000e+01 3.360000e+02 1.120000e+02 AnnTo 1.178504e+03 2.263750e+03 2.524279e+03 2.179606e+03 1.158322e+03 2.336826e+03 0.000000e+00 Annualized mean one-week returns bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay)$annSumm # DISPLAY CALENDAR-YEAR RETURNS Q1 Q2 Q3 Q4 Q5 TxB uRet nPrds 2015 7.4092079 8.1746110 -0.4174013 -10.1771387 -4.8193481 12.228556 -22.199034 28 2016 -4.4912261 -0.6082134 -0.9738561 -0.4739978 6.4390724 -10.930298 9.403868 53 2017 -15.0185103 -0.8214747 7.0253952 9.0197980 0.4418414 -15.460352 18.308649 52 2018 0.3631131 -6.1971480 4.9349345 -0.6077803 2.5457501 -2.182637 -12.123279 52 2019 -0.3544124 -8.2130608 -1.0657069 0.4384526 9.1539591 -9.508372 16.383026 52 2020 2.8102794 -3.8324169 -0.3289819 -4.1966331 5.5477524 -2.737473 4.955824 52 2021 -4.1534198 0.6578803 -1.0638671 -2.9670771 7.5264838 -11.679904 12.727776 53 2022 7.6208121 14.8148759 4.9761496 0.9834176 -28.3952552 36.016067 -6.838586 13 2023 NaN NaN NaN NaN NaN NaN NaN 0 "],["flow-percentage-sector-strategy.html", "7 Flow-Percentage Sector Strategy 7.1 Overview 7.2 Daily Percentage Flow 7.3 Strategy Implementation", " 7 Flow-Percentage Sector Strategy 7.1 Overview The Flow-Percentage Sector Strategy is an equity based rotation strategy, which ranks different sectors across a customized universe of geographic regions. This approach uses daily active fund flows in conjunction with monthly sector and country allocations. The best results from this strategy come from Emerging, Japanese and United Kingdom sectors, but adds value across the board. For those regions, the top two sectors, in terms of twenty-day percentage flows, tend to out preform the bottom two sectors by around 7% per year. 7.2 Daily Percentage Flow The Flow-Percentage Sector Strategy developed by EPFR is based on percentage flow into sectors weighted by the regional emphasis of each fund. In this section, the reader will gain an understanding of the aggregations which can be used to create a signal as well as the methodology behind daily percentage flow calculations. 7.2.1 Aggregations The first step is defining a subset of data to capture in calculating our signal. This strategy requires; Active equity funds with a cross-border focus. These are essentially any fund that has a mandate spanning more than one country. Funds must report both daily flows with monthly sector and region allocations, since these values are needed to calculate Daily Percentage Flow. Active cross-border equity funds, which report their sector allocations, region allocations and their fund flows, are a subset of those that only report their fund flows to EPFR. The figure below shows EPFRs coverage of this universe over time compared to our total coverage. Updated at the end of July each year Users looking for more specific detail can customize this aggregation even further using EPFRs fund-level or share class-level granularity. Some good examples would be Active/Passive, ETF or Mutual funds, Institutional or Retail. Users can use these tags to different degrees in creating aggregated signals to backtest. Further detail about this is available in section 3. This can be achieved using fund-level flow files or reaching out to EPFRs quant team for customized aggregations. 7.2.2 Calculation To begin calculating the Daily Percentage flow, we start with our subset of active cross-border equity funds. To calculate the funds impact on a sector, we scale a funds flow by multiplying it against the product of its stated sector and region allocation, on that day. EPFR releases sector and region allocations of all funds on the \\(23^{\\text{rd}}\\) of each month (or the next available business day) at a monthly frequency. Hence, our calculation assumes constant country and sector allocations between two consecutive release dates within the month. We then apply the same procedure to all funds with a fund flow and allocation information and then sum the flows for each sector across all funds. \\[\\text{Total Impact}_{s,r,t} = \\sum^{N}_{i=m}{\\text{Flow}_i \\times (\\text{Sector Allocation}_i} \\times \\text{Region Allocation}_i)\\] Where: \\(\\text{Total Impact}\\) = the impact on a sector \\(s\\), for region \\(r\\), across all active cross-border equity funds \\(i\\), for day \\(t\\) Additionally, we repeat the process across the same funds Assets held under Management (AuM), to get the total AuM held in a country. \\[\\text{Total AuM}_{s,r,t} = \\sum^{N}_{i=m}{\\text{AuM}_i \\times (\\text{Sector Allocation}_i} \\times \\text{Region Allocation}_i)\\] Where: \\(\\text{Total AuM}\\) = the assets held in a sector \\(s\\), for region \\(r\\), across all active cross-border equity funds \\(i\\), for day \\(t\\) Finally, to find the daily percentage flow for a sector, we divide the Total Impact by the Total AuM. Then we repeat this across all different sectors for the entire history. \\[\\text{Percentage Flow}_{s,r,t} = \\frac{\\text{Total Impact}_{s,r,t}}{\\text{Total AuM}_{s,r,t}}\\] Where: \\(\\text{Percentage Flow}\\) = the scaled flow as a percentage into a sector \\(s\\), for region \\(r\\), across all active cross-border equity funds \\(i\\), for day \\(t\\) 7.2.3 Flow File The users may create flow percentages for their desired sector and country aggregations and granularity using the methodology described in the previous section. EPFR also provides pre-calculated aggregations for its users for the Daily Flow-Percentage Sector Strategy. These files can be found on the FTP under the strategies folder. There are 5 different Active Passive Sector files available for different universes which include; Emerging Markets (EM), Japan (JP), United Kingdom (UK), Eurozone, and the United States (US). Please refer to the FTP Folder Structure section for the exact location of these files. For this demonstration, we will pick the US universe so we will download the respective pre-calculated file named FloPctSector-US-daily.csv. This file contains daily active cross-border equity fund flow data for 12 sectors and is updated daily at 5:00 PM est. with a T+1 day lag. Below shows a snippet of what this file contains. CDisc CStpls Engy Fins HCare Indls Tech Matls Telco Utes REst FinsExREst 20211201 -0.0833652 -0.2180979 -0.1437463 -0.1476985 -0.0517319 -0.1334976 -0.1025957 -0.3549075 -0.0105562 -0.0425764 -0.0996954 -0.1631039 20211202 0.1029233 0.1952271 0.1972524 0.1445645 0.0776143 0.1341865 0.1052204 0.3002338 0.0376111 0.0542626 0.1223098 0.1517030 20211203 0.0270864 -0.0025913 0.0170724 0.0075179 0.0306224 0.0107477 0.0213962 -0.0096622 0.0076289 -0.0012017 -0.0083182 0.0126103 20211206 0.0367314 0.0117145 0.0377004 0.0220489 0.0156267 0.0228756 0.0113968 0.0020527 0.0374174 0.0054743 0.0419278 0.0156347 20211207 0.0021720 -0.0187280 -0.0542059 0.0355337 0.0307079 -0.0086272 -0.0269184 -0.0123226 0.0031472 0.0070403 0.1783900 -0.0106812 20211208 0.0870169 0.0756015 0.1409046 0.0941919 0.0582888 0.0801003 0.1290022 0.0458471 0.0632813 0.0498153 0.1267773 0.0837055 We will download this file from the ftp and store it in local folder EPFR/daily using ftp.get(), more about this function can be referred to in section 2.4. file &lt;- &quot;/Strategies/daily/FloPctSector-US-daily.csv&quot; # PATH TO .csv FILE fldr &lt;- &quot;C:\\\\EPFR\\\\daily&quot; # LOCAL FOLDER ftp.get(file, fldr, &quot;filetransport.epfrglobal.com&quot;, w = &quot;username&quot;, h = &quot;password&quot;, &quot;ftp&quot;) # DOWNLOADS FILE FROM FTP TO LOCAL FOLDER, USING CREDENTIALS After downloading the csv file you will store its path as flow.file. A quick way to do this is shown below: flow.file &lt;- paste(fldr, ftp.file(file), sep = &quot;\\\\&quot;) # STORES FLOW FILE PATH, C:\\\\EPFR\\\\daily\\\\FloPctSector-US-daily.csv 7.2.4 Return File The return file for this strategy should contain daily equity returns for each of the sectors in the flow file, which the user can find with their own resources. EPFR also provides Fund Return data, that can be used as a proxy to returns. To create a return file using EPFR daily flow data, the following equation can be used: \\[\\text{Sector Return}_{s,r,t} = \\frac{\\sum^{N}_{i=m} \\text{Portfolio Change}_i}{\\sum^{N}_{i=m} \\text{Assets Start}_i}\\] Where: \\(\\text{Sector Return}\\) = the return value of sector \\(s\\), for region \\(r\\), across all funds \\(i\\), for day \\(t\\) For this demonstration, we will use a file that has calculated total return indices, which is locally stored in the folder EPFR/returns and has been named WeeklyRets.csv. ret.file &lt;- &quot;C:\\\\EPFR\\\\returns\\\\WeeklyRets.csv&quot; For your reference a snippet of our return file looks like this CDisc CStpls Engy Fins HCare Indls Tech Matls Telco Utes REst 20211201 817.7962 425.7918 320.1739 288.0360 551.6620 532.1843 799.2990 517.4599 152.1217 335.1165 1642.436 20211202 826.7988 429.5191 329.2890 296.3150 553.6747 547.5368 807.2954 527.9472 154.6462 339.5786 1687.160 20211203 810.6849 435.4555 326.8461 291.3652 553.8848 546.5822 792.3028 526.7885 153.8167 342.7198 1683.576 20211206 819.8093 442.3736 331.8846 295.3406 556.8487 555.4087 798.8958 534.5133 156.1249 348.3600 1706.817 20211207 839.1720 443.3706 339.2438 300.9242 564.5825 561.2963 828.0123 542.5139 158.2545 350.9085 1735.571 20211208 842.3109 441.6354 339.2408 299.5600 569.0600 562.8735 833.4384 544.7281 159.7151 350.8076 1746.521 7.3 Strategy Implementation The final step is implementing this strategy to create a signal. Lets begin by reading in the flow and return files to our R studio work space. x &lt;- mat.read(flow.file) # GET FLOW PERCENTAGE y &lt;- mat.read(ret.file) # GET RETURN We will also align the flow file \\(x\\) and return file \\(y\\) columns. x &lt;- as.matrix(x[, dimnames(y)[[2]]]) # LINE UP INDICATORS WITH RETURNS * Note: subsetting can be also be done when creating the flow and return files 7.3.1 Compounding Flows Next, we set up a variable for our look-back period, which can also be called a flow window. This variable will be the window of time we use to create a trailing compounded daily percentage flow. The look-back period we choose for our demonstrations is 20 days. lookback &lt;- 20 # FLOW WINDOW (IN WEEKDAYS) - 20 day look back period Again, using a function from the library('EPFR'), compound.flows() compounds the daily percentage flow over the trailing lookback period for each country. x &lt;- compound.flows(x, lookback, F) # COMPOUND FLOWS CDisc CStpls Engy Fins HCare Indls Tech Matls Telco Utes REst FinsExREst 20211201 0.4390491 0.1964883 0.6182940 0.2447394 0.2987653 0.4475582 0.1637939 -0.1862302 0.4351033 0.3438049 -0.1899183 0.3845799 20211202 0.5566078 0.3650312 0.9062582 0.3623549 0.3566058 0.5557098 0.2665497 0.0889628 0.4518981 0.3503657 -0.0737508 0.5026841 20211203 0.5573817 0.3203809 0.6863400 0.3262608 0.3376000 0.5037760 0.2714612 0.0490416 0.4206566 0.3184208 -0.0936335 0.4614426 20211206 0.5893786 0.3344332 0.6921895 0.3444711 0.3464822 0.5202053 0.3034701 0.0531585 0.4570811 0.2978923 -0.0624542 0.4754157 20211207 0.5224570 0.2830498 0.5670383 0.3603478 0.3692682 0.4765169 0.2757256 -0.0024000 0.4252521 0.2614197 0.1263808 0.4352266 20211208 0.5988269 0.3473726 0.6506637 0.4243782 0.4123538 0.5353726 0.4073963 0.0586562 0.4753376 0.3037529 0.2264821 0.4876115 7.3.2 Ranking Sectors Next, we sort the sectors in each universe into five equal bins based on their 20-day Percentage Flow Compounded value for the selected holding period. To do this, we will use the function from library('EPFR'), called bbk(). This function will output a standardized backtest result. The bbk() function requires our compounded daily percentage flow file, a return file. Please refer to the library documentation for the complete list of parameters of this function. The first parameter we add is the number of bins we want to use. For our case, we want to use 5 because our strategy is to go long the top fifth and short the bottom fifth. nBin &lt;- 5 # NUMBER OF BINS Since EPFR data is published with T+1 day lag and is released around 5:00 pm EST, we account for a T+2 day delay in our model since that is when one can trade on the information. Users interested in more timely signals can also use the T+2 Open Prices for backtesting purposes. EPFR also offers a Premium Daily offering, an earlier release of the end-of-day data covering a significant subset of fund-level flow information. delay &lt;- 2 # DELAY IN KNOWING DATA (IN WEEKDAYS) - data takes time to have It is also important to note that this model will need to be re-balanced weekly. The day of the week the rebalancing occurs is at the discretion of the user. For this example we will set the day of the week to trade as Friday. doW &lt;- 5 # DAY OF THE WEEK YOU WILL TRADE ON (5 = FRIDAYS) Additionally, we also evaluate the returns for different holding periods. The user can input return horizons that they are interested in here. For this example we define a return horizon for weekly, fortnightly, monthly, bi-monthly, quarterly, and semi-annually. hz &lt;- c(5, 10, 20, 45, 65, 130) # RETURN HORIZON (IN WEEKDAYS) - holding periods Now that we have defined all of our inputs, to rank the sectors into quintiles by their 20-day percentage flow, we call function bbk() for a 1-week holding period. z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay) 7.3.3 Model Go long the top basket and short the bottom basket. Twenty-day flow percentage ranked into quintiles (computed only where forward returns are available) z[[&quot;bins&quot;]] CDisc CStpls Engy Fins HCare Indls Tech Matls Telco Utes REst 20211231 1 3 1 2 3 2 3 5 4 4 5 20211224 1 4 1 4 2 3 2 5 3 3 5 20211217 1 4 1 3 3 2 2 5 3 5 4 20211210 1 4 1 2 3 2 3 5 3 4 5 20211203 2 4 1 3 3 1 4 5 2 3 5 Quintile Returns over the equal-weight universe z[[&quot;rets&quot;]] Q1 Q2 Q3 Q4 Q5 TxB uRet 20211231 4.5183077 3.1954528 -2.4161439 -1.494909 -2.5946358 7.1129435 -0.7471261 20211224 -0.7288032 -0.7834273 -0.2369671 0.076910 1.7907712 -2.5195744 1.3941521 20211217 1.2842972 0.7650757 0.0081738 -1.029169 -1.0324648 2.3167621 1.7860398 20211210 -3.4640884 -0.9110965 0.2873910 2.308673 1.6354254 -5.0995138 -1.1656642 20211203 0.0444083 -0.6133919 -0.4864981 1.400920 -0.1021892 0.1465976 3.2579530 7.3.4 Performance Performance over all holding periods fcn &lt;- function(retW) {as.matrix(bbk(x, y, 1, retW, nBin, doW, T, 0, delay)$summ)} # DEFINE SUMMARY FUNCTION sapply(split(hz, hz), fcn, simplify = &quot;array&quot;) # WRITE SUMMARIES Q1 Q2 Q3 Q4 Q5 TxB uRet Bi-Monthly AnnMn 1.832044e+00 -3.117960e-01 1.137509e+00 -1.741307e+00 -1.094680e+00 2.926725e+00 9.542760e+00 AnnSd 9.163747e+00 7.614772e+00 6.819565e+00 7.574654e+00 8.184239e+00 1.435036e+01 1.643828e+01 Sharpe 1.938863e+01 -3.291781e+00 1.689765e+01 -2.471684e+01 -1.384967e+01 2.068234e+01 5.857941e+01 HitRate 1.862949e+00 1.192953e-01 6.063254e+00 -3.334720e+00 -3.731447e-01 2.727147e+00 1.930365e+01 Beta -4.162660e-02 -8.821100e-02 5.190090e-02 -1.874500e-03 6.675360e-02 -1.083803e-01 1.000000e+00 Alpha 2.223138e+00 5.290142e-01 6.546271e-01 -1.710497e+00 -1.751869e+00 3.975007e+00 0.000000e+00 DrawDn -2.893852e+01 -3.210194e+01 -2.882991e+01 -4.103388e+01 -5.517376e+01 -3.867573e+01 -5.265406e+01 DDnBeg 2.010720e+07 2.010944e+07 2.011967e+07 2.011074e+07 2.010511e+07 2.012599e+07 2.007096e+07 DDnN 3.833333e+01 2.588889e+01 1.955556e+01 5.333333e+01 6.411111e+01 2.677778e+01 7.888889e+00 AnnTo 3.271429e+02 3.978804e+02 3.797673e+02 4.225776e+02 3.264176e+02 6.535605e+02 0.000000e+00 Fortnightly AnnMn 2.273577e+00 -3.344613e-01 1.537962e+00 1.221035e-01 -3.253685e+00 5.527262e+00 9.698499e+00 AnnSd 9.465697e+00 7.969427e+00 6.754020e+00 8.130816e+00 8.476146e+00 1.458031e+01 1.769955e+01 Sharpe 2.397568e+01 -4.211775e+00 2.280524e+01 1.707395e+00 -3.831948e+01 3.784627e+01 5.483200e+01 HitRate 2.271523e+00 7.958159e-01 1.780122e+00 4.263622e-01 -4.109457e+00 3.616852e+00 1.245544e+01 Beta 1.381100e-02 -4.562100e-02 1.995370e-02 -2.372610e-02 2.695400e-02 -1.314300e-02 1.000000e+00 Alpha 2.137941e+00 1.083021e-01 1.345125e+00 3.536413e-01 -3.515982e+00 5.653923e+00 0.000000e+00 DrawDn -2.643360e+01 -5.196802e+01 -2.404667e+01 -3.099358e+01 -6.748342e+01 -3.963197e+01 -6.314218e+01 DDnBeg 2.021031e+07 2.008557e+07 2.017061e+07 2.011537e+07 2.009547e+07 2.021031e+07 2.007101e+07 DDnN 2.050000e+01 2.130000e+02 1.025000e+02 8.600000e+01 3.360000e+02 2.050000e+01 3.650000e+01 AnnTo 8.709020e+02 1.486593e+03 1.418594e+03 1.435616e+03 8.565755e+02 1.727477e+03 0.000000e+00 Monthly AnnMn 2.576892e+00 -7.967097e-01 8.547625e-01 -7.068334e-01 -1.902808e+00 4.479700e+00 9.614344e+00 AnnSd 9.367391e+00 7.287145e+00 6.692097e+00 8.125846e+00 8.112590e+00 1.413394e+01 1.744423e+01 Sharpe 2.749630e+01 -1.112361e+01 1.306623e+01 -8.773405e+00 -2.329606e+01 3.199302e+01 5.534194e+01 HitRate 7.968705e-01 -1.859364e-01 2.517990e+00 -3.014827e+00 -2.148532e+00 2.891674e+00 1.506508e+01 Beta -1.335830e-02 -5.905630e-02 2.953090e-02 -8.115400e-03 4.133730e-02 -5.469560e-02 1.000000e+00 Alpha 2.703839e+00 -2.285458e-01 5.718861e-01 -6.262644e-01 -2.303043e+00 5.006882e+00 0.000000e+00 DrawDn -2.159776e+01 -3.398174e+01 -2.603303e+01 -3.308932e+01 -5.845940e+01 -3.441531e+01 -5.909141e+01 DDnBeg 2.018042e+07 2.007592e+07 2.009589e+07 2.009334e+07 2.009583e+07 2.021291e+07 2.007099e+07 DDnN 3.225000e+01 1.332500e+02 2.900000e+01 8.950000e+01 1.542500e+02 8.500000e+00 1.825000e+01 AnnTo 6.428073e+02 8.930790e+02 8.301736e+02 9.082334e+02 6.404294e+02 1.283237e+03 0.000000e+00 Quarterly AnnMn 1.578371e+00 -1.770321e-01 1.032795e+00 -2.112346e+00 -4.173223e-01 1.995693e+00 9.508234e+00 AnnSd 8.606516e+00 7.529482e+00 6.871076e+00 7.496150e+00 7.776709e+00 1.309783e+01 1.579752e+01 Sharpe 1.837687e+01 -1.259716e+00 1.548890e+01 -2.845500e+01 -5.813096e+00 1.580097e+01 6.070068e+01 HitRate 1.118659e+00 1.423750e-02 5.227189e+00 -4.354635e+00 -8.786560e-01 2.745800e+00 2.188911e+01 Beta -8.737000e-03 -7.418250e-02 4.666780e-02 -1.632050e-02 3.149260e-02 -4.022960e-02 1.000000e+00 Alpha 1.661372e+00 5.317113e-01 5.911156e-01 -1.957916e+00 -7.215293e-01 2.382902e+00 0.000000e+00 DrawDn -2.611154e+01 -2.929329e+01 -2.114470e+01 -4.207442e+01 -4.732410e+01 -4.426822e+01 -4.911552e+01 DDnBeg 2.010591e+07 2.010072e+07 2.010992e+07 2.011298e+07 2.011768e+07 2.008751e+07 2.007164e+07 DDnN 2.592308e+01 2.046154e+01 1.338462e+01 3.869231e+01 3.884615e+01 2.076923e+01 5.692308e+00 AnnTo 2.445308e+02 2.977586e+02 2.704064e+02 2.910711e+02 2.360981e+02 4.806289e+02 0.000000e+00 Semi-Annual AnnMn 1.504210e+00 2.292275e-01 6.771046e-01 -9.179643e-01 -1.578442e+00 3.082652e+00 9.781540e+00 AnnSd 8.604652e+00 7.542431e+00 6.674262e+00 7.752885e+00 7.906002e+00 1.318452e+01 1.649308e+01 Sharpe 1.762781e+01 2.404560e+00 1.083226e+01 -1.279656e+01 -2.201893e+01 2.513455e+01 5.975026e+01 HitRate 1.397849e+00 3.362283e+00 5.132341e+00 -5.334988e-01 -5.628619e+00 5.570720e+00 2.358147e+01 Beta -2.027940e-02 -3.743210e-02 3.829900e-02 -2.292780e-02 2.297640e-02 -4.325590e-02 1.000000e+00 Alpha 1.703579e+00 5.916641e-01 3.179692e-01 -6.884712e-01 -1.823755e+00 3.527334e+00 0.000000e+00 DrawDn -3.023633e+01 -2.614659e+01 -2.152683e+01 -3.398891e+01 -4.874314e+01 -4.364457e+01 -4.227398e+01 DDnBeg 2.009552e+07 2.011570e+07 2.012101e+07 2.014960e+07 2.011796e+07 2.008537e+07 2.007162e+07 DDnN 1.584615e+01 1.023077e+01 8.500000e+00 1.219231e+01 1.934615e+01 9.923077e+00 2.769231e+00 AnnTo 1.318900e+02 1.470182e+02 1.379225e+02 1.509057e+02 1.267577e+02 2.586476e+02 0.000000e+00 Weekly AnnMn 2.942063e+00 -4.819068e-01 9.461319e-01 5.990781e-01 -3.516257e+00 6.458320e+00 9.967869e+00 AnnSd 9.796012e+00 7.809095e+00 6.851513e+00 7.889613e+00 8.484180e+00 1.491635e+01 1.864829e+01 Sharpe 3.003328e+01 -6.171097e+00 1.380909e+01 7.593251e+00 -4.144487e+01 4.329692e+01 5.345192e+01 HitRate 4.289216e+00 -1.225490e+00 2.328431e+00 -8.578431e-01 -3.308823e+00 2.205882e+00 7.352941e+00 Beta 2.877460e-02 -2.917400e-03 -1.904120e-02 -1.582050e-02 1.446820e-02 1.430650e-02 1.000000e+00 Alpha 2.655242e+00 -4.528262e-01 1.135932e+00 7.567749e-01 -3.660474e+00 6.315715e+00 0.000000e+00 DrawDn -2.796851e+01 -4.807470e+01 -2.587081e+01 -2.744579e+01 -7.042005e+01 -4.103008e+01 -6.629411e+01 DDnBeg 2.021031e+07 2.008121e+07 2.018021e+07 2.007062e+07 2.008053e+07 2.021031e+07 2.007101e+07 DDnN 4.100000e+01 4.440000e+02 2.150000e+02 6.800000e+01 6.660000e+02 4.300000e+01 7.300000e+01 AnnTo 1.127941e+03 2.306863e+03 2.233578e+03 2.271814e+03 1.191667e+03 2.319608e+03 0.000000e+00 Annualized mean one-week returns bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay)$annSumm # DISPLAY CALENDAR-YEAR RETURNS Q1 Q2 Q3 Q4 Q5 TxB uRet nPrds 2007 13.3833968 -1.823471 -3.194816 -14.9985896 7.5558261 5.8275707 3.8438374 31 2008 -5.5403471 16.135975 1.490483 -11.9296098 -0.1565009 -5.3838462 -41.6457557 52 2009 0.5592424 -9.877392 -2.265249 18.1407065 -6.5573074 7.1165498 31.8694477 52 2010 6.5874555 -12.034994 5.396005 2.0462839 -1.9947504 8.5822059 15.5109106 53 2011 -1.8592508 5.457331 -2.610780 7.4000064 -8.4198605 6.5606097 5.5265473 52 2012 1.3577592 -4.446587 10.857321 -6.3728705 -1.3956230 2.7533822 13.3348315 52 2013 2.8682182 0.001903 5.258924 2.1159160 -10.2449610 13.1131791 27.4838282 52 2014 2.7956770 -0.464612 9.760950 4.1025795 -16.1945947 18.9902718 14.1591160 52 2015 -5.2526746 -12.640805 -1.432772 15.5124005 3.8138509 -9.0665255 -0.4601453 52 2016 0.9563796 -3.687865 3.175545 -0.9451321 1.1251826 -0.1688031 12.4351274 53 2017 -0.1075664 -3.053412 3.580559 -4.5257790 2.3159196 -2.4234860 15.7688550 52 2018 7.5778822 7.720015 -2.911326 -4.6468325 -6.2840757 13.8619579 -5.3335580 52 2019 -4.3656134 12.403152 1.708816 -0.1104959 -10.4902669 6.1246535 26.6368120 52 2020 32.7979129 3.512916 -16.914186 -3.6606204 -7.2789299 40.0768428 16.2594299 52 2021 -16.3797834 -4.469089 1.589287 9.0885004 9.3764416 -25.7562249 26.9310148 53 2022 19.0281542 -2.801442 2.048544 -10.0539706 -9.2455571 28.2737113 -9.9403553 52 2023 -69.2724333 56.109386 -56.574120 51.6190241 46.4052027 -115.6776360 117.9336595 2 "],["activepassive-country-strategy.html", "8 Active/Passive Country Strategy 8.1 Overview 8.2 Active/Passive Indicator 8.3 Strategy Implementation", " 8 Active/Passive Country Strategy 8.1 Overview The Active/Passive Country Strategy is an equity-based rotation strategy that ranks different countries across a customized universe of developed and emerging markets. This approach uses the stated monthly allocations of equity funds with a cross-border mandate and EPFRs fund classification to create an indicator. In terms of twelve-month active over passive allocation, the top fifth of countries tend to outperform the bottom fifth by about 4% per year. This strategy works well everywhere but is slightly weaker within EAFE countries. 8.2 Active/Passive Indicator The Active/Passive Country Strategy developed by EPFR Global use the ratio of average allocation of active over passive funds. This section aims to give the reader an understanding of the methodology for constructing the variables used in the strategy. 8.2.1 Aggregations The first step is defining a subset of data to capture in calculating our signal. This strategy use the following portions of the EPFR dataset; Country allocation information at the fund level, using the EPFR Country Allocation database, for equity funds. Active/Passive tagging at the fund level, using EPFRs fund classifications. Active and passive equity funds which report their country allocations to EPFR have grown substantially over time. The figure below shows EPFRs coverage of these universes each year. Updated at the end of July each year Users looking for more specific detail can customize this aggregation even further using EPFRs fund-level or share class-level granularity. Some good examples would be ETF or Mutual funds, Institutional or Retail. Users can use these tags to different degrees in creating aggregated signals to backtest. Further detail about this is available in section 3. This can be achieved using fund-level flow files or reaching out to EPFRs quant team for customized aggregations. 8.2.2 Calculation To begin calculating the Active/Passive indicator, we start with our subset of active and passive cross-border equity funds. Then for each country, we compute equally-weighted average allocations to that country. These equal-weight averages are computed for both active and passive funds, shown below. \\[\\overline{\\text{Active Allocation}}_{c,t} = \\frac{\\sum^{N}_{i=m}{\\text{Allocation}_i}}{N}\\] Where: \\(\\overline{\\text{Active Allocation}}\\) = the equally-weighted average allocations to a country \\(c\\), across all Active funds \\(i\\), for month \\(t\\) \\[\\overline{\\text{Passive Allocation}}_{c,t} = \\frac{\\sum^{N}_{i=m}{\\text{Allocation}_i}}{N}\\] Where: \\(\\overline{\\text{Passive Allocation}}\\) = the equally-weighted average allocations to a country \\(c\\), across all Passive funds \\(i\\), for month \\(t\\) We then express the average allocation of active funds as percentage of that over passive funds to get our Active/Passive Indicator. \\[\\text{Active/Passive Indicatior}_{c,t} = \\frac{\\overline{\\text{Active Allocation}}_{c,t}}{\\overline{\\text{Passive Allocation}_{c,t}}}\\] Where: \\(\\text{Active/Passive Indicatior}\\) = percentage of a country \\(c\\), for month \\(t\\) 8.2.3 Aggregate Indicator File The users may create files for their desired active/passive country aggregations and granularity using the methodology described in the previous section. EPFR also provides a pre-calculated aggregation for its users for the Active/Passive Country Strategy. This file can be found on the FTP under the strategies folder. Please refer to the FTP Folder Structure section for the exact location of this file. This file contains daily flow data for 55 countries and is updated monthly at 5:00 PM est. with a T+23 day lag. For this demonstration, we use the pre-calculated file ActPasCtry-monthly.csv. Below shows a snippet of what this file contains. AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US JO MA PK AE QA VE SA KW 202101 -0.4842930 0.4150756 -0.4364259 0.2079088 0.2164195 0.3822949 -0.4345855 0.3425339 0.3713933 -0.7645557 -0.0540928 0.9539886 0.2757319 -0.4278781 0.5541037 0.0909923 -0.2803025 2.767058 -0.1510407 -0.3433280 0.6674873 3.328116 2.628547 -0.0363938 -0.4393090 0.2007475 1.149532 0.8659927 -0.0679904 -0.1090891 -0.1081186 0.5446757 -0.4139206 -0.0637146 -0.4395024 -0.0977562 -0.2154738 1.459513 0.6028887 -0.1625783 -0.0850953 0.2993357 -0.3347136 0.0678976 0.0816381 -0.6012166 0.1522989 4.260898 -0.0652011 -0.5481180 NA -0.3583941 -0.6086421 202102 -0.4350863 0.3437013 -0.4564398 0.2012196 0.2271260 0.4176506 -0.4433361 0.4055674 0.3605876 -0.7253863 -0.0884671 0.9025293 0.3636807 -0.3816140 0.4998816 0.1091549 -0.2184110 2.334667 -0.1790099 -0.4356930 0.6629788 3.273972 2.664995 -0.1004885 -0.4213593 0.2128838 1.064260 0.7892569 -0.0565443 -0.1359253 -0.1085918 0.5659047 -0.4096920 -0.0611213 -0.4280816 -0.0865703 -0.2150385 1.345948 0.5908555 -0.1428328 -0.0887208 0.2464188 -0.3310095 0.1152102 0.0720925 -0.6375701 0.3014671 2.982935 -0.1230785 -0.5242151 NA -0.3782509 -0.6031131 202103 -0.4255943 0.2742038 -0.4572834 0.1904780 0.1525359 0.4332971 -0.4508080 0.4050846 0.4107241 -0.7230766 -0.0135045 0.9677850 0.4530019 -0.3344260 0.4190218 0.1151809 -0.1756233 2.292438 -0.1696651 -0.4216619 0.8062801 2.859963 2.594327 -0.0862807 -0.4302785 0.0878286 1.131446 0.8051074 -0.0937792 -0.1511770 -0.1129582 0.2849661 -0.4389468 0.0031483 -0.4294388 -0.0748250 -0.2160058 2.142074 0.5608574 -0.1808645 -0.0514697 0.1358351 -0.3230478 0.1290534 0.0845130 -0.6424937 0.0755595 3.026991 -0.0756252 -0.4823253 NA -0.3690425 -0.6438767 202104 -0.4365594 0.4268730 -0.5016492 0.2323195 0.1431811 0.4113223 -0.4605046 0.4142126 0.5036503 -0.7420016 -0.0370911 1.0291538 0.4215180 -0.3505252 0.6453842 0.1262232 -0.1472360 2.406958 -0.0910387 -0.3002927 0.5926772 2.830483 2.296006 -0.1341816 -0.4335931 0.1132884 1.362067 0.6143279 -0.1302394 -0.1478898 -0.0997141 0.2629861 -0.4265210 0.0078945 -0.4137574 -0.0648903 -0.2009253 2.518739 0.6985939 -0.1878903 -0.0401241 0.1483820 -0.3108114 0.1636075 0.0196048 -0.5466501 0.0629529 3.265394 -0.0724601 -0.4646560 NA -0.3541722 -0.6597718 202105 -0.4521698 0.3997981 -0.4724740 0.2451374 0.2746615 0.4511646 -0.4562845 0.4395004 0.4710186 -0.7372286 0.0701906 0.9538463 0.5154195 -0.3129703 0.5477444 0.1815414 -0.1216805 2.156303 -0.1299565 -0.2991802 0.6229523 2.847972 2.742774 -0.1273252 -0.4386890 0.0494176 1.005678 0.7413030 -0.1449933 -0.1747906 -0.0982047 0.2579482 -0.4260605 0.0318637 -0.4291017 -0.1060280 -0.2046156 2.109419 0.7284733 -0.1972640 -0.0687191 0.1557049 -0.3393949 0.1441411 0.0275183 -0.5535626 0.1446233 3.200477 -0.1319364 -0.4250997 NA -0.3513467 -0.6290139 202106 -0.4642693 0.3779240 -0.4769717 0.2282459 0.2511288 0.4612354 -0.4601138 0.3990682 0.4508048 -0.7421453 0.0661083 0.9826715 0.5172153 -0.3535127 0.4638790 0.1574633 -0.1005668 2.099245 -0.1603285 -0.4285019 0.4382229 2.834365 2.888080 -0.1151151 -0.4671630 0.0172631 1.065461 0.6863870 -0.1461361 -0.1722770 -0.0878939 0.1873609 -0.4511446 0.0395791 -0.4217503 -0.0931180 -0.2033025 2.112372 0.7349517 -0.1998956 -0.0774779 0.0243351 -0.3237628 0.1571862 0.0419183 -0.5362790 0.2227714 3.254044 -0.1630057 -0.4108080 NA -0.3518554 -0.6180695 We will download this file from the ftp and store it in local folder EPFR/monthly using ftp.get(), more about this function can be referred to in section 2.4. file &lt;- &quot;/Strategies/monthly/ActPasCtry-monthly.csv&quot; # PATH TO .csv FILE fldr &lt;- &quot;C:\\\\EPFR\\\\monthly&quot; # LOCAL FOLDER ftp.get(file, fldr, &quot;filetransport.epfrglobal.com&quot;, w = &quot;username&quot;, h = &quot;password&quot;, &quot;ftp&quot;) # DOWNLOADS FILE FROM FTP TO LOCAL FOLDER, USING CREDENTIALS After downloading the csv file you will store its path as flow.file. A quick way to do this is shown below: flow.file &lt;- paste(fldr, ftp.file(file), sep = &quot;\\\\&quot;) # STORES FLOW FILE PATH, C:\\\\EPFR\\\\monthly\\\\ActPasCtry-monthly.csv 8.2.4 Return File The return file for this strategy should contain daily returns for each of the countries in the flow file, which the user can find using their own resources. EPFR also provides Fund Return data, that can be used as a proxy to returns. To create a return file using EPFR daily flow data, the following equation can be used: \\[\\text{Fund Return}_{c,t} = \\frac{\\sum^{N}_{i=m} \\text{Portfolio Change}_i}{\\sum^{N}_{i=m} \\text{Assets Start}_i}\\] Where: \\(\\text{Fund Return}\\) = the return value of country \\(c\\), across all funds \\(i\\), for day \\(t\\) Since our flow file uses monthly data we will also want to ensure that our returns are also indexed by month. If your return file is indexed daily, you can use the function mat.daily.to.monthly(, T) from library('EPFR'). For this demonstration, we will use a file that has calculated total return indices, which has been locally named OfclMsciTotRetIdx.csv and stored in the folder EPFR/returns. ret.file &lt;- &quot;C:\\\\EPFR\\\\returns\\\\OfclMsciTotRetIdx.csv&quot; For your reference a snippet of our return file looks like this AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US JO MA PK AE QA VE SA KW 202101 4582.897 466.273 6088.840 840.646 1554.905 781.309 7723.20 1146.467 448.237 367.901 457.235 759.005 12974.52 1244.982 142.624 568.123 527.728 182.752 294.349 2116.070 767.748 742.574 504.290 161.422 805.983 8498.045 2140.328 181.490 30492.68 15728.55 6132.36 3316.417 8794.039 39514.30 1299.575 7071.846 6668.621 5.890 451.366 842.893 22588.79 190.114 2949.511 73761.35 10420.14 124.893 379.874 445.200 574.623 1478.816 NA 1242.709 1141.067 202102 4703.834 436.815 6427.554 831.941 1577.277 822.165 7840.16 1148.912 450.021 368.629 465.840 778.142 13318.72 1267.459 139.136 594.252 543.120 202.877 317.781 2153.907 792.472 731.738 500.336 161.150 719.658 8850.219 2296.422 176.785 31342.84 15363.86 6352.79 3452.852 8697.774 39418.87 1283.623 7424.144 6802.822 6.310 454.302 890.941 23450.74 182.666 3103.679 77229.36 10687.87 122.216 369.339 419.339 560.481 1436.133 NA 1306.767 1101.829 202103 4737.184 455.419 6745.264 779.656 1478.088 840.821 7923.41 1151.512 487.714 361.423 443.965 818.748 13991.58 1297.723 117.153 591.511 576.078 195.403 344.005 2036.588 795.278 662.449 485.258 158.282 711.069 9423.215 2046.101 170.538 33184.58 15737.83 6527.60 3543.955 8778.910 39810.03 1256.728 7620.004 7080.625 6.580 493.454 932.981 24515.22 185.610 3119.581 77568.34 11085.83 122.399 368.058 425.759 588.372 1497.963 NA 1425.023 1163.428 202104 4970.888 484.776 7042.804 790.476 1474.909 833.036 7802.77 1185.606 501.575 373.835 443.200 817.983 14438.26 1284.898 118.829 637.087 574.960 210.012 312.131 1894.696 840.889 665.950 491.919 168.260 738.314 9770.974 1915.505 186.515 34519.80 16386.21 6813.74 3684.546 9384.972 42553.62 1341.023 8089.272 7320.304 7.056 497.722 937.585 25794.02 187.984 3289.175 79969.39 11686.17 125.849 381.845 413.993 597.512 1547.104 NA 1512.295 1225.607 202105 5132.288 531.468 7425.848 796.557 1493.695 905.264 7924.17 1190.652 542.250 366.771 467.916 896.022 14427.72 1277.419 121.055 629.471 616.096 206.928 300.822 1872.389 930.342 626.476 570.598 164.148 677.837 10086.706 2117.567 212.048 35801.63 17203.57 7087.10 4156.933 9785.044 44264.46 1392.125 8470.993 7544.946 7.359 509.878 997.828 26388.51 198.344 3474.676 81022.07 11737.39 159.125 396.513 438.115 651.339 1521.461 NA 1511.267 1251.473 202106 5062.434 559.755 7421.975 797.337 1402.042 898.949 7901.17 1207.171 532.305 352.545 477.477 933.607 14057.28 1234.519 116.589 633.470 567.705 206.714 295.208 1977.600 911.057 601.324 557.120 166.334 674.682 9882.020 1866.501 202.372 34999.11 17553.08 6917.04 3951.633 9589.243 45010.94 1392.801 8310.866 7413.258 7.117 505.364 966.963 26301.70 183.988 3285.174 79532.34 12060.22 162.333 400.106 397.467 654.172 1531.120 NA 1568.099 1274.233 8.3 Strategy Implementation The final step is implementing this strategy to create a signal. Lets begin by reading in the aggregate indicator and return files to our R studio work space. x &lt;- as.matrix(mat.read(flow.file)) # GET FLOW PERCENTAGE y &lt;- mat.read(ret.file) # GET TOTAL RETURN INDEX One of our first options is choosing the universe we want to use. EPFR has tested this signal within three different universes of countries ACWI (All Country World Index), EAFE (Europe, Australasia, and the Far East (EAFE), and EM (Emerging Markets). For this example, we choose ACWI, which includes 52 countries. idx &lt;- &quot;ACWI&quot; Then, to subset the flow file \\(x\\) to the selected universe \\(idx\\) the function Ctry.msci.members.rng() from the library('EPFR') is used. This function returns a list of two letter country codes from \\(idx\\) that are in \\(x\\). x &lt;- x[, is.element(dimnames(x)[[2]], Ctry.msci.members.rng(idx, dimnames(x)[[1]][1], dimnames(x)[[1]][dim(x)[1]]))] # SUBSET TO INDEX COUNTRIES We will also subset the return file \\(y\\) to use the same countries as \\(x\\) in the same order. y &lt;- y[, dimnames(x)[[2]]] # TOTAL RETURN INDEX * Note: subsetting can be also be done when creating the flow and return files 8.3.1 Compounding Flows Next, we set up a variable for our look-back period, which can also be called a flow window. This variable will be the window of time we use to create a trailing compounded daily percentage flow. The look-back period we choose for our demonstrations is 12 months. lookback &lt;- 12 # LOOKBACK (IN MONTHS) Again, using a function from the library('EPFR'), compound.flows() compounds the Active/Passive indicator over the trailing lookback period for each country. x &lt;- compound.flows(x, lookback, F) # COMPOUND FLOWS AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US JO MA PK AE QA VE SA KW 202101 -5.324274 4.618412 -5.092374 3.550998 3.710611 5.780842 -4.902931 5.218374 3.581737 -8.524057 0.1756174 10.22574 3.146937 -4.585810 4.353765 0.9631579 -2.909049 30.54763 -2.292310 -3.770869 7.112468 44.42309 28.71392 0.8785879 -5.155406 2.042540 21.61761 9.883278 -0.4788148 -0.9954073 -1.569757 7.539805 -5.488130 -0.0691028 -5.395321 -1.941282 -2.425626 12.74660 7.681255 -2.780360 -1.632613 0.8979165 -4.687012 3.134021 0.6975025 -6.905240 3.511643 52.12482 -0.4525544 -7.663844 NA -5.067487 4.7954495 202102 -5.301775 4.791500 -5.152899 3.446627 3.640853 5.696767 -5.002946 5.162491 3.714990 -8.577877 -0.0952407 10.41308 3.340120 -4.628522 4.537526 1.0877898 -2.903300 31.22777 -2.115454 -4.002307 7.689395 43.79622 29.60917 0.7076014 -5.078917 2.104865 20.45756 10.054948 -0.4113040 -1.0488106 -1.536551 7.182164 -5.492085 -0.1909121 -5.386812 -1.837459 -2.422147 13.69089 7.576768 -2.680597 -1.569590 1.3851853 -4.638047 2.931487 0.6656380 -6.958614 3.817582 50.57320 -0.6083359 -7.387037 NA -5.135942 3.3733779 202103 -5.293586 4.740356 -5.200808 3.328538 3.487460 5.617858 -5.091897 5.120771 3.780390 -8.617658 -0.2229172 10.63765 3.562909 -4.620731 4.680264 1.1724617 -2.884560 31.51889 -2.011287 -4.174181 8.333045 42.52927 30.09313 0.6589117 -5.014019 2.085215 19.28077 10.088073 -0.4179752 -1.1576125 -1.499559 6.709607 -5.483945 -0.2681228 -5.354381 -1.708028 -2.428281 15.23447 7.409430 -2.607770 -1.433803 1.6196834 -4.565882 2.710311 0.6831070 -7.020745 3.766191 49.25205 -0.7146122 -7.146882 NA -5.082372 2.4136815 202104 -5.288616 4.741506 -5.307119 3.258392 3.285461 5.502861 -5.169106 5.133766 4.035444 -8.678349 -0.3431953 10.97717 3.774897 -4.593861 5.011482 1.2904659 -2.827897 31.62728 -1.884344 -4.289814 8.658370 41.58201 30.60624 0.4407981 -5.021358 2.058322 18.26097 10.138973 -0.4996576 -1.2408343 -1.453505 6.373061 -5.482483 -0.3351382 -5.302580 -1.575807 -2.426042 17.14187 7.343375 -2.550181 -1.292984 1.8548794 -4.463767 2.570127 0.6251597 -6.976601 3.576364 48.51730 -0.7922292 -6.884850 NA -5.002885 1.3736189 202105 -5.309726 4.712259 -5.358810 3.171426 3.157580 5.439898 -5.214142 5.083554 4.248414 -8.730394 -0.3686757 11.12142 4.026156 -4.555615 5.163361 1.4329452 -2.738973 31.11205 -1.903853 -4.312193 8.596306 40.58358 30.91997 0.2270319 -5.070068 1.924983 16.82496 9.978448 -0.6013739 -1.3337259 -1.417727 5.883580 -5.437535 -0.3162205 -5.294615 -1.497809 -2.436179 18.33991 7.494244 -2.496243 -1.173380 2.0589263 -4.379701 2.371795 0.5965000 -6.885920 3.179881 47.35884 -1.0022416 -6.627341 NA -4.850384 0.0540692 202106 -5.370444 4.680533 -5.412713 3.067188 3.070403 5.375858 -5.281356 4.989664 4.467832 -8.772728 -0.3334724 11.24332 4.287903 -4.533218 5.193627 1.5146404 -2.635804 30.16851 -1.917865 -4.454875 8.283011 39.37764 31.20104 -0.0310268 -5.136764 1.751171 15.70919 9.672271 -0.7290373 -1.4239405 -1.362873 5.585292 -5.415361 -0.2796918 -5.263369 -1.398430 -2.440895 19.32232 7.742218 -2.419939 -1.100157 2.0786378 -4.265233 2.220366 0.5850252 -6.804897 2.940564 46.25202 -1.1882859 -6.431422 NA -4.745270 -1.4303639 8.3.2 Ranking Countries Next, we sort the countries in each universe into five equal bins based on the compounded Active/Passive indicator for the selected holding period. To do this, we will use the function from library('EPFR'), called bbk(). This function will output a standardized backtest result. The bbk() function requires our compounded Active/Passive indicator, total return index, and our selected universe. Please refer to the library documentation for the complete list of parameters of this function. The first parameter we add is the number of bins we want to use. For our case, we want to use 5 because our strategy is to go long the top fifth and short the bottom fifth. nBin &lt;- 5 # NUMBER OF BINS Since EPFR data is published with T+23 day lag and is released around 5:00 pm EST, we account for a T+1 month delay in our model since that is when one can trade on the information. delay &lt;- 1 # DELAY IN KNOWING DATA (IN MONTHS) It is also important to note that this model can be re-balanced monthly, quarterly, semi-annually or as desired. The day of the week the rebalancing occurs is at the discretion of the user, so for this example we will set the day of the week to trade as N/A. doW &lt;- NULL # DAY OF THE WEEK YOU WILL TRADE ON (5 = FRIDAYS) Additionally, we also evaluate the returns for different holding periods. The user can input return horizons that they are interested in here. For this example we define a return horizon for monthly, quarterly, semi-annually, and annually. hz &lt;- c(1, 3, 6, 12) # RETURN HORIZON (IN MONTHS) Now that we have defined all of our inputs, to rank the countries into quintiles by their 12 month cumulative indicator, we call function bbk() for a 1-month holding period. z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, idx) 8.3.3 Model 12 month cumulative indicator ranked into quintiles (computed only where forward returns are available) z[[&quot;bins&quot;]] AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US JO MA PK AE QA VE SA KW 202112 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 1 3 NA NA 5 202111 5 2 5 2 2 2 5 2 2 5 3 1 1 4 1 3 4 NA 4 5 1 1 1 3 5 3 1 1 3 4 3 2 5 3 5 3 4 1 1 4 3 2 4 2 3 NA NA NA 4 5 NA 4 5 202110 5 2 5 2 2 2 5 2 2 5 3 1 2 4 2 NA 4 1 4 5 1 1 1 3 5 3 1 1 3 4 3 2 5 3 5 3 4 1 1 4 3 3 4 NA 3 NA NA 1 4 5 NA 4 5 202109 5 2 5 2 2 2 5 2 2 5 3 1 2 4 2 3 4 1 4 5 1 1 1 3 5 3 1 1 3 4 4 2 5 3 5 3 4 1 1 4 3 3 4 2 3 NA NA 1 4 5 NA 5 4 202108 5 2 5 2 2 2 5 2 2 5 3 1 2 4 2 3 4 1 4 5 1 1 1 3 5 3 1 1 3 4 4 2 5 3 5 3 4 1 1 4 3 3 4 2 3 NA NA 1 4 5 NA 5 4 202107 5 2 5 2 2 2 5 2 2 5 3 1 2 5 2 3 4 1 4 4 1 1 1 3 5 3 1 1 3 4 4 2 5 3 5 4 4 1 1 4 3 3 4 2 3 NA NA 1 3 5 NA 5 4 Quintile Returns over the equal-weight universe z[[&quot;rets&quot;]] Q1 Q2 Q3 Q4 Q5 TxB uRet 202112 -1.9199910 NA 2.4995631 NA -0.5795721 -1.3404189 5.384292 202111 -0.3433932 -0.1109300 0.7141881 -0.1477184 -0.1380114 -0.2053819 3.961149 202110 -2.5738008 -0.2382160 0.7507335 1.6790032 -0.1714095 -2.4023913 -5.046338 202109 2.6990409 -2.7111285 1.6871536 -1.0951046 -0.5799614 3.2790023 3.263647 202108 -0.9195644 -0.8498737 0.0028237 -0.3532431 2.1198576 -3.0394220 -3.472902 202107 2.7762268 -0.8821888 0.0278446 -1.5562480 -0.3656347 3.1418616 4.242061 8.3.4 Performance Go long the top basket and short the bottom basket. Performance over all holding periods fcn &lt;- function(retW) {as.matrix(bbk(x, y, 1, retW, nBin, doW, T, 0, delay, idx)$summ)} # DEFINE SUMMARY FUNCTION sapply(split(hz, hz), fcn, simplify = &quot;array&quot;) # WRITE SUMMARIES Q1 Q2 Q3 Q4 Q5 TxB uRet Monthly AnnMn 2.927630e-01 1.549442 2.031152 3.938969e-01 -3.386592 3.679355 12.039342 AnnSd 6.739109e+00 6.901825 6.353694 6.052916e+00 5.101378 9.530482 18.704238 Sharpe 4.344239e+00 22.449742 31.968055 6.507556e+00 -66.385828 38.606184 64.366923 HitRate 2.586207e+00 1.754386 5.172414 -4.385965e-01 -9.051724 5.603448 10.515021 Beta NA NA NA NA NA NA 1.000000 Alpha NA NA NA NA NA NA 0.000000 DrawDn -3.139256e+01 -16.829122 -34.914601 -1.565515e+01 -72.961877 -23.196903 -82.136274 DDnBeg 2.003080e+05 201504.000000 200806.000000 2.006120e+05 200303.000000 201708.000000 200710.000000 DDnN 3.100000e+01 80.000000 72.000000 5.400000e+01 178.000000 38.000000 16.000000 AnnTo 6.143062e+01 110.815138 118.197425 9.494905e+01 53.690987 115.121602 0.000000 Monthly2 AnnMn 2.810435e-01 3.081303 1.668529 -4.044257e-01 -4.487410 4.768453 12.704334 AnnSd 1.052954e+01 7.078335 6.968804 6.167460e+00 6.491177 14.426664 24.153229 Sharpe 7.147848e+00 43.087477 23.632038 -8.044762e+00 -70.074600 38.943250 52.861741 HitRate 7.870370e+00 10.063353 6.505848 -5.190059e+00 -17.860624 19.249513 20.199805 Beta NA NA NA NA NA NA 1.000000 Alpha NA NA NA NA NA NA 0.000000 DrawDn -3.553144e+01 -9.008511 -22.077384 -2.564469e+01 -84.727988 -35.404641 -41.793435 DDnBeg 2.011232e+05 201081.500000 200789.833333 2.003898e+05 200298.166667 201489.833333 200748.166667 DDnN 3.916667e+00 3.666667 6.250000 8.000000e+00 17.250000 3.333333 1.250000 AnnTo 3.737113e+01 57.253966 57.818862 4.583719e+01 28.308764 65.679892 0.000000 Quarterly AnnMn -1.656480e-01 1.658726 2.509500 -1.871011e-01 -3.668506 3.502858 12.521687 AnnSd 7.434168e+00 6.886909 6.226218 6.281941e+00 4.981038 10.197930 21.107417 Sharpe -2.177051e+00 24.144874 41.050528 -3.178186e+00 -73.668589 34.438700 59.371539 HitRate 6.100479e+00 2.444444 5.228981 -2.415205e+00 -12.183869 10.002278 18.398268 Beta NA NA NA NA NA NA 1.000000 Alpha NA NA NA NA NA NA 0.000000 DrawDn -3.473509e+01 -19.069372 -21.094749 -2.202408e+01 -74.640173 -26.709176 -68.153694 DDnBeg 2.003040e+05 200973.666667 200807.000000 2.005110e+05 200302.000000 200873.666667 200711.000000 DDnN 1.433333e+01 29.000000 22.000000 1.733333e+01 60.000000 7.000000 5.000000 AnnTo 5.462241e+01 93.099415 98.547378 8.033626e+01 45.420875 100.043290 0.000000 Semi-Annual AnnMn -6.033257e-01 2.274845 2.663184 -4.510208e-01 -3.714226 3.110901 12.781116 AnnSd 9.166643e+00 7.289851 6.697572 5.978223e+00 5.931860 13.306176 22.924937 Sharpe -6.294268e+00 31.528604 40.059269 -7.459301e+00 -63.102262 24.258035 55.839469 HitRate 4.634898e+00 2.868658 9.447605 2.489331e-01 -18.278805 13.857278 21.929825 Beta NA NA NA NA NA NA 1.000000 Alpha NA NA NA NA NA NA 0.000000 DrawDn -3.548418e+01 -19.979091 -21.444826 -2.594026e+01 -79.243906 -39.892678 -55.910180 DDnBeg 2.009712e+05 201039.833333 200740.833333 2.004055e+05 200288.833333 201539.833333 200725.166667 DDnN 9.333333e+00 12.833333 11.000000 9.666667e+00 29.500000 6.666667 2.333333 AnnTo 4.572125e+01 77.402534 76.098928 6.463938e+01 37.197856 82.919103 0.000000 Annualized mean one-week returns bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, idx)$annSumm # DISPLAY CALENDAR-YEAR RETURNS Q1 Q2 Q3 Q4 Q5 TxB uRet nPrds 2002 NaN NaN NaN NaN NaN NaN -10.232261 0 2003 -5.7336080 6.6432813 15.7552920 7.1183510 -7.5512892 1.8176812 47.297335 12 2004 -2.8276111 6.8501635 -2.7842253 -7.3221705 -3.1871014 0.3594902 30.332868 12 2005 -17.8323370 -0.2933890 11.5496779 13.9887163 -4.5052644 -13.3270726 24.363447 12 2006 -0.5373572 6.9560646 3.4986904 3.3724498 -6.5140164 5.9766592 30.534940 12 2007 2.2139592 15.5768922 3.5266579 -13.9844116 -8.4681146 10.6820737 26.002287 12 2008 4.3995545 -7.8096388 -6.7588604 8.6624146 -3.0564230 7.4559775 -60.870526 12 2009 13.0962797 11.4804440 0.9238067 -7.1070278 -12.9552971 26.0515768 48.213066 12 2010 6.3667967 3.2805295 -1.7574563 -1.4883848 -6.6971133 13.0639100 15.660204 12 2011 4.1136122 -3.9150420 -4.9292317 0.4469094 4.2837522 -0.1701400 -16.092145 12 2012 6.0357584 1.4753573 -1.2220781 0.2627206 -6.5517583 12.5875166 20.389757 12 2013 -5.0596508 0.4893753 -2.4982317 11.6094980 -4.5555497 -0.5041011 8.499548 12 2014 3.5947168 -0.7388354 -0.1801168 -4.9310112 1.6178889 1.9768279 -3.244442 12 2015 1.5711513 -0.4892560 -1.0602977 6.8780313 -6.7818179 8.3529692 -9.930792 12 2016 1.8784640 -3.4021908 3.3870754 -3.8244494 1.5847591 0.2937048 8.353035 12 2017 0.7915899 1.4200123 5.3706394 -0.8754904 -6.1454965 6.9370864 23.339705 12 2018 -6.7846783 3.2832508 -0.2587327 -2.2045636 5.8448698 -12.6295481 -12.570918 12 2019 4.2533975 -3.5242204 0.4932785 0.6608745 -1.3975131 5.6509106 17.173365 12 2020 -4.9377660 -0.2053033 7.7954686 -2.4464427 0.6462525 -5.5840186 8.728241 12 2021 1.2587311 -7.6380984 8.0348093 -1.3319720 -0.9030244 2.1617555 9.425889 12 2022 -0.6027533 NaN 1.1483327 NaN -0.5455794 -0.0571738 57.035163 4 2023 NaN NaN NaN NaN NaN NaN NaN 0 output: html_document "],["flow-percentage-dm-rates-strategy.html", "9 Flow-Percentage DM Rates Strategy 9.1 Overview 9.2 Daily Percentage Flow 9.3 Strategy Implementation", " 9 Flow-Percentage DM Rates Strategy 9.1 Overview The Flow-Percentage DM Rates Strategy is a bond based rotation strategy, which ranks different G10 10 Year Rates, based on a percentage flow indicator. This approach uses the stated allocations of bond funds with a cross-border focus and calculates percentage flow into G10 countries. In terms of twenty-day percentage flows, the top fifth of G10 10 year rates outperform the bottom fifth by around 22pbs per year. G10 Countries used in analysis are: 1. United States 2. Europe 3. United Kingdom 4. Japan 5. Australia 6. New Zealand 7. Canada 8. Switzerland 9. Norway 10. Sweden 9.2 Daily Percentage Flow The Flow-Percentage DM Rates Strategy developed by EPFR Global is based on percentage flow into countries via cross-border bond funds. In this section, the reader will gain an understanding of the aggregations which can be used to create a signal as well as the methodology behind daily percentage flow calculations. 9.2.1 Aggregations The first step is defining a subset of data to capture in calculating our signal. This strategy requires; Bond funds with a cross-boarder focus. These are essentially any fund that has a mandate spanning more than one country. The vast majority of these will be global and regional funds. Funds must report both daily flows and country allocations, since these values are needed to calculate Daily Percentage Flow. Cross-border bond funds, which report their country allocations and their fund flows, are a subset of those that only report their fund flows to EPFR. The figure below shows EPFRs coverage of this universe over time compared to our total coverage. Updated at the end of July each year Users looking for more specific detail can customize this aggregation even further using EPFRs fund-level or share class-level granularity. Some good examples would be Active/Passive, ETF or Mutual funds, Institutional or Retail. Users can use these tags to different degrees in creating aggregated signals to backtest. Further detail about this is available in section 3. This can be achieved using fund-level flow files or reaching out to EPFRs quant team for customized aggregations. 9.2.2 Calculation To begin calculating the Daily Percentage flow, we start with our subset of cross-border bond funds. To calculate the funds impact on a country, we scale a funds flow by multiplying it against its stated country allocation, which is available in EPFRs Country Allocation Database, on that day. EPFR releases country allocations of all funds on the \\(23^{\\text{rd}}\\) of each month (or the next available business day) at a monthly frequency. Hence, our calculation assumes constant country allocation between two consecutive release dates within the month. We then apply the same procedure to all funds with a fund flow and country allocation information and then sum the flows for each country across all funds. \\[\\text{Total Impact}_{c,t} = \\sum^{N}_{i=m}{\\text{Flow}_i \\times \\text{Allocation}_i}\\] Where: \\(\\text{Total Impact}\\) = the impact on a country \\(c\\), across all funds \\(i\\), for day \\(t\\) Additionally, we repeat the process across the same funds Assets held under Management (AuM), to get the total AuM held in a country. \\[\\text{Total AuM}_{c,t} = \\sum^{N}_{i=m}{\\text{AuM}_i \\times \\text{Allocation}_i}\\] Where: \\(\\text{Total AuM}\\) = the assets held in a country \\(c\\), across all funds \\(i\\), for day \\(t\\) Finally, to find the daily percentage flow for a country, we divide the Total Impact by the Total AuM. Then we repeat this across all different countries for the entire history. \\[\\text{Percentage Flow}_{c,t} = \\frac{\\text{Total Impact}_{c,t}}{\\text{Total AuM}_{c,t}}\\] Where: \\(\\text{Percentage Flow}\\) = the scaled flow as a percentage into a country \\(c\\), across all funds \\(i\\), for day \\(t\\) 9.2.3 Flow File The users may create flow percentages for their desired country aggregations and granularity using the methodology described in the previous section. EPFR also provides a pre-calculated aggregation for its users for the Flow-Percentage DM Strategy. This file can be found on the FTP under the strategies folder. Please refer to the FTP Folder Structure section for the exact location of this file. This file contains daily cross-border bond fund flow data for 52 countries and is updated daily at 5:00 PM est. with a T+1 day lag. For this demonstration, we use the pre-calculated file FloPctCtry-B-daily.csv. Below shows a snippet of what this file contains. AU CA CH DE GB JP NO NZ SE US 20211201 -0.0702037 -0.1517370 0.0412217 -0.1039666 -0.0690626 -0.0196761 0.0904902 -0.0380487 0.0109521 -0.2316635 20211202 -0.0437531 -0.0256045 -0.0280930 -0.0947557 -0.0476540 0.0039176 -0.0821115 -0.1025271 -0.0768186 -0.0411930 20211203 -0.0331431 -0.0190671 0.0374890 0.0757901 0.0020394 -0.0779734 -0.0202444 0.0439676 0.0189424 -0.0993569 20211206 0.0065687 -0.0096176 -0.1192197 -0.0409239 -0.0593434 0.0559671 -0.0026706 -0.0349522 -0.0297259 -0.1388328 20211207 -0.0332742 -0.0127930 -0.0582156 -0.0507444 -0.0358957 0.0025426 -0.0595177 -0.0538249 -0.0712788 -0.0574316 20211208 -0.0631900 -0.2370217 -0.0257433 -0.0639782 -0.0798232 -0.0841055 -0.2226143 -0.0387053 0.0307441 -0.1215100 We will download this file from the ftp and store it in local folder EPFR/daily using ftp.get(), more about this function can be referred to in section 2.4. file &lt;- &quot;/Strategies/daily/FloPctCtry-B-daily.csv&quot; # PATH TO .csv FILE fldr &lt;- &quot;C:\\\\EPFR\\\\daily&quot; # LOCAL FOLDER ftp.get(file, fldr, &quot;filetransport.epfrglobal.com&quot;, w = &quot;username&quot;, h = &quot;password&quot;, &quot;ftp&quot;) # DOWNLOADS FILE FROM FTP TO LOCAL FOLDER, USING CREDENTIALS After downloading the csv file you will store its path as flow.file. A quick way to do this is shown below: flow.file &lt;- paste(fldr, ftp.file(file), sep = &quot;\\\\&quot;) # STORES FLOW FILE PATH, C:\\\\EPFR\\\\daily\\\\FloPctCtry-B-daily.csv 9.2.4 Return File The return file for this strategy should contain g10 10 year rates for each of the countries in the flow file, which the user can find with their own resources. For this demonstration, we will use the file g10rates.csv, which is locally stored in the folder EPFR/returns. ret.file &lt;- &quot;C:\\\\EPFR\\\\returns\\\\g10rates.csv&quot; For your reference a snippet of our return file looks like this AU CA CH DE GB JP NO NZ SE US 20211201 1.7300 1.494 -0.272 -0.345 0.820 0.065 1.488 2.458 0.147 1.405 20211202 1.6800 1.505 -0.306 -0.372 0.811 0.063 1.422 2.423 0.086 1.446 20211203 1.6100 1.437 -0.313 -0.391 0.747 0.053 1.471 2.390 0.084 1.345 20211206 1.5825 1.523 -0.329 -0.391 0.738 0.045 1.440 2.347 0.071 1.436 20211207 1.6475 1.579 -0.318 -0.377 0.730 0.056 1.460 2.418 0.064 1.476 20211208 1.6200 1.591 -0.287 -0.315 0.775 0.050 1.517 2.430 0.096 1.523 9.3 Strategy Implementation The final step is implementing this strategy to create a signal. Lets begin by reading in the flow and return files to our R studio work space. x &lt;- read.csv(flow.file, row.names = 1) # GET FLOW PERCENTAGE y &lt;- read.csv(ret.file, row.names = 1) # GET RETURN We must now make sure our files only use G10 countries and have the same columns. We will also subset the flow file \\(x\\) to use the same countries as \\(y\\). x &lt;- x[, is.element(dimnames(x)[[2]],dimnames(y)[[2]])] # SUBSET TO G10 COUNTRIES y &lt;- y[,dimnames(x)[[2]]] * Note: subsetting can be also be done when creating the flow and return files 9.3.1 Compounding Flows Next, we set up a variable for our look-back period, which can also be called a flow window. This variable will be the window of time we use to create a trailing compounded daily percentage flow. The look-back period we choose for our demonstrations is 20 days. lookback &lt;- 20 # FLOW WINDOW (IN WEEKDAYS) - 20 day look back period Again, using a function from the library('EPFR'), compound.flows() compounds the daily percentage flow over the trailing lookback period for each country. x &lt;- compound.flows(x, lookback, F) # COMPOUND FLOWS AU CA CH DE GB JP NO NZ SE US 20211201 1.1419268 0.0463071 0.1208617 0.6278711 0.7515992 2.359001 -1.121024 0.4290764 -1.422469 -0.2499262 20211202 1.0309469 -0.0026698 0.0108028 0.4624345 0.6744650 2.316321 -1.208443 0.2731641 -1.536558 -0.2913130 20211203 0.6988319 -0.0771034 -0.0083922 0.4428733 0.4648606 1.645994 -1.226233 0.1628941 -1.591578 -0.4638621 20211206 0.6842325 -0.0994026 -0.2161870 0.3346122 0.2547644 1.671213 -1.105685 0.2527242 -1.721801 -0.6397647 20211207 0.6369026 -0.1081681 -0.2747782 0.2231534 0.1763863 1.645625 -1.116612 0.2140448 -1.809225 -0.6680148 20211208 0.5624733 -0.3114328 -0.3363869 0.1494819 0.0718187 1.560562 -1.321180 0.2096136 -1.746974 -0.7517564 9.3.2 Ranking Countries Next, we sort the countries in each universe into five equal bins based on their 20-day Percentage Flow Compounded value for the selected holding period. To do this, we will use the function from library('EPFR'), called bbk(). This function will output a standardized backtest result. The bbk() function requires our compounded daily percentage flow file, a return file, and our selected universe. Please refer to the library documentation for the complete list of parameters of this function. The first parameter we add is the number of bins we want to use. For our case, we want to use 5 because our strategy is to go long the top fifth and short the bottom fifth. nBin &lt;- 5 # NUMBER OF BINS Since EPFR data is published with T+1 day lag and is released around 5:00 pm EST, we account for a T+2 day delay in our model since that is when one can trade on the information. Users interested in more timely signals can also use the T+2 Open Prices for backtesting purposes. EPFR also offers a Premium Daily offering, an earlier release of the end-of-day data covering a significant subset of fund-level flow information. delay &lt;- 2 # DELAY IN KNOWING DATA (IN WEEKDAYS) - data takes time to have It is also important to note that this model will need to be re-balanced weekly. The day of the week the rebalancing occurs is at the discretion of the user. For this example we will set the day of the week to trade as Friday. doW &lt;- 5 # DAY OF THE WEEK YOU WILL TRADE ON (5 = FRIDAYS) Additionally, we also evaluate the returns for different holding periods. The user can input return horizons that they are interested in here. For this example we define a return horizon for weekly, fortnightly, monthly, bi-monthly, quarterly, and semi-annually. hz &lt;- c(5, 10, 20, 45, 65, 130) # RETURN HORIZON (IN WEEKDAYS) - holding periods Now that we have defined all of our inputs, to rank the countries into quintiles by their 20-day percentage flow, we call function bbk() for a 1-week holding period. z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay) 9.3.3 Model Twenty-day flow percentage ranked into quintiles (computed only where forward returns are available) z[[&quot;bins&quot;]] AU CA CH DE GB JP NO NZ SE US 20211231 1 5 NA NA 2 5 3 3 1 4 20211224 1 3 NA NA 3 2 5 4 1 5 20211217 1 4 NA NA 3 1 5 3 2 5 20211210 1 3 NA NA 3 1 5 2 5 4 20211203 1 3 NA NA 2 1 5 3 5 4 Quintile Returns over the equal-weight universe z[[&quot;rets&quot;]] Q1 Q2 Q3 Q4 Q5 TxB uRet 20211231 7.751563 -9.1964028 -24.6293314 -13.847965 28.399952 -20.648388 30.5146314 20211224 9.439429 0.3308313 -4.4524211 -3.718703 -3.293072 12.732501 5.6393179 20211217 -2.694524 58.0033829 -9.0688204 -10.110764 -12.182965 9.488441 20.7844958 20211210 -7.544357 -6.2147970 -3.4743656 -5.259606 16.755924 -24.300282 -0.1949393 20211203 2.025293 -2.3845063 0.9272014 8.827628 -6.174055 8.199348 1.5812935 9.3.4 Performance Performance over all holding periods fcn &lt;- function(retW) {as.matrix(bbk(x, y, 1, retW, nBin, doW, T, 0, delay)$summ)} # DEFINE SUMMARY FUNCTION sapply(split(hz, hz), fcn, simplify = &quot;array&quot;) # WRITE SUMMARIES Q1 Q2 Q3 Q4 Q5 TxB uRet Bi-Monthly AnnMn -Inf -Inf -Inf -Inf -Inf 6.626343e+00 Inf AnnSd NaN NaN NaN NaN NaN 3.156680e+02 NaN Sharpe NaN NaN NaN NaN NaN 9.881379e-01 NaN HitRate -4.952040e+00 -5.897915e-01 5.617803e-01 -4.652972e-01 7.348273e+00 -7.060661e+00 -7.799564e+00 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -Inf -Inf -Inf -Inf -Inf -8.402761e+02 NaN DDnBeg 2.015857e+07 2.015404e+07 2.016282e+07 2.014165e+07 2.017375e+07 2.015974e+07 2.013193e+07 DDnN 2.477778e+01 2.933333e+01 2.233333e+01 3.788889e+01 1.033333e+01 2.477778e+01 2.811111e+01 AnnTo 3.759961e+02 4.418076e+02 4.493962e+02 4.478362e+02 3.714690e+02 7.474652e+02 0.000000e+00 Fortnightly AnnMn -Inf -Inf -Inf -1.004761e+01 -Inf 5.392635e+01 Inf AnnSd NaN NaN NaN 1.627402e+02 NaN 1.887545e+02 NaN Sharpe NaN NaN NaN -6.493383e+00 NaN 3.021019e+01 NaN HitRate -2.144548e+00 1.493845e+00 -2.401583e+00 -1.041667e+00 1.368709e+00 -2.083333e+00 -4.155844e+00 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -Inf -Inf -Inf -5.520032e+02 -Inf -4.710789e+02 NaN DDnBeg 2.019532e+07 2.016062e+07 2.018082e+07 2.017072e+07 2.017547e+07 2.017031e+07 2.012586e+07 DDnN 2.100000e+01 8.500000e+01 6.900000e+01 1.185000e+02 6.450000e+01 5.900000e+01 1.220000e+02 AnnTo 1.092338e+03 1.656234e+03 1.740649e+03 1.668052e+03 1.087273e+03 2.179610e+03 0.000000e+00 Monthly AnnMn -Inf -Inf -Inf -3.026849e+01 -Inf 9.510590e+01 Inf AnnSd NaN NaN NaN 2.294993e+02 NaN 3.740656e+02 NaN Sharpe NaN NaN NaN -1.203019e+01 NaN 2.672336e+01 NaN HitRate -1.761562e+00 1.240729e+00 -2.670293e+00 -1.048484e+00 4.111447e+00 -4.443445e+00 -6.770833e+00 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -Inf -Inf -Inf -8.636360e+02 -Inf -5.175434e+02 NaN DDnBeg 2.019062e+07 2.013067e+07 2.015567e+07 2.012056e+07 2.016292e+07 2.015593e+07 2.009824e+07 DDnN 1.925000e+01 9.075000e+01 7.450000e+01 1.047500e+02 6.075000e+01 5.025000e+01 9.075000e+01 AnnTo 7.371745e+02 9.529948e+02 9.902344e+02 9.521484e+02 7.634115e+02 1.500586e+03 0.000000e+00 Quarterly AnnMn -Inf -Inf -Inf -Inf -Inf 7.087872e+00 Inf AnnSd NaN NaN NaN NaN NaN 2.219686e+02 NaN Sharpe NaN NaN NaN NaN NaN 7.541134e+00 NaN HitRate -6.968484e+00 -2.068421e+00 -1.454390e+00 5.125602e-01 7.919345e+00 -8.506284e+00 -8.762307e+00 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -Inf -Inf -Inf -Inf -Inf -5.350593e+02 NaN DDnBeg 2.014379e+07 2.014763e+07 2.016607e+07 2.014900e+07 2.017448e+07 2.014468e+07 2.008767e+07 DDnN 1.969231e+01 2.538462e+01 1.615385e+01 2.384615e+01 7.846154e+00 2.307692e+01 3.038462e+01 AnnTo 2.685609e+02 3.058940e+02 3.114778e+02 3.122735e+02 2.611248e+02 5.296857e+02 0.000000e+00 Semi-Annual AnnMn -Inf -Inf -Inf -Inf -Inf 2.626694e+01 Inf AnnSd NaN NaN NaN NaN NaN 1.864622e+02 NaN Sharpe NaN NaN NaN NaN NaN 1.692440e+01 NaN HitRate -6.593407e+00 1.979917e+00 -2.894089e+00 -2.254642e+00 4.139826e+00 -7.787040e+00 -9.141720e+00 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -Inf -Inf -Inf -Inf -Inf -3.061660e+02 NaN DDnBeg 2.013220e+07 2.016384e+07 2.015594e+07 2.014629e+07 2.015525e+07 2.012920e+07 2.009272e+07 DDnN 1.211538e+01 8.500000e+00 1.061538e+01 1.173077e+01 1.003846e+01 1.242308e+01 1.688462e+01 AnnTo 1.486406e+02 1.570576e+02 1.601080e+02 1.637221e+02 1.440318e+02 2.926724e+02 0.000000e+00 Weekly AnnMn -Inf -Inf -Inf -Inf -Inf 7.358127e+01 Inf AnnSd NaN NaN NaN NaN NaN 1.939184e+02 NaN Sharpe NaN NaN NaN NaN NaN 3.794446e+01 NaN HitRate 1.298701e-01 1.235371e+00 -3.636364e+00 4.551365e-01 1.168831e+00 -1.171875e+00 -5.771725e+00 Beta NaN NaN NaN NaN NaN NaN 1.000000e+00 Alpha NaN NaN NaN NaN NaN NaN 0.000000e+00 DrawDn NaN -Inf NaN -Inf NaN -2.886974e+02 NaN DDnBeg 2.020011e+07 2.020052e+07 2.020011e+07 2.020011e+07 2.020011e+07 2.018101e+07 2.007071e+07 DDnN 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 9.600000e+01 3.950000e+02 AnnTo 1.537743e+03 2.704540e+03 3.021530e+03 2.620233e+03 1.527626e+03 3.065370e+03 0.000000e+00 Annualized mean one-week returns bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, sprds = T)$annSumm # DISPLAY CALENDAR-YEAR RETURNS Q1 Q2 Q3 Q4 Q5 TxB uRet nPrds 2007 0.1625349 0.4996383 -0.3870513 -0.4919479 0.1499831 0.0125517 -0.4653037 29 2008 0.1918144 -0.0184856 -0.8614856 0.1409144 0.5613144 -0.3695000 -1.3718144 52 2009 0.1401778 0.1771778 0.0966778 0.2764278 -0.6690722 0.8092500 0.7055722 52 2010 -0.0416992 -0.0214388 0.1716480 0.0192782 -0.0763332 0.0346340 -0.2631876 53 2011 -0.1948700 -0.0022700 -0.5873700 0.2538300 0.4953800 -0.6902500 -1.3339800 52 2012 0.2783133 -0.3524867 -0.1900367 -0.0988867 0.3250633 -0.0467500 -0.2274133 52 2013 -0.2597867 0.0164133 0.1279633 -0.1336367 0.2443633 -0.5041500 0.8895367 52 2014 -0.1563333 0.3199667 -0.4349333 -0.0438833 0.2466667 -0.4030000 -1.0756667 52 2015 -0.0590556 0.0320944 0.1243944 -0.0875056 0.0142944 -0.0733500 -0.1212444 52 2016 -0.0901224 -0.0204621 0.2361040 -0.1838205 0.0197644 -0.1098868 -0.1517266 53 2017 -0.3763222 -0.1743222 0.1176778 0.1026778 0.3611778 -0.7375000 -0.0056778 52 2018 -0.5571722 0.0475778 0.1909778 0.2819278 0.1048278 -0.6620000 -0.0833278 52 2019 -0.1360744 -0.1326744 0.0849256 0.0133756 0.1702256 -0.3063000 -0.4894756 52 2020 0.1081800 0.0549800 -0.0210700 -0.4761200 0.3340300 -0.2258500 -0.4174300 52 2021 0.0498568 0.2390190 -0.3819395 0.0239549 0.0017813 0.0480755 0.5731621 53 2022 -1.1272040 0.2593760 0.7468760 0.1826760 -0.0617240 -1.0654800 2.6461240 10 "],["FAQ.html", "10 FAQ 10.1 Returns Information 10.2 Country Flows", " 10 FAQ 10.1 Returns Information When available EPFR has provided fund return data which can be used as a proxy to returns. For demonstration purposes these files are used throughout this notebook to exhibit use cases. However, EPFR is not able to produce bond rates and these files will need to be sourced using 3rd party return data. Fund returns are calculated using EPFR country or sector daily flow data, with the following equations: \\[\\text{Fund Return}_{c,t} = \\frac{\\sum^{N}_{i=m} \\text{Portfolio Change}_i}{\\sum^{N}_{i=m} \\text{Assets Start}_i}\\] Where: \\(\\text{Fund Return}\\) = the return value of country \\(c\\), across all funds \\(i\\), for day \\(t\\) \\[\\text{Sector Return}_{s,r,t} = \\frac{\\sum^{N}_{i=m} \\text{Portfolio Change}_i}{\\sum^{N}_{i=m} \\text{Assets Start}_i}\\] Where: \\(\\text{Sector Return}\\) = the return value of sector \\(s\\), for region \\(r\\), across all funds \\(i\\), for week \\(t\\) For users who choose to use these readily available fund return files to follow along can can access them under the ftp folder: Disclaimer: EPFR Quant team uses 3rd party data providers to calculate returns in our usual presentations to showcase performances. 10.2 Country Flows Country flows is a derived dataset that delivers flows to individual countries. It uses a proprietary algorithm to calculate these derivations. The procedure assumes fixed average country allocations across different cross-border mandates. It then uses fund-level flow data to calculate flows to individual countries. One advantage of this derivation is the broader coverage. EPFRs Fund Flows Database has significant coverage across different regions and countries. In contrast, the Country Allocations Database is a subset of the fund flows dataset. Using fixed average country allocations allows us to include a broader range of cross-border funds in individual country flow calculations. Because of the more general assumptions, Country Flows Database is typically a better fit for macroeconomist &amp; strategists. A typical use case for a macroeconomist would be calculating a high-frequency proxy for those countries balance of payments statistics. On the other hand, when trying to create country rotation strategies, quantitative hedge funds rely on fund-level data. This lets them have a one-to-one match between the country allocations and fund-level flows. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
