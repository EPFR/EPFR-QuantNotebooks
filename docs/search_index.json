[["index.html", "EPFR Strategy Notebooks 1 Introduction", " EPFR Strategy Notebooks 1 Introduction The objectives of this notebook are; to present EPFRs proof of concept strategies, so that readers have a profound understanding of their inputs and composition. to enable the reader to construct signals and find initial value in the data. This book has ten proof-of-concept strategies created by Quantitative Analysts at EPFR. The backtesting methodology across each of these is relatively similar. They are quintile based, long/short, and we apply similar lookback periods for our backtests. We use a standard backtest period because we seek to avoid optimizing any one strategy. Multi-Asset Strategy - (daily flows) FX Strategy - (daily flows, country allocations) Flow-Percentage Country Strategy - (daily flows, country allocations) Flow-Percentage Sector Strategy - (daily flows, sector allocations, country allocations) Active/Passive Country Strategy - (country allocations) Active/Passive Sector Strategy - (sector allocations, country allocations) Flow-Percentage DM Rates Strategy - (daily flows, country allocations) For this type of testing on our data, we provide the time series file available for download. To access the files you can find them readily available in the users EPFR FTP connection under the strategies folder, or click here to email our team for assistance. "],["epfr-library.html", "2 EPFR Library 2.1 About 2.2 Set up 2.3 Strategy Functions", " 2 EPFR Library The R-based EPFR Library, created by members of the EPFR Quant Team, has an extensive list of applicable functions for use on our data and will be used in this demonstration of our strategies. To install the library EPFR.r, click here to download zip from github or you can find code to do this below. library(&quot;devtools&quot;) install_github(&quot;EPFR/EPFR-Quant-Library-R&quot;) library(&quot;EPFR.r&quot;) 2.1 About This library includes a variety of different functions that can help create signals, rank factors, evaluate performance of strategies, along with a list of other useful tools for handling EPFR data. To learn more please refer to the library documentation for all of the descriptions and complete list of parameters for each function, which is easily accessible via the help function in R (tip: ?fcn_name()). 2.2 Set up To use various functions in library('EPFR.r') it is recommended that the user set up a folder called EPFR in your computers C drive (i.e. C://EPFR). This is the default directory that is used throughout the library to find any files used to perform backtests. Inside of this EPFR directory we would suggest following the below folder structure: Add daily folder; to store EPFR daily cvs files. Example: MultiAsset-Rgn-daily.csv, FloPctCtry-daily.csv, FloPctSector-US-daily.csv, FX-daily.csv, ect. Add monthly folder; to store EPFR monthly csv files. Example: ActPasCtry-monthly.csv, ect. Add returns folder; to store any return files used. Example: PsuedoReturns-Multi-Rgn.csv, CumETFCountryReturns.csv, ect. Add parameters; to store any files that library('EPFR.r') has dependencies on. The user should add the following files, which they can download via their EPFR FTP connection (located under the Classifications folder): classif-Ctry.txt MsciCtry2016.txt MsciCtryClassification.txt 2.3 Strategy Functions Total Return Index EPFRs function ret.to.idx() uses other functions within library('EPFR.r') to compute a total-return index series, from percentage returns. To calculate the total return index we sum 1 plus todays percentage return multiplied by the previous days total-return index. ret.to.idx &lt;- function(x) { # ----------------------------------------------------------------- # Name : ret.to.idx # Args : x = a file of total returns indexed so that time runs forward # Output : computes a total-return index # ----------------------------------------------------------------- if (is.null(dim(x))) { z &lt;- x w &lt;- !is.na(z) n &lt;- find.data(w, T) m &lt;- find.data(w, F) if (n &gt; 1) n &lt;- n - 1 z[n] &lt;- 100 while (n &lt; m) { n &lt;- n + 1 z[n] &lt;- (1 + zav(z[n])/100) * z[n - 1] } } else { z &lt;- fcn.mat.vec(ret.to.idx, x,, T) } # # RETURN RESULT z } Compunding Flows EPFRs function compound.flows() uses other functions within library('EPFR.r') to compute a rolling cumulative sum of flows over a trailing lookback period (typically we use 20 days). compound.flows &lt;- function(x, y, n = F) { # ----------------------------------------------------------------- # Args : x = a matrix/data-frame of percentage flows # : y = number of trailing rows to compound/sum # : n = if T, flows get summed. Otherwise they get compounded. # Output : compounded flows over &lt;n&gt; trailing periods indexed by last day in the flow window # ----------------------------------------------------------------- # # FIND NA&#39;s : # creates new df with value of 1 for all non-NA flows, else NA h &lt;- nonneg(mat.to.obs(x)) # # PRELIMINARIES : # convert all NA values to 0 in order to do computations # convert to log form z &lt;- zav(x) if (!n) z &lt;- log(1 + z/100) # # ROLLING WINDOWS # calculate rolling sum # reverse log form z &lt;- mat.rollsum(z, y) if (!n) z &lt;- 100 * exp(z) - 100 # # ENSURE FINAL DATE IN EACH ROLLING WINDOW IS NON-NA # multiply compounded flow matrix by h (1/NA df) z &lt;- z * h # # RETURN RESULT z } Please refer to the library documentation for more details. Model EPFRs function bbk() creates a standardized backtest model based on our inputs (e.g. ranking factors into 5 equal baskets based on compounded flows). bbk &lt;- function(x, y, floW = 1, retW = 5, nBin = 5, doW = NULL, sum.flows = F, lag = 0, delay = 2, idx = NULL, prd.size = 1, sprds = F) { # ----------------------------------------------------------------- # Args : x = predictor indexed by yyyymmdd or yyyymm (compounded percentage flow) # : y = total return index indexed by the same date format as &lt;x&gt; # : floW = number of &lt;prd.size&gt;&#39;s over which the predictor should be compounded/summed # : retW = return window in days or months depending on whether &lt;x&gt; is YYYYMMDD or YYYYMM # : nBin = number of bins to divide the variable into # : doW = day of the week you will trade on (5 = Fri) # : sum.flows = T/F depending on whether &lt;x&gt; should be summed or compounded # : lag = predictor lag in days or months depending on whether &lt;x&gt; is YYYYMMDD or YYYYMM # : delay = delay in knowing data in days or months depending on whether &lt;x&gt; is YYYYMMDD or YYYYMM # : idx = the index within which you are trading # : prd.size = size of each period in days or months depending on whether &lt;x&gt; is YYYYMMDD or YYYYMM # : sprds = T/F depending on whether spread changes, rather than returns, are needed # Output : standard model output # ----------------------------------------------------------------- # # GET DATA x &lt;- bbk.data(x, y, floW, sum.flows, lag, delay, doW, retW, idx, prd.size, sprds) # # BIN RETURNS z &lt;- lapply(bbk.bin.xRet(x$x, x$fwdRet, nBin, T, T), mat.reverse) # # SUMMARY z &lt;- c(z, bbk.summ(z$rets, z$bins, retW, ifelse(is.null(doW), 1, 5))) # # RETURN RESULT z } Please refer to the library documentation for more details. Example Step 0: Download &amp; read files Users can download corresponding percentage flow and percentage returns files available in the users ftp, under the folders Strategies/daily and Returns/daily. For this example we download the full file paths /Strategies/daily/FloPctSector-US-daily.csv and /Returns/PsuedoReturns-Sector-US-daily.csv, and save to our local folder EPFR. For convince we can save the local paths to these files as flow.file and ret.file, then we can read the files. flow.file &lt;- &quot;C:\\\\EPFR\\\\FloPctSector-US-daily.csv&quot; ret.file &lt;- &quot;C:\\\\EPFR\\\\PsuedoReturns-Sector-US-daily.csv&quot; x &lt;- mat.read(flow.file) # Flow file y &lt;- mat.read(ret.file) # Return file Step 1: Ensure that x and y the same column names and order x &lt;- as.matrix(x[, dimnames(y)[[2]]]) # LINE UP INDICATORS WITH RETURNS Step 2: Compound (or Sum Flows) over lookback period (\\(y\\)) EPFRs function compound.flows() uses other functions within library('EPFR.r') to either compound, or compute a rolling cumulative sum of flows, over a trailing lookback period (typically we use y = 20 days). x &lt;- compound.flows(x, y = 20) Step 3: Convert percentage returns to total return index EPFRs function ret.to.idx() will convert our percentage returns data \\(y\\) to total index returns indexed so that time moves forward. We also use the functions map.rname() to ensure the row names of the matrices line up with our flow file and ret.idx.gaps.fix() to replace any NA values. y[is.na(y)] &lt;- 0 y &lt;- ret.to.idx(map.rname(y, dimnames(x)[[1]])) # CONVERT TO A TOTAL-RETURN INDEX y &lt;- ret.idx.gaps.fix(y) Step 4: Define variables hz &lt;- c(5, 10, 20, 45, 65, 130) # RETURN HORIZON (IN WEEKDAYS OR MONTHS) - holding periods nBin &lt;- 5 # Number of bins (to sort) doW &lt;- 5 # Day of the week to trade on delay &lt;- 2 # Delay in getting the data (able to trade on data @ T+2) idx &lt;- NULL # Optional: Universe that is being used for signal (e.g. ACWI/EM/EAFE/G10) Step 5: Create standardized backtest model z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, idx) Step 6: Evaluate output \\(Z\\) has 4 different outputs that you can view. Within the final rets output, the overall portfolio will go long the top quintile and short the bottom, however the returns of each individual quintile are also presented z[[&quot;raw&quot;]] # Flow percentage compounded over trailing 20 days z[[&quot;raw.fwd.rets&quot;]] # One-week ahead return (Friday to Friday) z[[&quot;bins&quot;]] # Twenty-day flow percentage ranked into quintiles (computed only where forward returns are available) z[[&quot;rets&quot;]] # Quintile Returns over the equal-weight universe, *column TxB tells us top - bottom = Q1 - Q5 = overall portfolio returns Step 7: Re-balance as needed Strategies need to be rebalanced and the below code outputs summary statistics across 6 different rebalancing options found in \\(hz\\). Depending on how the signal we are backtesting is indexed, holding periods can be specified in a daily or monthly format. For this example we have a daily signal and \\(hz\\) contains options for a weekly (5 days), fortnightly (10 days), monthly (20 days), bi-monthly (45 days), quarterly (65 days), and semi-annual (130 days) rebalanced portfolio. fcn &lt;- function(retW) {as.matrix(bbk(x, y, 1, retW, nBin, doW, T, 0, delay)$summ)} # DEFINE SUMMARY FUNCTION sapply(split(hz, hz), fcn, simplify = &quot;array&quot;) # WRITE SUMMARIES Step 8: Find the mean one-week returns per calendar year bbk(x, y, 1, hz[1], 5, doW, T, 0, delay)$annSumm "],["Filters.html", "3 Filters", " 3 Filters EPFR has an extensive list of over two dozen filters that can be applied to our data sets, therefore the signals we can get can be fine-tuned. For example EPFR data can be filtered by: Investor type (retail or institutional)  driven by EPFRs share class-level classifications Fund type (active or passive, ETF or mutual fund) Fund domicile or geographic focus Asset class focus Theme (ESG, Sharia, ect.) Currency of flows Individual managers Duration Style Sector "],["multi-asset-strategy.html", "4 Multi-Asset Strategy 4.1 Overview 4.2 Data 4.3 Strategy Implementation", " 4 Multi-Asset Strategy 4.1 Overview This is a Multi-Asset Strategy, where we are essentially rotating between asset classes within equity and fixed income universes. This approach uses fixed income funds and active equity funds to calculate percentage flow into asset classes. 4.2 Data The Multi-Asset Strategy developed by EPFR Global is based on percentage flow into asset classes. In this section, the reader will gain an understanding of the aggregations which can be used to create a signal as well as the methodology behind daily percentage flow calculations. 4.2.1 Aggregations The first step is defining a subset of data to capture in calculating our signal. For this strategy we can include equity, fixed-income, or both types of funds. Although, we will limit ourselves to actively managed funds when compiling the raw equity data. Equity and Fixed income (i.e. Multi-Asset) funds, which report their daily flows, are only a subset of those that report their fund flows to EPFR. The figure below shows EPFRs daily coverage for each these universes over time compared to our total monthly and daily coverages. Updated at the end of July each year Users looking for more specific detail can customize this aggregation even further using EPFRs fund-level or share class-level granularity. Some good examples would be to consider only active, passive, ETFs or mutual funds, or only institutional or retail share class flows and assets. Users leverage these tags to different degrees in creating aggregated signals to backtest. Further detail about this is available in section 3. This can be achieved using fund-level flow files or by reaching out to EPFRs quant team for customized aggregations. 4.2.2 Daily Percentage Flow To begin calculating Daily Percentage flow, we start with our subset of Multi-Asset funds. To calculate the total dollar flow into an asset class, we will sum the flows into funds that invest in that asset class. \\[\\text{Total Flow}_{a,t} = \\sum^{N}_{i=m} \\text{Flow}_{i,a,t}\\] Where: \\(\\text{Total Flow}\\) = the total dollar flow into an asset class \\(a\\), across all funds in our universe \\(i\\), for day \\(t\\) We will want to normalize this figure. So, we repeat the process across the same funds Assets held under Management (AuM), to get the total AuM held in an asset class. \\[\\text{Total AuM}_{a,t} = \\sum^{N}_{i=m} \\text{AuM}_{i,a,t}\\] Where: \\(\\text{Total AuM}\\) = the total assets held in an asset class \\(a\\), across all funds in our universe \\(i\\), for day \\(t\\) Finally, to get the daily percentage flow for an asset class, we divide the total dollar flow by the total AuM held in an asset class. \\[\\text{Percentage Flow}_{a,t} = \\frac{\\text{Total Flow}_{a,t}}{{\\text{Total AuM}_{a,t}}}\\] Where: \\(\\text{Percentage Flow}\\) = the scaled flow as a percentage into an asset class \\(a\\), across all funds in our universe \\(i\\), for day \\(t\\) We repeat this across all different asset classes for the entire history. 4.2.3 Aggregate Flow File Users may create flow percentages for their desired equity and/or fixed income asset class aggregations and granularity using the methodology described in the previous section. Users also have the option to use the Multi-Asset strategy files EPFR provides, which are updated daily at 5:00 PM est. with a T+1 day lag, and are available in the users EPFR FTP connection under the strategies folder. There are two different types of Multi-Asset strategy files for fixed income and (active) equity funds, which both contain aggregate percentage flow data. Below is the list of asset classes in each file: Asset Classes 7 Global Equity Regions: Asia ex Japan Europe ex UK Japan Latin America Pacific ex Japan United Kingdom United States 10 Fixed Income: Global Emerging Markets Western Europe Bond High Yield Bond Floating Rate Funds USA Treasuries - Intermediate USA Treasuries - Long USA Treasuries - Short Cash USA Munis Global Fixed Income For this demonstration, we will be using the files MultiAsset-Rgn-daily.csv and MultiAsset-FI-daily.csv, which can be downloaded from the users ftp under the folder Strategies/daily and can be stored in the users local folder EPFR/daily. Below shows a snippet of what these files contain: Strategies/daily/MultiAsset-Rgn-daily.csv AsiaXJP EurXGB Japan LatAm PacXJP UK USA 20221201 0.007832 -0.049717 0.025896 -0.119699 0.047104 0.046167 -0.002579 20221202 -0.005935 0.045037 0.044813 -0.120665 -0.089292 -0.005365 -0.011253 20221205 0.103487 -0.028151 -0.130054 0.032016 -0.036000 -0.139015 -0.090282 20221206 -0.033235 -0.034462 -0.062251 0.008487 -0.014146 -0.005865 -0.099294 20221207 0.139546 0.033230 -0.064353 0.092872 -0.010595 -0.040282 -0.084254 20221208 0.061229 -0.058623 -0.011848 0.052552 -0.050941 -0.052541 -0.111574 Strategies/daily/MultiAsset-FI-daily.csv GLOBEM WESEUR HYIELD FLOATS USTRIN USTRLT USTRST CASH USMUNI GLOFIX 20221201 0.051787 0.033868 0.289366 0.184143 0.096795 2.799822 -0.680302 0.366766 0.063576 -0.113089 20221202 0.070311 -0.003194 0.033532 -0.142670 0.126346 -0.007633 -0.033858 0.251873 0.016175 -0.010894 20221205 0.197142 0.010749 -0.230443 -0.038015 -0.606976 -0.028715 -0.273733 0.203955 0.011237 0.042224 20221206 0.058314 0.063199 -0.167975 -0.174142 0.240116 -0.036163 -0.385658 0.159930 0.045748 0.012920 20221207 0.004829 0.015731 -0.046363 -0.253774 -0.014336 0.044745 -0.077747 -0.080626 0.009204 0.013182 20221208 0.079906 -0.062840 -0.144903 -0.335260 0.083566 0.163354 0.306039 0.445716 -0.003462 0.068364 For convince save the paths to the flow files you choose to use as flow.file.rgn and flow.file.FI respectively, example shown below: flow.file.rgn &lt;- &quot;C:\\\\EPFR\\\\daily\\\\MultiAsset-Rgn-daily.csv&quot; flow.file.FI &lt;- &quot;C:\\\\EPFR\\\\daily\\\\MultiAsset-FI-daily.csv&quot; 4.2.4 Return File The return file for this strategy should contain daily fixed income and equity fund returns for the respective asset classes contained in the flow file, over the period of time the user wants to backtest. The user can choose to use return data found with their own resources, or they have the option to use files EPFR provides specifically for the Multi-Asset strategy, which are available in the users EPFR FTP connection under the Returns folder ( 11.1 ). The Return files that EPFR provides contain Fund Return data and can be used as a proxy to equity and fixed income market returns. The user can recreate these files using EPFR daily flow data with the following equation: \\[\\text{Fund Return}_{a,t} = 100 \\times \\frac{\\sum^{N}_{i=m} \\text{Portfolio Change}_{i,a,t}}{\\sum^{N}_{i=m} \\text{Assets Start}_{i,a,t}}\\] Where: \\(\\text{Fund Return}\\) = the percentage return of an asset class \\(a\\), across all funds in our universe \\(i\\), for day \\(t\\) For this demonstration, we will be using the files PsuedoReturns-MultiAsset-Rgn-daily.csv and PsuedoReturns-MultiAsset-FI-daily.csv, which can be downloaded from the users ftp under the folder Returns/daily and can be stored in the users local folder EPFR/returns. Below shows a snippet of what these files contain: Returns/daily/PsuedoReturns-MultiAsset-Rgn-daily.csv AsiaXJP EurXGB Japan LatAm PacXJP UK USA 20221201 0.635776 0.434427 0.236049 1.010258 0.714238 0.459197 0.182008 20221202 -0.245492 0.258750 -0.636488 0.032195 -0.236678 0.007758 -0.047176 20221205 0.631139 -0.148449 -0.834741 -1.994207 0.019128 0.049596 -1.717385 20221206 -0.583127 -0.563054 -0.268249 -0.782343 -0.616792 -0.729927 -1.362890 20221207 -1.208140 -0.541391 -0.260906 0.086281 -0.733237 -0.527637 -0.248906 20221208 0.940062 -0.180853 -0.220377 -0.681296 -0.136375 -0.436332 0.620931 Returns/daily/PsuedoReturns-MultiAsset-FI-daily.csv GLOBEM WESEUR HYIELD FLOATS USTRIN USTRLT USTRST CASH USMUNI GLOFIX 20221201 0.446122 0.224148 0.593589 0.036348 0.624382 2.254448 0.028171 0.000667 0.415195 0.356319 20221202 0.307907 0.171585 0.051091 -0.002056 0.134954 0.123340 -0.000624 0.001003 0.052663 0.218442 20221205 0.126604 0.035921 -0.153365 -0.027640 -0.356850 -0.209727 -0.063772 0.001550 0.140540 -0.032771 20221206 -0.280337 0.160147 -0.255263 0.003406 0.144371 0.780719 0.017401 0.000984 0.031446 0.062543 20221207 0.140055 0.058259 -0.018378 -0.065139 0.634225 1.535799 0.098879 0.000776 0.185798 0.184534 20221208 0.265156 -0.024768 0.142264 -0.005329 -0.318677 -0.241050 -0.032810 0.000782 0.036168 0.062115 For convince save the paths to the return files you choose to use as ret.file.rgn and ret.file.FI respectively, example shown below: ret.file.rgn &lt;- &quot;C:\\\\EPFR\\\\returns\\\\PsuedoReturns-MultiAsset-Rgn-daily.csv&quot; ret.file.FI &lt;- &quot;C:\\\\EPFR\\\\returns\\\\PsuedoReturns-MultiAsset-FI-daily.csv&quot; 4.3 Strategy Implementation 4.3.1 Flow file The final step is implementing this strategy to create a signal. Lets begin by reading in the flow files to our R studio work space. x.rgn &lt;- mat.read(flow.file.rgn) # GET RGN FLOW PERCENTAGE C:\\\\EPFR\\\\daily\\\\MultiAsset-Rgn-daily.csv x.FI &lt;- mat.read(flow.file.FI) # GET FI FLOW PERCENTAGE C:\\\\EPFR\\\\daily\\\\MultiAsset-FI-daily.csv The next step is to ensure both of our flow files have the same rows so that we can combine the two files, like we do below. x.rgn &lt;- x.rgn[is.element(dimnames(x.rgn)[[1]], dimnames(x.FI)[[1]]), ] # ENSURES RGN MATCHES FI ROWS x.FI &lt;- x.FI[is.element(dimnames(x.FI)[[1]], dimnames(x.rgn)[[1]]), ] # ENSURES FI MATCHES RGN ROWS x &lt;- cbind(x.rgn, x.FI) # COMBINES RGN AND FI DATA One of the first options we have is choosing the universe we want to backtest. EPFR has tested this signal within two different universes of asset classes Rgn (7 Region Equity) and FI (Fixed Income). For this example, we choose Multi, which includes both of our equity and fixed income asset classes, but one can also choose to backtest within either the Rgn or FI universes separately. idx &lt;- &quot;Multi&quot; # Multi/Rgn/FI 4.3.2 Compounding Flows Next, we set up a variable for our look-back period, which can also be called a flow window. This variable will be the window of time we use to create a trailing compounded daily percentage flow. The look-back period we choose for our demonstrations is 20 days. lookback &lt;- 20 # FLOW WINDOW (IN WEEKDAYS) - 20 day look back period Using a function from the library('EPFR.r'), compound.flows() compounds our daily percentage flow over the trailing lookback period for each asset class. x &lt;- compound.flows(x, lookback, F) # COMPOUND FLOWS AsiaXJP EurXGB Japan LatAm PacXJP UK USA GLOBEM WESEUR HYIELD FLOATS USTRIN USTRLT USTRST CASH USMUNI GLOFIX 20221201 -0.5935744 -0.9011096 0.1759815 -1.231081 -0.3122597 -0.8392634 -0.4846786 0.6630384 0.5921352 1.9514429 -2.125939 0.8615195 7.368753 -0.5797696 1.324865 0.1061790 0.2467439 20221202 -0.4957430 -0.6686647 0.2507892 -1.508537 -0.3909206 -0.7661013 -0.5061060 0.7765973 0.5282304 1.9381506 -2.151642 0.9314150 7.247511 -0.6783618 1.771157 0.1854309 0.2729250 20221205 -0.4947291 -0.7995004 0.0388963 -1.531783 -0.4224801 -0.8483539 -0.5699878 0.9884008 0.4988437 1.6447813 -2.064563 0.2088554 7.170713 -1.3358431 1.654928 0.2551084 0.3154037 20221206 -0.4729045 -0.6938171 -0.0446434 -1.628549 -0.3301458 -0.8645179 -0.6412650 1.0813465 0.5051112 1.4909559 -2.218451 0.4746187 6.925902 -2.1067769 1.780230 0.3172435 0.3053755 20221207 -0.2520256 -0.5759144 -0.1187730 -1.695810 -0.3475549 -0.8860501 -0.6878389 1.0946509 0.5293832 1.3865604 -2.436764 0.3590598 6.852528 -2.4679185 1.562598 0.3119034 0.3425063 20221208 -0.0925901 -0.6546987 0.0569879 -1.612896 -0.4813274 -0.8700669 -0.7834505 1.2062479 0.4497268 0.4233311 -2.837551 0.9271004 6.053509 -1.3176497 2.342189 0.2374214 0.3654252 4.3.3 Total Return Index We will then import our two total return files and modify them to be one data frame of total index returns indexed so that time moves forward. To do this we will use function ret.to.idx() from library('EPFR.r'). We also use the functions map.rname() to ensure the row names of the matrices line up with our flow file and ret.idx.gaps.fix() to replace any NA values. Please refer to the library documentation for the complete list of parameters for these functions (tip: ?ret.to.idx(),?ret.idx.gaps.fix() ). #RGN RETURNS y &lt;- mat.read(ret.file.rgn) # GET RGN PERCENTAGE RETURNS C:\\\\EPFR\\\\returns\\\\PsuedoReturns-MultiAsset-Rgn-daily.csv y &lt;- ret.to.idx(map.rname(y, dimnames(x)[[1]])) # CONVERT TO A TOTAL-RETURN INDEX y &lt;- ret.idx.gaps.fix(y) #F.I. RETURNS z &lt;- mat.read(ret.file.FI) # GET FI PERCENTAGE RETURNS C:\\\\EPFR\\\\returns\\\\PsuedoReturns-MultiAsset-FI-daily.csv z &lt;- ret.to.idx(map.rname(z, dimnames(y)[[1]])) # CONVERT TO A TOTAL-RETURN INDEX #COMBINE RETURN FILES y &lt;- data.frame(y, z)[, dimnames(x)[[2]]] # FINAL TOTAL-RETURN INDEX TABLE y &lt;- y[max(simplify2array(lapply(y, function(x) {find.data(!is.na(x), T)}))):min(simplify2array(lapply(y, function(x) {find.data(!is.na(x), F)}))), ] # ENSURE ALL PIECES HAVE RETURN OVER THE SAME HORIZON 4.3.4 Subset files Then, to subset the flow file \\(x\\) and return file \\(y\\) to the selected universe \\(idx\\) of asset classes, the following code is used. During this process, we also ensure that the data structure in \\(x\\) and \\(y\\) are completely aligned, having the same column names in the same order. if (idx == &quot;Rgn&quot;) { x &lt;- x[, 1:7] y &lt;- y[, 1:7] } else if (idx == &quot;FI&quot;) { x &lt;- x[, 8:dim(x)[2]] y &lt;- y[, 8:dim(y)[2]] } * Note: subsetting can be also be done when creating the flow and return files 4.3.5 Ranking Asset Classes Next, we sort each of the asset classes in our universe into five equal bins based on their compounded percentage flow values for the selected holding period. To do this, we will use the function from library('EPFR.r'), called bbk(). This function will output a standardized backtest result. The bbk() function requires our daily percentage flow data compounded over a desired period and total return index data. Please refer to the library documentation for the complete list of parameters of this function (tip: ?bbk()). The first parameter we add is the number of bins we want to use. For our case, we want to use 5 because our strategy is to go long the top fifth and short the bottom fifth. nBin &lt;- 5 # NUMBER OF BINS Since EPFR data is published with T+1 day lag and is released around 5:00 pm EST, we account for a T+2 day delay in our model. Users interested in more timely signals can also use the T+2 open prices for backtesting purposes. Alternatively, EPFRs Premium Daily offering collects an earlier release of end-of-day data which includes a significant subset of its original fund-level flow information. delay &lt;- 2 # DELAY IN KNOWING DATA (IN WEEKDAYS) - data takes time to have It is also important to note that this model will need to be re-balanced weekly. The day of the week the rebalancing occurs is at the discretion of the user. For this example we will set the day of the week to trade as Friday. doW &lt;- 5 # DAY OF THE WEEK YOU WILL TRADE ON (5 = FRIDAYS) Additionally, we also evaluate the returns for different holding periods. The user can input return horizons that they are interested in here. For this example we define a return horizon for weekly, fortnightly, monthly, bi-monthly, quarterly, and semi-annual rebalancing. hz &lt;- c(5, 10, 20, 45, 65, 130) # RETURN HORIZON (IN WEEKDAYS) - holding periods Now that we have defined all of our inputs, to rank the asset classes into quintiles by their 20-day percentage flow, we call function bbk() for a 1-week holding period. z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay) 4.3.6 Model Twenty-day flow percentage ranked into quintiles (computed only where forward returns are available) z[[&quot;bins&quot;]] AsiaXJP EurXGB Japan LatAm PacXJP UK USA GLOBEM WESEUR HYIELD FLOATS USTRIN USTRLT USTRST CASH USMUNI GLOFIX 20221230 2 4 3 4 3 4 5 1 2 5 5 2 1 1 3 4 2 20221223 2 4 3 5 3 4 4 1 1 5 5 2 1 2 3 4 2 20221216 2 4 3 5 3 4 4 1 2 2 5 4 1 5 1 3 2 20221209 3 4 3 5 4 4 4 2 2 1 5 2 1 5 1 3 2 20221202 4 4 3 5 4 5 4 2 2 1 5 1 1 2 2 3 3 Quintile Returns over the equal-weight universe z[[&quot;rets&quot;]] Q1 Q2 Q3 Q4 Q5 TxB uRet 20221230 0.4306819 0.4402299 -1.3911746 0.3613693 -0.1083064 0.5389884 1.4344478 20221223 -0.5704888 0.1372300 0.2765196 0.4323052 -0.4654111 -0.1050777 -0.3751581 20221216 -0.9892391 -0.5280797 -1.2870370 0.3130829 2.5629384 -3.5521775 -0.2181546 20221209 0.9521492 0.6309391 0.0083370 -0.7829499 -0.7578051 1.7099543 -0.6660290 20221202 0.5392899 0.7327735 0.5364739 -0.4503999 -1.4522621 1.9915520 -0.6872089 Def: TxB represents summary statistics for the long short portfolio (top - bottom = Q1 - Q5 = overall portfolio returns) 4.3.7 Performance Performance over all holding periods fcn &lt;- function(retW) {as.matrix(bbk(x, y, 1, retW, nBin, doW, T, 0, delay)$summ)} # DEFINE SUMMARY FUNCTION sapply(split(hz, hz), fcn, simplify = &quot;array&quot;) # WRITE SUMMARIES Q1 Q2 Q3 Q4 Q5 TxB uRet Bi-Monthly AnnMn 4.583920e-01 -2.594940e-01 9.295932e-01 9.628910e-01 -2.351093e+00 2.809486e+00 2.817444e+00 AnnSd 7.479635e+00 4.684898e+00 5.259342e+00 5.513282e+00 6.294242e+00 1.142850e+01 9.160929e+00 Sharpe 5.608329e+00 -6.328971e+00 1.655369e+01 1.757939e+01 -3.766632e+01 2.405173e+01 3.091556e+01 HitRate -3.881427e+00 -3.142043e+00 3.033510e+00 4.007597e+00 -7.708588e+00 3.512414e+00 1.337946e+01 Beta -5.269364e-01 -9.472810e-02 2.022350e-01 2.901727e-01 6.467210e-02 -5.916084e-01 1.000000e+00 Alpha 1.939176e+00 8.265900e-03 3.581982e-01 1.478547e-01 -2.532366e+00 4.471542e+00 0.000000e+00 DrawDn -3.074560e+01 -2.156662e+01 -1.716991e+01 -1.747945e+01 -4.869298e+01 -3.197177e+01 -3.101945e+01 DDnBeg 2.010717e+07 2.010286e+07 2.010060e+07 2.009285e+07 2.008297e+07 2.012516e+07 2.007096e+07 DDnN 6.000000e+01 4.966667e+01 2.611111e+01 1.700000e+01 7.044444e+01 4.366667e+01 7.666667e+00 AnnTo 3.355438e+02 3.709975e+02 4.358293e+02 3.802391e+02 3.799490e+02 7.154928e+02 0.000000e+00 Fortnightly AnnMn 8.528067e-01 -2.806488e-01 1.396772e+00 1.685523e+00 -4.120670e+00 4.973477e+00 2.843355e+00 AnnSd 7.570229e+00 4.861694e+00 5.189497e+00 5.725809e+00 5.945479e+00 1.125816e+01 8.349879e+00 Sharpe 1.142241e+01 -5.663944e+00 2.691836e+01 2.941968e+01 -6.950248e+01 4.452351e+01 3.405433e+01 HitRate 0.000000e+00 -3.667482e-01 2.078240e+00 2.689487e+00 -7.212714e+00 2.933985e+00 1.112469e+01 Beta -5.878679e-01 -7.675500e-02 1.166431e-01 3.622517e-01 9.076600e-02 -6.786339e-01 1.000000e+00 Alpha 2.524404e+00 -6.308980e-02 1.066617e+00 6.553465e-01 -4.379187e+00 6.903591e+00 0.000000e+00 DrawDn -2.806404e+01 -2.435067e+01 -1.540766e+01 -1.462624e+01 -6.890044e+01 -2.824522e+01 -3.576917e+01 DDnBeg 2.014551e+07 2.007555e+07 2.011022e+07 2.020016e+07 2.007060e+07 2.013052e+07 2.007106e+07 DDnN 1.580000e+02 2.050000e+02 2.300000e+01 5.000000e+00 3.945000e+02 1.430000e+02 3.150000e+01 AnnTo 9.111654e+02 1.259474e+03 1.631887e+03 1.321455e+03 1.030888e+03 1.942054e+03 0.000000e+00 Monthly AnnMn 5.957739e-01 1.298040e-02 1.579767e+00 8.235358e-01 -3.304262e+00 3.900036e+00 2.895231e+00 AnnSd 7.822763e+00 4.659166e+00 5.096568e+00 5.857219e+00 6.157193e+00 1.177105e+01 8.849187e+00 Sharpe 7.530507e+00 2.236037e-01 3.200897e+01 1.392956e+01 -5.383050e+01 3.326737e+01 3.276037e+01 HitRate -2.696078e+00 4.901961e-01 4.166667e+00 3.431373e+00 -8.700980e+00 1.960784e+00 1.078431e+01 Beta -6.064380e-01 -9.866540e-02 1.347789e-01 3.446005e-01 1.436768e-01 -7.501148e-01 1.000000e+00 Alpha 2.351156e+00 2.981291e-01 1.191132e+00 -1.735794e-01 -3.721531e+00 6.072687e+00 0.000000e+00 DrawDn -2.884157e+01 -1.890504e+01 -1.485217e+01 -1.821599e+01 -5.753006e+01 -2.715427e+01 -3.389934e+01 DDnBeg 2.010572e+07 2.011579e+07 2.009591e+07 2.013536e+07 2.007059e+07 2.017569e+07 2.007104e+07 DDnN 1.220000e+02 7.575000e+01 4.075000e+01 1.850000e+01 1.952500e+02 4.350000e+01 1.675000e+01 AnnTo 6.754902e+02 7.941789e+02 9.346405e+02 7.953738e+02 7.450572e+02 1.420547e+03 0.000000e+00 Quarterly AnnMn 3.502234e-01 -6.132303e-01 7.618033e-01 1.096435e+00 -1.784712e+00 2.134935e+00 2.851714e+00 AnnSd 7.732577e+00 4.639634e+00 5.382662e+00 5.176854e+00 6.173645e+00 1.148515e+01 9.179215e+00 Sharpe 4.707880e+00 -1.214507e+01 1.445102e+01 2.155980e+01 -3.027477e+01 1.803442e+01 3.115947e+01 HitRate -5.762338e+00 -3.280948e+00 3.149001e+00 5.768246e+00 -6.634763e+00 6.833668e-01 1.517783e+01 Beta -5.009102e-01 -8.716100e-02 2.656666e-01 2.753076e-01 -1.526400e-02 -4.856462e-01 1.000000e+00 Alpha 1.752461e+00 -3.491533e-01 1.017960e-02 3.103839e-01 -1.740333e+00 3.492794e+00 0.000000e+00 DrawDn -3.329441e+01 -2.389114e+01 -1.728383e+01 -1.618250e+01 -4.020833e+01 -3.541475e+01 -2.855401e+01 DDnBeg 2.011521e+07 2.010440e+07 2.009230e+07 2.010210e+07 2.007995e+07 2.013152e+07 2.007107e+07 DDnN 3.923077e+01 3.253846e+01 2.092308e+01 1.092308e+01 4.900000e+01 2.938462e+01 4.692308e+00 AnnTo 2.463324e+02 2.673835e+02 3.013536e+02 2.645654e+02 2.712881e+02 5.176205e+02 0.000000e+00 Semi-Annual AnnMn -1.637462e-01 -1.030446e+00 8.012612e-01 1.480175e+00 -1.260755e+00 1.097008e+00 2.830686e+00 AnnSd 7.392203e+00 4.910102e+00 5.658245e+00 5.407233e+00 6.481468e+00 1.101684e+01 9.867426e+00 Sharpe -2.583032e+00 -2.209034e+01 1.329106e+01 2.736484e+01 -2.066825e+01 9.616165e+00 2.883432e+01 HitRate -3.225807e+00 -8.382961e+00 5.169562e+00 8.767577e+00 -6.509512e+00 -1.377171e+00 1.649297e+01 Beta -3.314543e-01 -7.372020e-02 2.698141e-01 2.466085e-01 -1.689341e-01 -1.625202e-01 1.000000e+00 Alpha 7.783372e-01 -7.963151e-01 2.318610e-02 7.779984e-01 -8.004999e-01 1.578837e+00 0.000000e+00 DrawDn -3.134756e+01 -2.941409e+01 -1.639326e+01 -1.401040e+01 -3.325327e+01 -3.955553e+01 -2.575678e+01 DDnBeg 2.010598e+07 2.009557e+07 2.010224e+07 2.010004e+07 2.008802e+07 2.011291e+07 2.007133e+07 DDnN 1.876923e+01 2.138462e+01 8.576923e+00 6.000000e+00 1.850000e+01 1.326923e+01 2.500000e+00 AnnTo 1.330687e+02 1.414185e+02 1.515343e+02 1.405294e+02 1.424207e+02 2.754894e+02 0.000000e+00 Weekly AnnMn 1.450854e+00 -1.104417e+00 1.180710e+00 2.096507e+00 -3.987726e+00 5.438580e+00 2.865019e+00 AnnSd 7.361582e+00 4.789173e+00 5.460127e+00 5.542661e+00 6.371816e+00 1.134956e+01 8.032423e+00 Sharpe 1.970846e+01 -2.306071e+01 2.162422e+01 3.782491e+01 -6.258381e+01 4.791886e+01 3.566818e+01 HitRate 1.526252e+00 -2.136752e+00 2.991453e+00 3.357753e+00 -4.578755e+00 2.991453e+00 7.142857e+00 Beta -5.767046e-01 -7.848820e-02 1.911832e-01 2.777194e-01 1.208464e-01 -6.975510e-01 1.000000e+00 Alpha 3.103124e+00 -8.795471e-01 6.329667e-01 1.300836e+00 -4.333953e+00 7.437077e+00 0.000000e+00 DrawDn -2.006493e+01 -3.253954e+01 -2.163814e+01 -1.751506e+01 -6.479695e+01 -2.131305e+01 -3.582700e+01 DDnBeg 2.009071e+07 2.008011e+07 2.010012e+07 2.020021e+07 2.007053e+07 2.016021e+07 2.007103e+07 DDnN 5.530000e+02 5.990000e+02 1.670000e+02 1.000000e+01 7.910000e+02 1.380000e+02 5.600000e+01 AnnTo 1.185185e+03 1.821164e+03 2.566667e+03 2.007937e+03 1.394709e+03 2.579894e+03 0.000000e+00 Annualized mean one-week returns bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay)$annSumm # DISPLAY CALENDAR-YEAR RETURNS Q1 Q2 Q3 Q4 Q5 TxB uRet nPrds 2007 -4.9991596 8.1081527 7.4656590 0.1733398 -14.3902475 9.3910879 3.564658 31 2008 31.5987962 -10.8438837 6.1654606 -0.5349756 -22.5924443 54.1912405 -27.417418 52 2009 2.3072416 -1.5192505 14.8127670 1.6921079 -17.3504851 19.6577267 24.141740 52 2010 0.1034079 -1.9135083 -0.8207898 4.0712375 -2.1595904 2.2629983 9.964876 53 2011 -0.2695208 -1.1922544 -17.4413923 8.9153149 7.4134992 -7.6830200 -2.537112 52 2012 0.1654326 1.0434649 0.9224258 0.3442689 -2.9381702 3.1036028 9.883816 52 2013 2.3153071 1.6437289 3.6305776 -1.4792299 -6.1652166 8.4805237 4.569832 52 2014 -8.1588688 -0.4403193 -4.6239265 5.7383372 5.7187714 -13.8776402 4.051446 52 2015 -0.8347351 4.5037461 1.9260046 0.9329964 -8.3402595 7.5055244 -1.968191 52 2016 0.3959284 -6.4133719 5.2284472 2.5878000 -0.5236132 0.9195416 5.941342 53 2017 -2.4383586 -4.2351856 0.1875269 4.3550233 2.0910481 -4.5294067 8.457597 52 2018 1.1679334 -8.4648271 7.8225638 -2.2113318 5.2443813 -4.0764479 -6.120206 52 2019 -6.6603744 -2.6852111 4.2526665 5.4692010 -1.3042787 -5.3560957 11.606858 52 2020 16.9157850 4.7036651 -10.8022697 -4.3108788 -6.6372303 23.5530154 5.327833 52 2021 -2.5478283 1.2821550 0.0301353 5.7192508 -6.8175148 4.2696865 3.660437 53 2022 -6.3981951 3.1728314 2.0917087 -0.8701622 1.2362608 -7.6344559 -11.315363 52 "],["fx-strategy.html", "5 FX Strategy 5.1 Overview 5.2 Data 5.3 Strategy Implementation", " 5 FX Strategy 5.1 Overview The FX Strategy is an equity fund-based currency rotation strategy, which ranks different foreign exchange markets of countries across a customized universe of both developed and emerging markets. This approach uses the stated allocations of equity funds with a cross-border focus and calculates percentage flow into currencies. 5.2 Data The FX Strategy developed by EPFR Global is based on percentage flow into currencies. In this section, the reader will gain an understanding of the aggregations which can be used to create a signal as well as the methodology behind daily percentage flow calculations. 5.2.1 Aggregations The first step is defining a subset of data to capture in calculating our signal. This strategy requires; Equity funds with a cross-border focus. These are essentially any fund that has a mandate spanning more than one country. The vast majority of these will be global and regional funds. Funds must report both daily flows and country allocations, since these values are needed to calculate Daily Percentage Flow. Cross-border equity funds, which report their country allocations and their daily fund flows, are a subset of those that only report their fund flows to EPFR. The figure below shows EPFRs coverage of this universe over time compared to our total monthly and daily coverages. Updated at the end of July each year Users looking for more specific detail can customize this aggregation even further using EPFRs fund-level or share class-level granularity. Some good examples would be to consider only active, passive, ETFs or mutual funds, or only institutional or retail share class flows and assets. Users can leverage these tags to different degrees in creating aggregated signals to backtest. Further detail about this is available in section 3. This can be achieved using fund-level flow and allocation files or by reaching out to EPFRs quant team for customized aggregations. 5.2.2 Daily Percentage Flow To begin calculating Daily Percentage flow, we start with our subset of cross-border equity funds. To calculate the dollar flow into a currency, we will first need to scale a funds flow by multiplying it against its stated allocation to countries using a currency of interest (e.g. USD, EUR), on that day. We apply the same procedure to all funds with fund flow and country allocation information and then sum the dollar flows into each currency across all funds, to get total dollar flow into a currency. EPFR releases country allocations of all funds on the \\(23^{\\text{rd}}\\) of each month (or the next available business day) at a monthly frequency. Hence, our calculation assumes constant country weightings between two consecutive release dates within the month. \\[\\text{Total Flow}_{x,t} = \\sum^{N}_{i=m}{\\text{Flow}_{i,x,t} \\times \\text{Country Allocation}_{i,x}}\\] Where: \\(\\text{Total Flow}\\) = the total dollar flow into a currency \\(x\\), across all funds in our universe \\(i\\), for day \\(t\\) We will want to normalize this figure. So, we repeat the process across the same funds Assets held under Management (AuM), to get the total AuM held in a currency. \\[\\text{Total AuM}_{x,t} = \\sum^{N}_{i=m}{\\text{AuM}_{i,x,t} \\times \\text{Country Allocation}_{i,x}}\\] Where: \\(\\text{Total AuM}\\) = the total assets held in a currency \\(x\\), across all funds in our universe \\(i\\), for day \\(t\\) Finally, to find the daily percentage flow into a currency, we divide the total dollar flow by the total AuM held in a currency. \\[\\text{Percentage Flow}_{x,t} = \\frac{\\text{Total Flow}_{x,t}}{\\text{Total AuM}_{x,t}}\\] Where: \\(\\text{Percentage Flow}\\) = the scaled flow as a percentage into a currency \\(x\\), across all funds in our universe \\(i\\), for day \\(t\\) We repeat this across all different currencies for the entire history. 5.2.3 Aggregate Flow File Users may create flow percentages for their desired FX aggregations and granularity using the methodology described in the previous section. Users also have the option to use the FX strategy files EPFR provides, which are updated daily and weekly at 5:00 PM est. with a T+1 day lag, and are available in the users EPFR FTP connection under the strategies folder. The FX Strategy files contain aggregate percentage flow data for 37 currencies used in Emerging Market, ACWI, and G10 member countries. For this demonstration, we will be using the file FX-daily.csv, which can be downloaded from the users ftp under the folder Strategies/daily and can be stored in the users local folder EPFR/daily. Below shows a snippet of what this file contains: Strategies/daily/FX-daily.csv ARS AUD BRL CAD CHF CLP CNY CZK EGP GBP HUF IDR ILS INR JPY KRW MXN MYR NOK NZD PEN PHP PLN RUB SEK SGD THB TRY TWD ZAR USD EUR COP PKR MAD VND KWD 20221201 0.0251304 0.0082172 -0.1373853 -0.1685998 -0.0749154 -0.1496563 -0.0299551 -0.0142500 0.1940810 -0.1097745 -0.0322191 -0.0588564 -0.0059505 -0.0307035 -0.0999231 -0.1128431 -0.3022166 -0.0267607 -0.0579933 0.0145115 -0.2640881 0.0138949 -0.0459837 -0.4700456 -0.0866961 -0.0657525 -0.1268418 -0.0919432 -0.0436343 -0.0397615 -0.1795098 0.0267625 -0.5094658 0.6013190 2.3071010 0.3519251 0.0057498 20221202 -0.0189196 -0.0477044 -0.0280137 -0.0162801 -0.0436674 -0.0005091 -0.0053392 0.0151542 0.0139327 -0.0490842 -0.0209156 -0.0181177 -0.0504060 0.0026325 -0.0705267 -0.0038252 -0.0075309 0.0140247 -0.0761146 -0.0218806 -0.0297101 -0.0146237 0.0188773 0.0119875 -0.0313077 -0.0337831 0.0124177 0.0015482 -0.0014203 -0.0017983 0.0170400 -0.0212630 -0.0227956 -0.0002441 0.0355466 -0.0084270 0.0227861 20221205 -0.0405121 0.0223072 0.0825133 0.1970918 0.0255702 0.1293560 0.0388878 -0.0081009 -0.0089899 0.0632370 -0.0453930 0.0085137 0.0098939 0.0254118 0.0610704 0.0949566 0.1953603 0.0212568 0.0640565 0.0225785 0.1029671 0.0226141 -0.0212162 -0.0820496 0.0817224 0.1011997 0.1075311 0.0634204 0.0391413 0.0111771 0.2488875 0.0171486 0.4178865 0.0354057 -0.0018532 -0.0735125 0.0152227 20221206 -0.0722524 0.0192407 0.0169165 0.0381294 -0.0080491 0.0447338 -0.0307030 0.0590366 0.5554795 -0.0076223 -0.1214223 -0.0000285 0.0225150 0.0226381 0.0062134 0.0175863 -0.0225588 0.0460868 0.0327313 0.0168620 0.1035405 0.0792072 0.0465640 -0.0169728 0.0041204 0.0023261 0.0086808 -0.0037956 0.0229292 -0.0052343 0.0433953 0.0001183 0.3052588 1.8219575 7.0273402 1.0988859 0.0704390 20221207 -0.0679314 -0.1390638 -0.0752719 -0.0550551 -0.1040736 -0.0843923 -0.0178634 0.0880821 0.0449727 -0.0993927 -0.1257820 -0.0214412 -0.1445187 -0.0116774 -0.1146126 0.0033991 -0.0753252 -0.0691352 -0.1231335 -0.1040983 0.0182855 -0.0311994 -0.0751914 -0.4199145 -0.1467774 -0.0663596 -0.0526361 -0.1508091 -0.0370784 -0.1275912 0.0042921 -0.0918629 -0.0744702 0.3631424 1.1335628 0.3172670 -0.0984450 20221208 -0.0810127 0.0478228 0.0692034 -0.1242338 -0.3977378 0.0964116 -0.0106621 0.0318467 0.2019312 -0.1946186 0.0370493 0.0070366 -0.1104191 -0.0141156 -0.1839389 -0.0739677 0.0335682 -0.0297606 0.0657735 0.0762325 -0.1601713 0.0033812 0.1680757 -0.0034110 -0.0884723 -0.0563257 -0.0085899 0.0528167 -0.0601620 0.0638294 -0.0471382 -0.2042677 0.1013237 0.4685088 1.6374453 0.4505433 0.0260904 For convince save the path to the flow file you choose to use as flow.file, example shown below: flow.file &lt;- &quot;C:\\\\EPFR\\\\daily\\\\FX-daily.csv&quot; 5.2.4 Return File The return file for this strategy should contain daily spot or forward rates for each of the currencies in the flow file, over the period of time the user wants to backtest. The user can choose to use spot rate data found with their own resources, or they have the option to use spot rate files EPFR provides, which is available in the users EPFR FTP connection under the Returns folder( 11.1 ). For this demonstration, we will be using the file ExchRates-daily.csv, which can be downloaded from the users ftp under the folder Returns/daily and can be stored in the users local folder EPFR/returns. Below shows a snippet of what this file contains: Returns/daily/ExchRates-daily.csv XDR AUD EGP INR MXN NZD QAR TRY ZAR ARS BRL EUR IDR KRW NOK PHP SEK CAD CHF CLP HUF JPY PEN RUB TWD CNY CZK GBP ILS MYR PLN SGD THB JOR PKR MAD COP CNH VND KWD 20221201 1.32086 1.4681 24.5607 81.2213 19.1509 1.5717 3.6412 18.6334 17.6574 167.7258 5.1916 0.9506 15563 1299.40 9.7317 56.195 10.3045 1.3432 0.9371 880.05 391.77 135.33 3.8280 118.6895 30.624 7.0534 23.1727 0.8165 3.3931 4.4070 4.4581 1.3535 34.980 NA 223.6846 10.5894 4765.75 7.0385 24518 0.30755 20221202 1.32836 1.4727 24.5607 81.3175 19.4001 1.5622 3.6412 18.6392 17.5052 168.0862 5.2190 0.9492 15428 1300.20 9.7780 55.765 10.3235 1.3468 0.9372 883.60 389.52 134.31 3.8380 118.6895 30.589 7.0535 23.1248 0.8143 3.4144 4.3883 4.4403 1.3516 34.765 NA 223.6223 10.5480 4776.65 7.0210 24477 0.30755 20221205 1.33016 1.4930 24.5623 81.7975 19.7548 1.5831 3.6412 18.6359 17.4239 169.1496 5.2830 0.9532 15468 1292.65 9.9484 56.025 10.4152 1.3588 0.9426 895.92 394.20 136.75 3.8570 118.6895 30.450 6.9625 23.1662 0.8204 3.4053 4.3685 4.4901 1.3576 34.765 NA 223.8291 10.5802 4839.85 6.9750 24001 0.30635 20221206 1.32609 1.4952 24.5650 82.6100 19.7710 1.5816 3.6411 18.6334 17.3365 169.4926 5.2379 0.9554 15618 1319.15 10.0242 55.982 10.4154 1.3653 0.9420 879.28 392.33 137.00 3.8350 118.6895 30.634 6.9950 23.2428 0.8242 3.4292 4.3950 4.4807 1.3590 35.050 NA 224.0537 10.5870 4834.00 6.9807 24033 0.30685 20221207 1.32372 1.4871 24.5921 82.4800 19.6764 1.5737 3.6411 18.6417 17.1622 169.8889 5.2164 0.9518 15638 1321.75 10.0237 55.470 10.3882 1.3653 0.9408 866.66 391.15 136.62 3.8224 118.6895 30.655 6.9700 23.1137 0.8195 3.4355 4.3970 4.4640 1.3554 35.097 NA 224.1791 10.5754 4827.99 6.9619 23962 0.30700 20221208 1.32531 1.4772 24.5800 82.4325 19.6301 1.5680 3.6411 18.6419 17.1659 169.8889 5.2169 0.9473 15621 1318.05 9.9658 55.470 10.3329 1.3595 0.9370 866.66 395.75 136.67 3.8224 118.6895 30.695 6.9674 23.0138 0.8174 3.4311 4.4015 4.4357 1.3536 34.833 NA 224.1841 10.5428 4827.99 6.9613 23915 0.30690 For convince save the path to the return file you choose to use as ret.file, example shown below: ret.file &lt;- &quot;C:\\\\EPFR\\\\returns\\\\ExchRates-daily.csv&quot; 5.3 Strategy Implementation The final step is implementing this strategy to create a signal. Lets begin by reading in the flow and return files to our R studio work space. x &lt;- mat.read(flow.file) # GET FLOW PERCENTAGE &quot;C:\\\\EPFR\\\\daily\\\\FX-daily.csv&quot; y &lt;- 1/mat.read(ret.file) # GET EXCHANGE RATES &quot;C:\\\\EPFR\\\\returns\\\\ExchRates-daily.csv&quot; One of our first options is choosing the universe we want to use. EPFR has tested this signal within three different universes of countries ACWI (All Country World Index), G10 (ten of the most heavily traded currencies), EM (Emerging Markets). For this example, we choose ACWI, which includes 52 countries and 37 currencies. idx &lt;- &quot;ACWI&quot; # ACWI/G10/EM Whenever the spot for Chinese currency CNH is N/A, we fill any gaps with spot rates for Chinese currency CNY. y$CNY &lt;- ifelse(is.na(y$CNH), y$CNY, y$CNH) # USE CNH WHENEVER POSSIBLE We must also add a column for the U.S. Dollar (USD) to ensure that we can trade this currency when necessary. Since at this stage of the analysis, all other currencies spot rates are presented against the USD, set the USD spot to 1 across time. y$USD &lt;- rep(1, dim(y)[1]) # ADD IN USD Depending on what universe \\(idx\\) the user chooses to test, the flow file \\(x\\) and return file \\(y\\) must both be subset to the correct currencies. Running the code below, which calls from functions contained in library('EPFR'), helps identify every member that was included the selected universe during the period over which we are backtesting. idx.curr &lt;- unique(Ctry.info(Ctry.msci.members(idx, &quot;&quot;), &quot;Curr&quot;)) # CURRENCY CLASSIFICATION 2016 if (idx != &quot;G10&quot;) idx.curr &lt;- union(Ctry.info(Ctry.msci(idx)[, &quot;CCODE&quot;], &quot;Curr&quot;), idx.curr) else idx &lt;- NULL # CAPTURE INDEX CHANGES if (is.element(&quot;EM&quot;, idx)) idx.curr &lt;- setdiff(idx.curr, c(&quot;USD&quot;, &quot;EUR&quot;)) # ENSURE NO OVERLAP BETWEEN DEVELOPED AND EM CURRENCIES x &lt;- x[, is.element(dimnames(x)[[2]], idx.curr)] # SUBSET TO CURRENCIES OF INTEREST Next we will need to ensure that the data structure in \\(x\\) and \\(y\\) are completely aligned, having the same column names in the same order. Below we will subset the columns of \\(y\\) to use the same currencies, in the same order as \\(x\\). In this step, we will also divide each exchange rate by the historical USD/SDR spot. This resets the base currency away from the dollar and allows our backtests to include this currency in portfolio returns. y &lt;- y[, dimnames(x)[[2]]]/y[, &quot;XDR&quot;] # CURRENCIES OF INTEREST ON AN SDR BASE (OTHERWISE &lt;get.fwdRet&gt; THINKS THE USD NEVER TRADES!) * Note: subsetting can be also be done when creating the flow and return files 5.3.1 Compounding Flows Next, we set up a variable for our look-back period, which can also be called a flow window. This variable will be the window of time we use to create a trailing compounded daily percentage flow. The look-back period we choose for our demonstrations is 20 days. lookback &lt;- 20 # FLOW WINDOW (IN WEEKDAYS) - 20 day look back period Using a function from the library('EPFR.r'), compound.flows() compounds our daily percentage flow over the trailing lookback period for each currency. x &lt;- compound.flows(x, lookback, F) # COMPOUND FLOWS ARS AUD BRL CAD CHF CLP CNY CZK EGP GBP HUF IDR ILS INR JPY KRW MXN MYR NOK NZD PEN PHP PLN RUB SEK SGD THB TRY TWD ZAR USD EUR COP PKR MAD VND KWD 20221201 -0.5940234 0.3657387 0.4224990 0.4808457 -0.1104243 0.7288517 0.5368734 1.2073799 2.172433 -0.2525826 0.6709283 0.3157191 0.1549135 0.7480240 0.0830883 0.5472824 0.1438829 1.2508022 0.1516190 0.6233808 0.6989874 1.2429050 1.0089310 -0.3533873 -0.1242647 0.0363202 0.7638555 1.0299772 0.8224584 0.9616983 0.2340294 -0.2956698 0.7990553 4.993004 19.03328 2.872918 1.3832349 20221202 -0.6018448 0.2792255 0.3352712 0.3530235 -0.1782489 0.6642326 0.5487682 1.1900412 2.108605 -0.3305223 0.5568988 0.3119253 0.0300507 0.7260748 -0.0464898 0.5063724 0.0895826 1.1742892 0.0380753 0.5548919 0.5469424 1.1683882 0.9636947 -0.6705598 -0.1585176 -0.0163002 0.7206426 0.9597821 0.7769506 0.8975888 0.2407246 -0.3160371 0.7286986 4.795951 19.08983 2.902651 1.2998187 20221205 -0.6160456 0.1724398 0.2548420 0.4085384 -0.2302423 0.6119402 0.4214132 0.9716324 1.935081 -0.3257607 0.3568259 0.1489173 -0.0332946 0.5683554 -0.0782973 0.3958889 0.1438615 0.9805594 0.0425980 0.4628725 0.3995123 0.9963927 0.7092462 -0.7832803 -0.1649645 -0.0214380 0.6369698 0.8515274 0.6291915 0.7083653 0.3859377 -0.3391601 0.9768418 4.826099 19.05836 2.821159 1.1056957 20221206 -0.7007855 0.2299679 0.1912819 0.4133465 -0.1920437 0.5767637 0.3639880 0.9784491 2.506006 -0.2902201 0.1991608 0.1311528 0.0457574 0.5500984 -0.0182475 0.3706797 0.0387214 0.9773771 0.1009406 0.5108701 0.3970704 1.0194096 0.7023463 -0.7908906 -0.1244939 0.0141360 0.6079116 0.7933953 0.6100951 0.6587183 0.4078085 -0.2624574 1.1987567 6.736285 27.46648 4.050283 1.1218599 20221207 -0.7913361 0.0621649 0.0337343 0.3036316 -0.3297991 0.4167141 0.3012657 0.9721833 2.479338 -0.4188398 0.0056754 0.0761375 -0.1363917 0.4779639 -0.1626054 0.3087572 -0.1062535 0.8079657 -0.0491937 0.3828041 0.2581603 0.9155333 0.5307903 -1.2414975 -0.3010304 -0.0668150 0.4585935 0.5410927 0.4917310 0.4442067 0.3851289 -0.4016989 1.0400281 7.133620 28.80945 4.396673 0.9213861 20221208 -0.8418411 0.0746834 0.0975710 0.1825067 -0.6963594 0.4959507 0.2903070 0.9949993 2.732097 -0.5799311 0.0722522 0.0902998 -0.2832261 0.4579744 -0.3692697 0.2152557 -0.0728351 0.7463247 0.0600291 0.3366798 0.0905773 0.8908209 0.6759885 -1.2450530 -0.3826158 -0.1471434 0.4334176 0.5789301 0.3977577 0.4806812 0.3612104 -0.5992051 1.1689154 7.590067 30.60849 4.876754 0.9344611 5.3.2 Ranking Currencies Next, we sort each of the currencies in our universe into five equal bins based on their compounded percentage flow values for the selected holding period. To do this, we will use the function from library('EPFR.r'), called bbk(). This function will output a standardized backtest result. The bbk() function requires our daily percentage flow data compounded over a desired period, exchange rate data, and our selected universe. Please refer to the library documentation for the complete list of parameters of this function (tip: ?bbk()). The first parameter we add is the number of bins we want to use. For our case, we want to use 5 because our strategy is to go long the top fifth and short the bottom fifth. nBin &lt;- 5 # NUMBER OF BINS Since EPFR data is published with T+1 day lag and is released around 5:00 pm EST, we account for a T+2 day delay in our model. Users interested in more timely signals can also use the T+2 open prices for backtesting purposes. Alternatively, EPFRs Premium Daily offering collects an earlier release of end-of-day data which includes a significant subset of its original fund-level flow information. delay &lt;- 2 # DELAY IN KNOWING DATA (IN WEEKDAYS) - data takes time to have It is also important to note that this model will need to be re-balanced weekly. The day of the week the rebalancing occurs is at the discretion of the user. For this example we will set the day of the week to trade as Friday. doW &lt;- 5 # DAY OF THE WEEK YOU WILL TRADE ON (5 = FRIDAYS) Additionally, we also evaluate the returns for different holding periods. The user can input return horizons that they are interested in here. For this example we define a return horizon for weekly, fortnightly, monthly, bi-monthly, quarterly, and semi-annual rebalancing. hz &lt;- c(5, 10, 20, 45, 65, 130) # RETURN HORIZON (IN WEEKDAYS) - holding periods Now that we have defined all of our inputs, to rank the currencies into quintiles by their 20-day percentage flow, we call function bbk() for a 1-week holding period. By adding the selected backtesting universe as an input to the function, we can ensure that the model tracks additions and removals of currencies over time, and is therefore able to identify all members on a point-in-time basis. z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, idx) 5.3.3 Model Twenty-day flow percentage ranked into quintiles (computed only where forward returns are available) z[[&quot;bins&quot;]] ARS AUD BRL CAD CHF CLP CNY CZK EGP GBP HUF IDR ILS INR JPY KRW MXN MYR NOK NZD PEN PHP PLN RUB SEK SGD THB TRY TWD ZAR USD EUR COP PKR MAD VND KWD 20221230 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 20221223 NA 3 4 2 5 2 3 1 1 5 5 3 4 3 4 3 5 1 4 3 4 1 2 NA 5 4 2 2 3 2 NA 5 1 NA NA NA 1 20221216 NA 3 4 2 5 2 3 1 1 5 5 4 4 2 4 3 5 1 4 3 4 1 2 NA 5 4 2 2 3 3 2 5 1 NA NA NA 1 20221209 NA 4 4 3 5 2 3 1 1 5 4 4 5 2 5 3 4 1 4 3 3 1 2 NA 5 4 2 2 2 2 3 5 1 NA NA NA 1 20221202 NA 4 4 3 5 2 3 1 1 5 3 4 5 3 4 3 4 1 4 3 2 1 2 NA 5 5 2 2 2 2 4 5 1 NA NA NA 1 Quintile Returns over the equal-weight universe z[[&quot;rets&quot;]] Q1 Q2 Q3 Q4 Q5 TxB uRet 20221230 NA NA NA NA NA NA NaN 20221223 -0.6773156 0.1876951 0.3914613 -0.1935814 0.2264971 -0.9038127 0.3502183 20221216 -0.2285290 0.0173119 0.1991964 0.2014266 -0.2258623 -0.0026668 0.6364195 20221209 0.3103277 -0.5951894 -0.0661117 0.4634301 -0.0904968 0.4008245 -0.1902268 20221202 0.2504880 0.7269355 -0.3562323 -0.7883338 0.1773757 0.0731123 -0.1915118 Def: TxB represents summary statistics for the long short portfolio (top - bottom = Q1 - Q5 = overall portfolio returns) 5.3.4 Performance Performance over all holding periods fcn &lt;- function(retW) {as.matrix(bbk(x, y, 1, retW, nBin, doW, T, 0, delay, idx)$summ)} # DEFINE SUMMARY FUNCTION sapply(split(hz, hz), fcn, simplify = &quot;array&quot;) # WRITE SUMMARIES Q1 Q2 Q3 Q4 Q5 TxB uRet Bi-Monthly AnnMn 1.261404e+00 -2.157080e-02 4.057833e-01 -6.602118e-01 -9.427825e-01 2.204186e+00 -3.171495e+00 AnnSd 3.231979e+00 2.694374e+00 2.919752e+00 3.311168e+00 3.587733e+00 5.664822e+00 1.102610e+01 Sharpe 3.885256e+01 1.557213e-01 1.443586e+01 -2.070644e+01 -2.664527e+01 3.875795e+01 -2.889470e+01 HitRate 4.583160e+00 9.918158e-01 3.978360e+00 -3.717575e-01 -8.725205e-01 4.211402e+00 -3.981135e+00 Beta -5.885330e-02 -3.555990e-02 -1.871850e-02 3.551410e-02 7.135700e-02 -1.302103e-01 1.000000e+00 Alpha 1.075781e+00 -1.376131e-01 3.463199e-01 -5.434969e-01 -7.185247e-01 1.794306e+00 0.000000e+00 DrawDn -7.946910e+00 -1.043619e+01 -1.209756e+01 -2.117505e+01 -2.236001e+01 -1.112336e+01 -7.351966e+01 DDnBeg 2.017845e+07 2.009163e+07 2.008412e+07 2.010976e+07 2.008756e+07 2.014844e+07 2.011062e+07 DDnN 1.200000e+01 4.188889e+01 3.388889e+01 5.266667e+01 7.044444e+01 1.355556e+01 6.566667e+01 AnnTo 3.449731e+02 4.241153e+02 4.328166e+02 4.327341e+02 3.648577e+02 7.098308e+02 0.000000e+00 Fortnightly AnnMn 2.404865e+00 -4.045789e-01 -1.127589e-01 -6.144977e-01 -1.206870e+00 3.611734e+00 -3.059605e+00 AnnSd 3.454990e+00 2.976455e+00 3.197217e+00 3.436156e+00 3.695123e+00 5.893417e+00 1.014104e+01 Sharpe 6.964448e+01 -1.354290e+01 -3.856717e+00 -1.788162e+01 -3.317064e+01 6.199900e+01 -3.017049e+01 HitRate 4.366626e+00 -5.549437e-01 9.228889e-01 1.660897e+00 -7.970129e-01 4.119715e+00 -5.543385e-01 Beta -1.378720e-02 -3.517580e-02 -7.601310e-02 2.993460e-02 8.886250e-02 -1.026497e-01 1.000000e+00 Alpha 2.362811e+00 -5.122667e-01 -3.452805e-01 -5.230929e-01 -9.349623e-01 3.297773e+00 0.000000e+00 DrawDn -8.451962e+00 -1.661653e+01 -1.052911e+01 -2.750690e+01 -2.708991e+01 -1.614894e+01 -7.686401e+01 DDnBeg 2.019562e+07 2.008525e+07 2.007621e+07 2.011017e+07 2.008048e+07 2.019062e+07 2.011058e+07 DDnN 4.200000e+01 1.615000e+02 1.645000e+02 2.745000e+02 3.200000e+02 6.150000e+01 2.960000e+02 AnnTo 8.806033e+02 1.486833e+03 1.583674e+03 1.574182e+03 9.895617e+02 1.870165e+03 0.000000e+00 Monthly AnnMn 2.215553e+00 -2.707355e-01 3.680402e-01 -1.040887e+00 -1.162356e+00 3.377910e+00 -3.023782e+00 AnnSd 3.416454e+00 2.795658e+00 3.057326e+00 3.414131e+00 3.698440e+00 5.980613e+00 1.054423e+01 Sharpe 6.507292e+01 -9.864884e+00 1.191727e+01 -3.037250e+01 -3.202729e+01 5.702012e+01 -2.869747e+01 HitRate 6.472224e+00 -5.791840e-02 2.902624e+00 -6.279570e-02 -1.294932e+00 4.500561e+00 -1.912525e+00 Beta -3.547550e-02 -3.241860e-02 -5.196250e-02 3.061450e-02 8.259140e-02 -1.180669e-01 1.000000e+00 Alpha 2.107493e+00 -3.688622e-01 2.104164e-01 -9.477352e-01 -9.118019e-01 3.019294e+00 0.000000e+00 DrawDn -9.233374e+00 -1.561330e+01 -1.090424e+01 -2.757958e+01 -2.491821e+01 -1.481861e+01 -7.578729e+01 DDnBeg 2.018557e+07 2.007819e+07 2.008099e+07 2.012289e+07 2.007584e+07 2.019282e+07 2.011055e+07 DDnN 3.675000e+01 1.522500e+02 7.500000e+01 1.120000e+02 1.650000e+02 3.250000e+01 1.485000e+02 AnnTo 6.547735e+02 9.057368e+02 9.389678e+02 9.143318e+02 7.320486e+02 1.386822e+03 0.000000e+00 Quarterly AnnMn 1.266628e+00 1.852395e-01 1.498825e-01 -6.422345e-01 -9.312212e-01 2.197849e+00 -3.305833e+00 AnnSd 3.036370e+00 2.673224e+00 2.828424e+00 3.325521e+00 3.655562e+00 5.474949e+00 1.116282e+01 Sharpe 4.127974e+01 6.923876e+00 6.687555e+00 -1.930176e+01 -2.541446e+01 4.034170e+01 -2.968738e+01 HitRate 7.326201e+00 7.464508e-01 1.138999e+00 -6.203474e-01 -2.493593e+00 6.337713e+00 -7.381117e+00 Beta -6.333580e-02 -2.957150e-02 -1.683710e-02 1.500240e-02 9.102820e-02 -1.543640e-01 1.000000e+00 Alpha 1.059036e+00 8.584860e-02 9.186330e-02 -5.894645e-01 -6.308869e-01 1.689923e+00 0.000000e+00 DrawDn -7.690780e+00 -1.074578e+01 -1.229296e+01 -2.073679e+01 -2.152992e+01 -9.840183e+00 -7.133184e+01 DDnBeg 2.014820e+07 2.009745e+07 2.010066e+07 2.010227e+07 2.008844e+07 2.014825e+07 2.010832e+07 DDnN 9.923077e+00 2.038462e+01 2.100000e+01 3.884615e+01 4.738462e+01 7.000000e+00 4.638462e+01 AnnTo 2.570414e+02 3.057118e+02 3.014108e+02 3.055701e+02 2.654163e+02 5.224576e+02 0.000000e+00 Semi-Annual AnnMn 9.728945e-01 4.816402e-01 -1.109127e-01 -3.176429e-01 -9.955238e-01 1.968418e+00 -3.387096e+00 AnnSd 3.088370e+00 2.708802e+00 2.769967e+00 3.121724e+00 3.434315e+00 5.338550e+00 1.178365e+01 Sharpe 3.113514e+01 1.843206e+01 -4.153308e+00 -9.402199e+00 -3.133533e+01 3.795634e+01 -2.887610e+01 HitRate 8.407775e+00 4.966915e+00 -1.095947e+00 9.636063e-01 -4.631927e+00 8.598015e+00 -9.871795e+00 Beta -4.703120e-02 -2.513980e-02 -1.064920e-02 1.362440e-02 6.743930e-02 -1.144704e-01 1.000000e+00 Alpha 8.242489e-01 3.889235e-01 -1.548225e-01 -2.642337e-01 -7.694346e-01 1.593684e+00 0.000000e+00 DrawDn -6.768102e+00 -8.683426e+00 -1.219445e+01 -1.688422e+01 -2.163873e+01 -1.183829e+01 -6.740777e+01 DDnBeg 2.013024e+07 2.010107e+07 2.008460e+07 2.010916e+07 2.010690e+07 2.011366e+07 2.010597e+07 DDnN 4.538462e+00 8.692308e+00 1.611538e+01 1.630769e+01 1.938462e+01 4.807692e+00 2.365385e+01 AnnTo 1.349677e+02 1.556686e+02 1.563780e+02 1.572340e+02 1.458187e+02 2.807864e+02 0.000000e+00 Weekly AnnMn 2.737435e+00 -3.316419e-01 -4.731350e-01 1.951760e-02 -1.828960e+00 4.566395e+00 -3.043073e+00 AnnSd 3.554779e+00 3.039682e+00 3.331770e+00 3.788347e+00 3.836959e+00 6.035837e+00 9.843136e+00 Sharpe 7.700719e+01 -1.091042e+01 -1.420071e+01 5.152022e-01 -4.766692e+01 7.565472e+01 -3.091568e+01 HitRate 4.545454e+00 1.228501e-01 0.000000e+00 -1.228501e-01 -9.828010e-01 3.685504e+00 -2.579853e+00 Beta -4.711100e-03 -5.305080e-02 -6.272360e-02 2.025100e-02 9.803560e-02 -1.027468e-01 1.000000e+00 Alpha 2.723099e+00 -4.930795e-01 -6.640073e-01 8.114280e-02 -1.530630e+00 4.253729e+00 0.000000e+00 DrawDn -8.927208e+00 -1.636911e+01 -1.451313e+01 -1.825955e+01 -3.627532e+01 -1.184978e+01 -7.766718e+01 DDnBeg 2.019083e+07 2.008102e+07 2.007101e+07 2.013071e+07 2.008052e+07 2.019082e+07 2.011043e+07 DDnN 9.800000e+01 5.950000e+02 4.850000e+02 3.800000e+02 7.490000e+02 1.080000e+02 5.980000e+02 AnnTo 1.143945e+03 2.270703e+03 2.508588e+03 2.428583e+03 1.301065e+03 2.445010e+03 0.000000e+00 Annualized mean one-week returns bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, idx)$annSumm # DISPLAY CALENDAR-YEAR RETURNS Q1 Q2 Q3 Q4 Q5 TxB uRet nPrds 2007 -7.8360034 0.7784924 -1.4774981 2.3996230 6.1353861 -13.9713895 16.0985100 31 2008 4.6375210 -1.6014541 -0.6020764 0.8319950 -3.2659855 7.9035065 -13.1533701 52 2009 1.5601528 0.4728078 -0.2398714 -2.0667256 -0.4248972 1.9850500 10.2375370 52 2010 1.5754798 -3.3674781 -2.0555851 7.1616423 -2.7720355 4.3475154 2.9512123 53 2011 7.0131670 -4.6978445 1.2435742 0.1744792 -4.3795708 11.3927378 -4.1065988 52 2012 1.7869536 0.2928114 -3.1586101 2.9275709 -1.3886712 3.1756248 3.4833257 52 2013 5.7106674 -1.5637326 -0.5121886 -3.5315647 -0.4958326 6.2065001 -4.9124563 52 2014 7.1731441 1.6506633 -0.7707926 -1.4234973 -6.6673785 13.8405226 -16.2172346 52 2015 7.8482385 -0.2984466 -1.8293253 -4.9756229 0.1341678 7.7140707 -14.6408438 52 2016 4.6023613 0.0341821 -4.1909022 -0.6751532 0.4215097 4.1808516 -6.0898082 53 2017 2.8555923 -0.9374345 1.9506039 -2.1033874 -1.5728443 4.4284367 12.5654405 52 2018 3.1978511 0.5139022 0.5724439 -0.6389634 -3.6630997 6.8609507 -9.3094558 52 2019 -0.7877788 -1.7878981 2.2889560 1.2438881 -1.0945793 0.3068004 -0.9546108 52 2020 -2.9491378 2.3086817 1.6519839 -3.2017083 2.3657727 -5.3149105 4.7790869 52 2021 -1.6253314 0.3714917 -0.3979036 6.5067803 -4.0215014 2.3961699 -8.2316355 53 2022 4.8364258 3.0111329 -0.3480962 -1.6046218 -5.3404069 10.1768327 -13.4149139 52 "],["flow-percentage-country-strategy.html", "6 Flow-Percentage Country Strategy 6.1 Overview 6.2 Data 6.3 Strategy Implementation", " 6 Flow-Percentage Country Strategy 6.1 Overview The Flow-Percentage Country Strategy is an equity based rotation strategy, which ranks different countries across a customized universe of both developed and emerging markets. This approach uses the stated allocations of equity funds with a cross-border focus and calculates percentage flow into countries. 6.2 Data The Flow-Percentage Country Strategy developed by EPFR Global is based on percentage flow into countries. In this section, the reader will gain an understanding of the aggregations which can be used to create a signal as well as the methodology behind daily percentage flow calculations. 6.2.1 Aggregations The first step is defining a subset of data to capture in calculating our signal. This strategy requires; Equity funds with a cross-border focus. These are essentially any fund that has a mandate spanning more than one country. The vast majority of these will be global and regional funds. Funds must report both daily flows and country allocations, since these values are needed to calculate Daily Percentage Flow. Cross-border equity funds, which report their country allocations and their daily fund flows, are a subset of those that only report their fund flows to EPFR. The figure below shows EPFRs coverage of this universe over time compared to our total monthly and daily coverages. Updated at the end of July each year Users looking for more specific detail can customize this aggregation even further using EPFRs fund-level or share class-level granularity. Some good examples would be to consider only active, passive, ETFs or mutual funds, or only institutional or retail share class flows and assets. Users can leverage these tags to different degrees in creating aggregated signals to backtest. Further detail about this is available in section 3. This can be achieved using fund-level flow and allocation files or by reaching out to EPFRs quant team for customized aggregations. 6.2.2 Daily Percentage Flow To begin calculating Daily Percentage flow, we start with our subset of cross-border equity funds. To calculate the the dollar flow into a country, we scale a funds flow by multiplying it against its stated country allocation, on that day. We apply the same procedure to all funds with fund flow and country allocation information and then sum the flows for each country across all funds, to get the total dollar flow into a country. EPFR releases country allocations of all funds on the \\(23^{\\text{rd}}\\) of each month (or the next available business day) at a monthly frequency. Hence, our calculation assumes constant country weightings between two consecutive release dates within the month. \\[\\text{Total Flow}_{c,t} = \\sum^{N}_{i=m}{\\text{Flow}_{i,c,t} \\times \\text{Country Allocation}_{i,c}}\\] Where: \\(\\text{Total Flow}\\) = the total dollar flow into a country \\(c\\), across all funds in our universe \\(i\\), for day \\(t\\) We will want to normalize this figure. So, we repeat the process across the same funds Assets held under Management (AuM), to get the total AuM held in a country. \\[\\text{Total AuM}_{c,t} = \\sum^{N}_{i=m}{\\text{AuM}_{i,c,t} \\times \\text{Country Allocation}_{i,c}}\\] Where: \\(\\text{Total AuM}\\) = the total assets held in a country \\(c\\), across all funds in our universe \\(i\\), for day \\(t\\) Finally, to find the daily percentage flow for a country, we divide the total flow by the total AuM held in a country. \\[\\text{Percentage Flow}_{c,t} = \\frac{\\text{Total Flow}_{c,t}}{\\text{Total AuM}_{c,t}}\\] Where: \\(\\text{Percentage Flow}\\) = the scaled flow as a percentage into a country \\(c\\), across all funds in our universe \\(i\\), for day \\(t\\) We repeat this across all different countries for the entire history. 6.2.3 Aggregate Flow File Users may create flow percentages for their desired country aggregations and granularity using the methodology described in the previous section. Users also have the option to use the Flow-Percentage Country Strategy files EPFR provides, which are updated daily at 5:00 PM est. with a T+1 day lag, and are available in the users EPFR FTP connection under the strategies folder. There are two different types of Flow-Percentage Country Strategy files available, the standard option we have contains aggregate percentage flow data for 53 countries in the ACWI, EAFE and Emerging Market country universe. The other file available only contains Emerging and Developed Market (EMDM) aggregate percentage flow data. For this demonstration, we will be using the file FloPctCtry-daily.csv, which can be downloaded from the users ftp under the folder Strategies/daily and can be stored in the users local folder EPFR/daily. Below shows a snippet of what this file contains: Strategies/daily/FloPctCtry-daily.csv AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US JO MA PK AE QA SA KW 20221201 0.0082172 -0.1373853 -0.1685998 -0.0299551 -0.0588564 -0.0307035 -0.0999231 -0.1128431 -0.3022166 -0.0267607 0.0138949 -0.4700456 -0.0657525 -0.1268418 -0.0919432 -0.0436343 -0.0397615 0.0251304 -0.1496563 -0.5094658 -0.0142500 0.1940810 -0.0322191 -0.0059505 0.0145115 -0.0579933 -0.2640881 -0.0459837 -0.0866961 -0.0749154 -0.1097745 0.0813068 -0.2054332 -0.0196845 0.0941430 0.0048852 0.0567956 0.0453213 -0.0052570 0.0563133 0.0551750 0.0134235 0.0642768 -0.1867222 -0.1897228 0.1893650 2.3071010 0.6013190 -0.0268271 -0.0213599 -0.0241962 0.0057498 20221202 -0.0477044 -0.0280137 -0.0162801 -0.0053392 -0.0181177 0.0026325 -0.0705267 -0.0038252 -0.0075309 0.0140247 -0.0146237 0.0119875 -0.0337831 0.0124177 0.0015482 -0.0014203 -0.0017983 -0.0189196 -0.0005091 -0.0227956 0.0151542 0.0139327 -0.0209156 -0.0504060 -0.0218806 -0.0761146 -0.0297101 0.0188773 -0.0313077 -0.0436674 -0.0490842 0.0379807 0.0019978 -0.0377601 -0.0094423 -0.0129547 -0.0313622 -0.0093106 -0.0242845 -0.0250811 -0.0300145 -0.0413764 -0.0073068 -0.0353648 0.0210618 -0.1964602 0.0355466 -0.0002441 0.0066170 0.0128726 0.0119270 0.0227861 20221205 0.0223072 0.0825133 0.1970918 0.0388878 0.0085137 0.0254118 0.0610704 0.0949566 0.1953603 0.0212568 0.0226141 -0.0820496 0.1011997 0.1075311 0.0634204 0.0391413 0.0111771 -0.0405121 0.1293560 0.4178865 -0.0081009 -0.0089899 -0.0453930 0.0098939 0.0225785 0.0640565 0.1029671 -0.0212162 0.0817224 0.0255702 0.0632370 0.0144565 0.2081413 0.0091668 -0.0147028 0.0294817 0.0070184 0.0215880 -0.0162663 0.0103360 0.0100211 -0.0529251 -0.0074901 0.2486099 0.2656250 0.0190637 -0.0018532 0.0354057 0.0039361 -0.0033072 0.0014794 0.0152227 20221206 0.0192407 0.0169165 0.0381294 -0.0307030 -0.0000285 0.0226381 0.0062134 0.0175863 -0.0225588 0.0460868 0.0792072 -0.0169728 0.0023261 0.0086808 -0.0037956 0.0229292 -0.0052343 -0.0722524 0.0447338 0.3052588 0.0590366 0.5554795 -0.1214223 0.0225150 0.0168620 0.0327313 0.1035405 0.0465640 0.0041204 -0.0080491 -0.0076223 0.0097317 -0.0155778 0.0100643 0.0079297 -0.0044997 -0.0047326 -0.0158246 -0.0078131 0.0175245 0.0105277 -0.0105779 -0.0024051 0.0017378 0.0449389 0.0796408 7.0273402 1.8219575 0.0510315 0.0607994 0.0662449 0.0704390 20221207 -0.1390638 -0.0752719 -0.0550551 -0.0178634 -0.0214412 -0.0116774 -0.1146126 0.0033991 -0.0753252 -0.0691352 -0.0311994 -0.4199145 -0.0663596 -0.0526361 -0.1508091 -0.0370784 -0.1275912 -0.0679314 -0.0843923 -0.0744702 0.0880821 0.0449727 -0.1257820 -0.1445187 -0.1040983 -0.1231335 0.0182855 -0.0751914 -0.1467774 -0.1040736 -0.0993927 -0.1099925 -0.1059852 -0.0898489 -0.1267584 -0.0916032 -0.0977398 -0.0515893 -0.0533180 -0.0928605 -0.0841324 -0.0035842 -0.0959443 0.0372996 0.0071908 -0.0704670 1.1335628 0.3631424 -0.0926825 -0.0862161 -0.0585917 -0.0984450 20221208 0.0478228 0.0692034 -0.1242338 -0.0106621 0.0070366 -0.0141156 -0.1839389 -0.0739677 0.0335682 -0.0297606 0.0033812 -0.0034110 -0.0563257 -0.0085899 0.0528167 -0.0601620 0.0638294 -0.0810127 0.0964116 0.1013237 0.0318467 0.2019312 0.0370493 -0.1104191 0.0762325 0.0657735 -0.1601713 0.1680757 -0.0884723 -0.3977378 -0.1946186 0.0742293 0.0242617 -0.1333207 0.0260302 -0.3117769 -0.2567409 0.0925668 -0.3838237 -0.0127299 -0.1071186 -0.0513869 -0.0617630 -0.0247254 -0.0553428 0.1909743 1.6374453 0.4685088 0.0404959 0.0400483 0.0562480 0.0260904 For convince save the path to the flow file you choose to use as flow.file, example shown below: flow.file &lt;- &quot;C:\\\\EPFR\\\\daily\\\\FloPctCtry-daily.csv&quot; 6.2.4 Return File The return file for this strategy should contain daily equity returns for each of the countries in the flow file, over the period of time the user wants to backtest. The user can choose to use return data found with their own resources, or they have the option to use a file EPFR provides of ETF Country Returns, which is available in the users EPFR FTP connection under the Returns folder ( 11.1 ). The Return file that EPFR provides contains Fund Return data and can be used as a proxy to equity market returns. The user can recreate these files using EPFR daily flow data with the following equation: \\[\\text{Fund Return}_{c,t} = 100 \\times \\frac{\\sum^{N}_{i=m} \\text{Portfolio Change}_{i,c,t}}{\\sum^{N}_{i=m} \\text{Assets Start}_{i,c,t}}\\] Where: \\(\\text{Fund Return}\\) = the percentage return of country \\(c\\), across all funds in our universe \\(i\\), for day \\(t\\) For this demonstration, we will be using the file PsuedoReturns-Country-ETF-daily.csv, which can be downloaded from the users ftp under the folder Returns/daily and can be stored in the users local folder EPFR/returns. Below shows a snippet of what this file contains: Returns/daily/PsuedoReturns-Country-ETF-daily.csv AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US MA PK AE QA SA KW 20221201 0.639878 1.099435 0.206938 0.961309 0.209262 0.278897 0.236049 0.941808 0.243454 0.078966 -1.003799 -0.056461 0.060671 0.359373 0.833952 1.590270 -0.019736 NA 0.000000 NA NA NA NA 1.460158 1.354972 0.114432 NA NA 1.328959 0.049575 0.459197 0.033384 0.055091 1.393348 0.146549 0.153531 0.889664 0.000000 1.361392 0.359571 0.343014 -1.128167 0.258613 NA 0.182008 0.000000 NA 0.028754 NA 0.392380 NA 20221202 -0.297498 -0.870197 -0.155840 0.086178 0.135251 -0.339061 -0.636488 -0.626977 -0.440852 0.492881 -2.297409 -0.001056 0.000000 -0.287993 0.224131 -0.131015 -0.240269 NA 0.281021 NA NA NA NA 0.000000 -0.064002 -0.574344 NA NA 0.106059 0.361773 0.007758 -0.014252 0.884860 0.147565 0.986546 0.197010 0.243756 -0.791037 0.000000 0.092043 1.775331 0.000000 0.333099 NA -0.047176 0.478397 NA -0.038485 NA -0.430141 NA 20221205 0.027598 -1.419987 -0.999930 2.916856 -0.464423 -0.866930 -0.834741 -1.500691 -2.657906 -0.376685 -1.608499 -0.069307 0.146607 -0.004905 -0.785869 0.629064 0.418625 NA 0.100846 NA NA NA NA -0.743944 -0.044349 0.244612 NA NA 0.465769 -0.237946 0.049596 0.043177 -0.043428 0.178495 0.423664 -0.200094 -0.154258 0.027891 -0.516426 -0.092575 0.010021 0.031090 0.168973 NA -1.717385 1.023315 NA 0.994566 NA -0.755018 NA 20221206 -0.523578 -1.363815 -0.994175 -0.002342 -2.283814 -0.647964 -0.268249 -2.202720 0.546770 -0.091155 2.645275 -0.040054 -0.278548 -0.191196 -0.071105 -1.892707 -0.332135 NA 0.159119 NA NA NA NA -1.982369 -0.617262 -0.937209 NA NA -0.989035 -0.628273 -0.729927 -0.088816 -0.169727 -1.538215 -0.055850 -0.357724 -0.671632 0.009421 -0.830657 -0.673643 -0.660419 0.008026 -0.247993 NA -1.362890 0.673201 NA -0.657179 NA -1.818742 NA 20221207 -0.635838 0.830894 -0.072498 -1.195727 -0.919476 -0.311144 -0.260906 -0.339339 -0.557236 -0.463594 0.363295 0.000897 0.045349 -0.654741 0.094486 -1.045405 -0.999871 NA 0.000000 NA NA NA NA -1.319733 -0.976027 -1.522487 NA NA -1.390472 -0.687416 -0.527637 -0.178077 -0.566055 -0.484572 -1.234929 -0.436341 -0.970792 0.587028 0.209284 -0.640641 -0.708191 -0.001424 -0.199407 NA -0.248906 0.149240 NA -0.524002 NA -1.475182 NA 20221208 -0.583959 -1.280242 0.060291 1.433236 -0.066556 0.232732 -0.220377 -0.206835 -0.121413 0.055038 -0.453428 0.017514 -0.639465 0.064171 -2.008533 -0.255587 0.066154 NA -0.011035 NA NA NA NA 0.654239 0.250935 0.523129 NA NA 0.025648 -0.041869 -0.436332 0.000000 0.077489 -0.491659 -0.828564 -0.261125 -0.297494 0.523996 0.104546 -0.156790 -0.565428 0.021220 -0.237544 NA 0.620931 -0.148285 NA -0.688749 NA -0.491212 NA For convince save the path to the return file you choose to use as ret.file, example shown below: ret.file &lt;- &quot;C:\\\\EPFR\\\\returns\\\\PsuedoReturns-Country-ETF-daily.csv&quot; 6.3 Strategy Implementation The final step is implementing this strategy to create a signal. Lets begin by reading in the flow and return files to our R studio work space. x &lt;- mat.read(flow.file) # GET FLOW PERCENTAGE C:\\\\EPFR\\\\daily\\\\FloPctCtry-daily.csv y &lt;- mat.read(ret.file) # GET PERCENTAGE RETURNs C:\\\\EPFR\\\\returns\\\\PsuedoReturns-Country-ETF-daily.csv One of our first options is choosing the universe we want to use. EPFR has tested this signal within three different universes of countries ACWI (All Country World Index), EAFE (Europe, Australasia, and the Far East), and EM (Emerging Markets). For this example, we choose ACWI, which includes 52 countries. idx &lt;- &quot;ACWI&quot; Depending on what universe \\(idx\\) the user chooses to test, the flow file \\(x\\) and return file \\(y\\) must both be subset to the correct countries. Running the code below, which calls from functions contained in library('EPFR'), helps identify every member that was included the selected universe during the period over which we are backtesting. x &lt;- x[, is.element(dimnames(x)[[2]], Ctry.msci.members.rng(idx, dimnames(x)[[1]][1], dimnames(x)[[1]][dim(x)[1]]))] # SUBSET TO INDEX COUNTRIES A few other adjustments must also be applied to our daily percentage flows data to ensure that it aligns with returns. First  the internally-generated fund returns are only available with sufficient coverage from the end of 2015 onwards. Second  fund returns for country ISO code JO are unavailable. startdate &lt;- &quot;20150512&quot; x &lt;- x[rownames(x)&gt;=startdate, ] # SUBSET TIME PERIOD x &lt;- x[, !(dimnames(x)[[2]] %in% &quot;JO&quot;)] Next we will need to ensure that the data structure in \\(x\\) and \\(y\\) are completely aligned, having the same column names in the same order. Below we will subset the columns of \\(y\\) to use the same countries, in the same order as \\(x\\). y &lt;- y[, dimnames(x)[[2]]] # TOTAL RETURN INDEX * Note: subsetting can be also be done when creating the flow and return files 6.3.1 Compounding Flows Next, we set up a variable for our look-back period, which can also be called a flow window. This variable will be the window of time we use to create a trailing compounded daily percentage flow. The look-back period we choose for our demonstrations is 20 days. lookback &lt;- 20 # FLOW WINDOW (IN WEEKDAYS) - 20 day look back period Again, using a function from the library('EPFR.r'), compound.flows() compounds our daily percentage flow over the trailing lookback period for each country. x &lt;- compound.flows(x, lookback, F) # COMPOUND FLOWS AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US MA PK AE QA SA KW 20221201 0.3657387 0.4224990 0.4808457 0.5368734 0.3157191 0.7480240 0.0830883 0.5472824 0.1438829 1.2508022 1.2429050 -0.3533873 0.0363202 0.7638555 1.0299772 0.8224584 0.9616983 -0.5940234 0.7288517 0.7990553 1.2073799 2.172433 0.6709283 0.1549135 0.6233808 0.1516190 0.6989874 1.0089310 -0.1242647 -0.1104243 -0.2525826 -0.0648429 -0.5851252 -0.1891037 0.0042294 -0.3867325 -0.2631415 0.8335389 -0.2720995 -0.2816058 -0.3016538 -0.7635916 -0.1538990 -0.2608068 0.2021691 19.03328 4.993004 1.1471616 1.3818455 1.2939687 1.3832349 20221202 0.2792255 0.3352712 0.3530235 0.5487682 0.3119253 0.7260748 -0.0464898 0.5063724 0.0895826 1.1742892 1.1683882 -0.6705598 -0.0163002 0.7206426 0.9597821 0.7769506 0.8975888 -0.6018448 0.6642326 0.7286986 1.1900412 2.108605 0.5568988 0.0300507 0.5548919 0.0380753 0.5469424 0.9636947 -0.1585176 -0.1782489 -0.3305223 0.0727308 -0.5828057 -0.1509296 0.0273668 -0.3884904 -0.3331824 0.7705446 -0.5453546 -0.2345844 -0.3128145 -0.6517184 -0.1853081 -0.2713762 0.2153821 19.08983 4.795951 1.0684084 1.2749777 1.2185201 1.2998187 20221205 0.1724398 0.2548420 0.4085384 0.4214132 0.1489173 0.5683554 -0.0782973 0.3958889 0.1438615 0.9805594 0.9963927 -0.7832803 -0.0214380 0.6369698 0.8515274 0.6291915 0.7083653 -0.6160456 0.6119402 0.9768418 0.9716324 1.935081 0.3568259 -0.0332946 0.4628725 0.0425980 0.3995123 0.7092462 -0.1649645 -0.2302423 -0.3257607 0.0556167 -0.4096780 -0.2586701 -0.0303832 -0.3976363 -0.3451982 0.6475459 -0.5731725 -0.2689440 -0.3455296 -0.7150814 -0.2301144 -0.1244719 0.3838026 19.05836 4.826099 0.8915754 1.0599314 1.0016124 1.1056957 20221206 0.2299679 0.1912819 0.4133465 0.3639880 0.1311528 0.5500984 -0.0182475 0.3706797 0.0387214 0.9773771 1.0194096 -0.7908906 0.0141360 0.6079116 0.7933953 0.6100951 0.6587183 -0.7007855 0.5767637 1.1987567 0.9784491 2.506006 0.1991608 0.0457574 0.5108701 0.1009406 0.3970704 0.7023463 -0.1244939 -0.1920437 -0.2902201 0.0765696 -0.3547143 -0.2022601 0.0213123 -0.3134878 -0.2769903 0.6066405 -0.5284036 -0.1749854 -0.2501154 -0.6410596 -0.1485396 -0.0846835 0.4048652 27.46648 6.736285 0.8998665 1.0616868 1.0051809 1.1218599 20221207 0.0621649 0.0337343 0.3036316 0.3012657 0.0761375 0.4779639 -0.1626054 0.3087572 -0.1062535 0.8079657 0.9155333 -1.2414975 -0.0668150 0.4585935 0.5410927 0.4917310 0.4442067 -0.7913361 0.4167141 1.0400281 0.9721833 2.479338 0.0056754 -0.1363917 0.3828041 -0.0491937 0.2581603 0.5307903 -0.3010304 -0.3297991 -0.4188398 -0.0957277 -0.5090548 -0.2991309 -0.1789525 -0.4510904 -0.4327651 0.5838153 -0.5994066 -0.3279278 -0.3849951 -0.6018392 -0.3045944 -0.0604079 0.3882161 28.80945 7.133620 0.7255044 0.8751273 0.8508713 0.9213861 20221208 0.0746834 0.0975710 0.1825067 0.2903070 0.0902998 0.4579744 -0.3692697 0.2152557 -0.0728351 0.7463247 0.8908209 -1.2450530 -0.1471434 0.4334176 0.5789301 0.3977577 0.4806812 -0.8418411 0.4959507 1.1689154 0.9949993 2.732097 0.0722522 -0.2832261 0.3366798 0.0600291 0.0905773 0.6759885 -0.3826158 -0.6963594 -0.5799311 -0.0241919 -0.4806366 -0.4215687 -0.1488005 -0.7500690 -0.6779237 0.6782364 -0.9602590 -0.3460828 -0.5015269 -0.6577265 -0.3706197 -0.0884993 0.3604298 30.60849 7.590067 0.7544367 0.9050508 0.8959919 0.9344611 6.3.2 Total Return Index We will now convert our percentage returns data \\(y\\) to total index returns indexed so that time moves forward. To do this we will use function ret.to.idx() from library('EPFR.r'). We also use the functions map.rname() to ensure the row names of the matrices line up with our flow file and ret.idx.gaps.fix() to replace any NA values. Please refer to the library documentation for the complete list of parameters for these functions (tip: ?ret.to.idx(),?ret.idx.gaps.fix() ). y[is.na(y)] &lt;- 0 y &lt;- ret.to.idx(map.rname(y, dimnames(x)[[1]])) # CONVERT TO A TOTAL-RETURN INDEX y &lt;- ret.idx.gaps.fix(y) 6.3.3 Ranking Countries Next, we sort each of the countries in our universe into five equal bins based on their compounded percentage flow values for the selected holding period. To do this, we will use the function from library('EPFR.r'), called bbk(). This function will output a standardized backtest result. The bbk() function requires our daily percentage flow data compounded over a desired period, total return index data, and our selected universe. Please refer to the library documentation for the complete list of parameters of this function (tip: ?bbk()). The first parameter we add is the number of bins we want to use. For our case, we want to use 5 because our strategy is to go long the top fifth and short the bottom fifth. nBin &lt;- 5 # NUMBER OF BINS Since EPFR data is published with T+1 day lag and is released around 5:00 pm EST, we account for a T+2 day delay in our model. Users interested in more timely signals can also use the T+2 open prices for backtesting purposes. Alternatively, EPFRs Premium Daily offering collects an earlier release of end-of-day data which includes a significant subset of its original fund-level flow information. delay &lt;- 2 # DELAY IN KNOWING DATA (IN WEEKDAYS) - data takes time to have It is also important to note that this model will need to be re-balanced weekly. The day of the week the rebalancing occurs is at the discretion of the user. For this example we will set the day of the week to trade as Friday. doW &lt;- 5 # DAY OF THE WEEK YOU WILL TRADE ON (5 = FRIDAYS) Additionally, we also evaluate the returns for different holding periods. The user can input return horizons that they are interested in here. For this example we define a return horizon for weekly, fortnightly, monthly, bi-monthly, quarterly, and semi-annual rebalancing. hz &lt;- c(5, 10, 20, 45, 65, 130) # RETURN HORIZON (IN WEEKDAYS) - holding periods Now that we have defined all of our inputs, to rank the countries into quintiles by their 20-day percentage flow, we call function bbk() for a 1-week holding period. By adding the selected backtesting universe as an input to the function, we can ensure that the model tracks additions and removals of countries over time, and is therefore able to identify all members on a point-in-time basis. z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, idx) 6.3.4 Model Twenty-day flow percentage ranked into quintiles (computed only where forward returns are available) z[[&quot;bins&quot;]] AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US MA PK AE QA SA KW 20221230 3 3 1 3 4 2 3 3 4 1 1 NA 3 2 2 2 2 NA 1 NA NA NA NA 4 2 3 NA NA 4 5 5 2 4 5 3 5 5 1 5 4 5 5 4 NA 1 NA NA 1 NA 1 NA 20221223 3 4 2 3 3 2 4 3 5 1 1 NA 3 2 2 2 2 NA 1 NA NA NA NA 4 2 4 NA NA 5 5 5 1 3 5 3 5 4 1 5 3 4 5 4 NA 1 NA NA 1 NA 1 NA 20221216 3 3 1 3 3 2 4 3 4 1 1 NA 3 2 1 2 2 NA 2 NA NA NA NA 4 2 3 NA NA 5 5 5 2 4 5 3 5 4 1 5 4 5 5 4 NA 1 NA NA 1 NA 1 NA 20221209 3 3 2 3 3 1 4 2 3 1 1 NA 3 2 1 1 2 NA 2 NA NA NA NA 4 2 3 NA NA 4 5 5 3 5 4 4 5 5 1 5 4 5 5 4 NA 2 NA NA 1 NA 1 NA 20221202 3 3 2 2 3 2 3 2 3 1 1 NA 4 1 1 2 1 NA 1 NA NA NA NA 3 2 3 NA NA 4 4 4 4 5 4 4 5 5 2 5 5 5 5 5 NA 3 NA NA 1 NA 1 NA Quintile Returns over the equal-weight universe z[[&quot;rets&quot;]] Q1 Q2 Q3 Q4 Q5 TxB uRet 20221230 -0.4629921 -1.2451615 -0.4358145 0.5061717 1.5454226 -2.0084147 1.6434610 20221223 0.2993423 0.4119877 -0.1282420 -0.3421502 -0.2322082 0.5315505 0.1192362 20221216 0.2060546 -0.8646809 0.0882256 0.2797459 0.2175380 -0.0114833 0.1321676 20221209 1.2805364 0.1083303 -0.4394204 -0.3831552 -0.6006442 1.8811806 -1.0159721 20221202 0.3286838 0.6732836 -1.6197734 0.3444039 0.4006131 -0.0719293 -1.2504177 Def: TxB represents summary statistics for the long short portfolio (top - bottom = Q1 - Q5 = overall portfolio returns) 6.3.5 Performance Go long the top basket and short the bottom basket. Performance over all holding periods fcn &lt;- function(retW) {as.matrix(bbk(x, y, 1, retW, nBin, doW, T, 0, delay, idx)$summ)} # DEFINE SUMMARY FUNCTION sapply(split(hz, hz), fcn, simplify = &quot;array&quot;) # WRITE SUMMARIES Q1 Q2 Q3 Q4 Q5 TxB uRet Bi-Monthly AnnMn -3.423309e+00 -1.446117e+00 4.190894e-01 2.260724e+00 2.126940e+00 -5.550249e+00 5.821387e+00 AnnSd 5.202517e+00 4.734284e+00 4.459345e+00 4.828532e+00 5.744303e+00 9.247342e+00 1.396581e+01 Sharpe -6.622211e+01 -3.044209e+01 9.824725e+00 4.716754e+01 3.705048e+01 -6.052384e+01 4.200661e+01 HitRate -1.101128e+01 -5.661264e+00 2.037820e+00 8.480150e+00 1.028306e+01 -1.028894e+01 1.461710e+01 Beta -1.371064e-01 -5.545700e-03 4.238220e-02 6.262000e-02 4.085950e-02 -1.779659e-01 1.000000e+00 Alpha -2.630398e+00 -1.413680e+00 1.737361e-01 1.895207e+00 1.893424e+00 -4.523822e+00 0.000000e+00 DrawDn -3.188075e+01 -2.413549e+01 -1.383790e+01 -9.012854e+00 -1.447557e+01 -5.946413e+01 -2.281371e+01 DDnBeg 2.015502e+07 2.015841e+07 2.018189e+07 2.018063e+07 2.020927e+07 2.015395e+07 2.019916e+07 DDnN 3.055556e+01 2.922222e+01 1.411111e+01 6.666667e+00 8.222222e+00 3.111111e+01 1.222222e+00 AnnTo 3.694680e+02 4.356442e+02 4.321056e+02 4.324207e+02 3.548221e+02 7.242901e+02 0.000000e+00 Fortnightly AnnMn -2.153684e+00 -6.569069e-01 6.715568e-01 7.175534e-01 1.323557e+00 -3.477241e+00 5.992619e+00 AnnSd 5.276955e+00 4.416193e+00 4.605961e+00 4.525538e+00 5.835494e+00 9.550077e+00 1.345877e+01 Sharpe -4.058706e+01 -1.483059e+01 1.377243e+01 1.598177e+01 2.267969e+01 -3.643638e+01 4.460548e+01 HitRate -2.644536e+00 -1.131922e+00 2.643267e+00 6.306786e-01 2.134409e+00 -6.344856e-01 1.146262e+01 Beta -1.288712e-01 -7.341300e-03 5.319200e-02 4.957520e-02 3.859850e-02 -1.674698e-01 1.000000e+00 Alpha -1.382178e+00 -6.132573e-01 3.508830e-01 4.207725e-01 1.094843e+00 -2.477022e+00 0.000000e+00 DrawDn -2.902303e+01 -2.290251e+01 -1.068301e+01 -1.214303e+01 -1.701188e+01 -5.245008e+01 -3.072038e+01 DDnBeg 2.015091e+07 2.015578e+07 2.018516e+07 2.018092e+07 2.020546e+07 2.015086e+07 2.020012e+07 DDnN 8.050000e+01 1.070000e+02 4.750000e+01 8.500000e+01 5.300000e+01 1.350000e+02 4.500000e+00 AnnTo 8.796568e+02 1.474528e+03 1.495591e+03 1.399063e+03 9.039545e+02 1.783611e+03 0.000000e+00 Monthly AnnMn -2.721981e+00 -1.179147e+00 1.186295e+00 2.045915e+00 5.218053e-01 -3.243786e+00 5.964240e+00 AnnSd 5.347382e+00 4.715131e+00 4.338592e+00 4.756448e+00 5.428403e+00 8.994717e+00 1.405391e+01 Sharpe -5.071924e+01 -2.440859e+01 2.750901e+01 4.265900e+01 9.570089e+00 -3.526750e+01 4.254971e+01 HitRate -6.210060e+00 -1.386312e+00 2.911771e+00 5.184498e+00 8.838384e-01 -2.898887e+00 1.001082e+01 Beta -1.220609e-01 -6.431700e-03 2.146320e-02 8.553710e-02 2.969950e-02 -1.517604e-01 1.000000e+00 Alpha -1.985214e+00 -1.151331e+00 1.058307e+00 1.530652e+00 3.496485e-01 -2.334862e+00 0.000000e+00 DrawDn -2.985131e+01 -2.434887e+01 -7.590433e+00 -1.021762e+01 -1.805644e+01 -5.285553e+01 -2.731307e+01 DDnBeg 2.015316e+07 2.015317e+07 2.019067e+07 2.019092e+07 2.020054e+07 2.015324e+07 2.020011e+07 DDnN 4.325000e+01 6.600000e+01 2.675000e+01 2.250000e+01 3.200000e+01 6.200000e+01 2.500000e+00 AnnTo 6.582973e+02 8.960836e+02 9.062667e+02 8.615612e+02 6.752716e+02 1.333569e+03 0.000000e+00 Quarterly AnnMn -3.083719e+00 -1.373424e+00 7.739193e-01 1.338002e+00 2.318327e+00 -5.402046e+00 6.010823e+00 AnnSd 4.994816e+00 4.784343e+00 4.030292e+00 4.466721e+00 5.709965e+00 9.205793e+00 1.341138e+01 Sharpe -6.447381e+01 -2.972706e+01 2.081969e+01 2.876016e+01 3.998872e+01 -5.915092e+01 4.651764e+01 HitRate -1.085765e+01 -3.377542e+00 3.704686e+00 8.045977e+00 9.204244e+00 -1.078691e+01 1.450044e+01 Beta -1.418691e-01 2.253690e-02 3.680530e-02 4.276790e-02 4.490540e-02 -1.867745e-01 1.000000e+00 Alpha -2.246535e+00 -1.520053e+00 5.522941e-01 1.107185e+00 2.048824e+00 -4.295360e+00 0.000000e+00 DrawDn -2.857623e+01 -2.262593e+01 -1.056156e+01 -9.281015e+00 -1.201175e+01 -5.352142e+01 -2.002091e+01 DDnBeg 2.015601e+07 2.016076e+07 2.018215e+07 2.018380e+07 2.020359e+07 2.015395e+07 2.019587e+07 DDnN 2.000000e+01 1.792308e+01 1.000000e+01 9.000000e+00 7.000000e+00 2.107692e+01 1.230769e+00 AnnTo 2.733324e+02 3.099770e+02 3.072551e+02 3.049267e+02 2.681123e+02 5.414446e+02 0.000000e+00 Semi-Annual AnnMn -1.953678e+00 -7.001982e-01 -1.176400e-02 1.481120e+00 1.148828e+00 -3.102506e+00 6.081841e+00 AnnSd 4.852151e+00 4.745909e+00 3.977385e+00 4.437016e+00 5.378126e+00 8.880465e+00 1.295677e+01 Sharpe -4.262095e+01 -1.885928e+01 1.646582e+00 3.648208e+01 1.972475e+01 -3.211258e+01 4.829772e+01 HitRate -1.223443e+01 -8.168498e+00 1.007326e+00 9.542124e+00 5.293040e+00 -9.322344e+00 1.624542e+01 Beta -1.798142e-01 -9.323200e-03 6.234010e-02 6.127580e-02 6.419790e-02 -2.440121e-01 1.000000e+00 Alpha -8.681082e-01 -6.405745e-01 -3.846432e-01 1.111956e+00 7.541253e-01 -1.622234e+00 0.000000e+00 DrawDn -2.052335e+01 -1.479512e+01 -1.000307e+01 -6.944568e+00 -1.185386e+01 -3.640184e+01 -1.366247e+01 DDnBeg 2.015426e+07 2.016303e+07 2.017845e+07 2.019345e+07 2.018569e+07 2.015315e+07 2.018232e+07 DDnN 1.046154e+01 8.346154e+00 5.461538e+00 2.961539e+00 5.076923e+00 9.807692e+00 1.384615e+00 AnnTo 1.428760e+02 1.638314e+02 1.623794e+02 1.581034e+02 1.545589e+02 2.974349e+02 0.000000e+00 Weekly AnnMn -1.408600e+00 -9.231422e-01 3.680818e-01 -1.594726e-01 2.087196e+00 -3.495795e+00 5.860597e+00 AnnSd 5.257648e+00 4.584132e+00 4.399330e+00 4.763997e+00 6.001226e+00 9.522842e+00 1.269478e+01 Sharpe -2.679144e+01 -2.013778e+01 8.366769e+00 -3.347454e+00 3.477949e+01 -3.670958e+01 4.616540e+01 HitRate 7.537688e-01 -1.256281e+00 5.025126e-01 -3.015075e+00 3.768844e+00 -2.512563e+00 7.537688e+00 Beta -1.254465e-01 2.511280e-02 5.762430e-02 1.329980e-02 3.177610e-02 -1.572226e-01 1.000000e+00 Alpha -6.734079e-01 -1.070318e+00 3.036920e-02 -2.374174e-01 1.900969e+00 -2.574377e+00 0.000000e+00 DrawDn -2.555285e+01 -2.559540e+01 -1.108281e+01 -1.259555e+01 -1.527108e+01 -5.153052e+01 -3.441289e+01 DDnBeg 2.015121e+07 2.015082e+07 2.019031e+07 2.017112e+07 2.020040e+07 2.015081e+07 2.020012e+07 DDnN 1.260000e+02 2.390000e+02 1.170000e+02 2.570000e+02 1.340000e+02 3.070000e+02 9.000000e+00 AnnTo 1.170617e+03 2.292006e+03 2.301105e+03 2.145747e+03 1.167351e+03 2.337968e+03 0.000000e+00 Annualized mean one-week returns bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, idx)$annSumm # DISPLAY CALENDAR-YEAR RETURNS Q1 Q2 Q3 Q4 Q5 TxB uRet nPrds 2015 6.271373 7.5179281 -2.4328062 -8.6091620 -2.012459 8.2838322 -13.018946 28 2016 -6.766390 -0.8843046 0.0203295 3.1490335 4.404675 -11.1710648 7.337996 53 2017 -14.840855 -6.2196694 5.2587831 6.9321631 8.193252 -23.0341064 16.813470 52 2018 -1.115854 -2.0746685 0.1062339 -1.9633520 5.109924 -6.2257781 -11.737258 52 2019 3.415906 -9.2466119 -0.3057885 2.5553092 3.978204 -0.5622982 18.044942 52 2020 6.844925 2.1349904 -6.4657220 -4.2393001 1.807574 5.0373505 7.577817 52 2021 -2.950357 2.0996896 2.5609134 -3.5207531 1.556919 -4.5072752 15.366920 53 2022 2.081600 4.9891097 1.6687474 0.9130255 -9.559652 11.6412518 -7.203693 52 "],["flow-percentage-sector-strategy.html", "7 Flow-Percentage Sector Strategy 7.1 Overview 7.2 Data 7.3 Strategy Implementation", " 7 Flow-Percentage Sector Strategy 7.1 Overview The Flow-Percentage Sector Strategy is an equity based rotation strategy, which ranks different sectors across a customized universe of geographic regions. This approach uses daily active fund flows in conjunction with monthly sector and country allocations. 7.2 Data The Flow-Percentage Sector Strategy developed by EPFR is based on percentage flow into sectors weighted by the regional emphasis of each fund. In this section, the reader will gain an understanding of the aggregations which can be used to create a signal as well as the methodology behind daily percentage flow calculations. 7.2.1 Aggregations The first step is defining a subset of data to capture in calculating our signal. This strategy requires; Active equity funds with a cross-border focus. These are essentially any active fund that has a mandate spanning more than one country. Funds with a geographic mandate confined to the country or region of interest (e.g. for U.S. sector, we look only at funds that have a mandate to invest in the United States). Funds must report both daily flows with monthly sector and country allocations, since these values are needed to calculate Daily Percentage Flow. Active cross-border equity funds, which report their sector allocations, country allocations and their fund flows have grown substantially over time. The figure below shows EPFRs coverage over time of funds used to create this signal for different countries and regions. Updated at the end of July each year Users looking for more specific detail can customize this aggregation even further using EPFRs fund-level or share class-level granularity. Some good examples would be to consider only active, passive, ETFs or mutual funds, or only institutional or retail share class flows and assets. Users can leverage these tags to different degrees in creating aggregated signals to backtest. Further detail about this is available in section 3. This can be achieved using fund-level flow and allocation files or by reaching out to EPFRs quant team for customized aggregations. 7.2.2 Daily Percentage Flow To begin calculating Daily Percentage flow, we start with our subset of active cross-border equity funds with a geographic mandate confined to a country or region of interest. First, we calculate a funds weighting to each sector within this region of interest, as the product of its stated sector and country allocation. \\[\\text{Fund Weight}_{i,s,r,m} = \\text{Sector Allocation}_{i,s,m} \\times \\text{Country Allocation}_{i,r,m}\\] Where: \\(\\text{Fund Weight}\\) = weighting to sector \\(s\\), within country or region \\(r\\), across all funds in our universe \\(i\\), for month \\(m\\) Then, to calculate a funds dollar flow into a sector within the country or region of interest, we scale the funds flow by the funds weighting, on that day. We apply the same procedure to all funds with flow and allocation information and then sum across all funds, to get total dollar flow for each sector. EPFR releases sector and country allocations of all funds on the \\(23^{\\text{rd}}\\) of each month (or the next available business day) at a monthly frequency. Hence, our calculation assumes constant country and sector weightings between two consecutive release dates within the month. \\[\\text{Total Flow}_{s,r,t} = \\sum^{N}_{i=m}{\\text{Flow}_{i,s,r,t} \\times \\text{Fund Weight}_{i,s,r,m}}\\] Where: \\(\\text{Total Flow}\\) = the total dollar flow into a sector \\(s\\), for country or region \\(r\\), across all funds in our universe \\(i\\), for day \\(t\\) We will want to normalize this figure. So, we repeat the process across the same funds Assets held under Management (AuM), to get the total AuM held in a sector. \\[\\text{Total AuM}_{s,r,t} = \\sum^{N}_{i=m}{\\text{AuM}_{i,s,r,t} \\times \\text{Fund Weight}_{i,s,r,m}}\\] Where: \\(\\text{Total AuM}\\) = the total assets held in a sector \\(s\\), for country or region \\(r\\), across all funds in our universe \\(i\\), for day \\(t\\) Finally, to find the daily percentage flow for a sector, we divide the total flow by the total AuM held in a country or region. \\[\\text{Percentage Flow}_{s,r,t} = \\frac{\\text{Total Impact}_{s,r,t}}{\\text{Total AuM}_{s,r,t}}\\] Where: \\(\\text{Percentage Flow}\\) = the scaled flow as a percentage into a sector \\(s\\), for country or region \\(r\\), across all funds in our universe \\(i\\), for day \\(t\\) We repeat this across all different sectors, and countries or regions, for the entire history. 7.2.3 Aggregate Flow File Users may create flow percentages for their desired country or region, sector aggregations and granularity using the methodology described in the previous section. Users also have the option to use the Flow-Percentage Sector Strategy files EPFR provides, which are updated daily at 5:00 PM est. with a T+1 day lag, and are available in the users EPFR FTP connection under the strategies folder. There are five different types of Flow-Percentage Sector Strategy files available for different countries or geographic regions which include; Emerging Markets (EM), Japan (JP), United Kingdom (UK), Eurozone, and the United States (US). Each of these files contain aggregate percentage flow data for 12 sectors (displayed below). For this demonstration, we will focus on the US so we will be using the file FloPctSector-US-daily.csv, which can be downloaded from the users ftp under the folder Strategies/daily and can be stored in the users local folder EPFR/daily. Below shows a snippet of what this file contains: Strategies/daily/FloPctSector-US-daily.csv CDisc CStpls Engy Fins HCare Indls Tech Matls Telco Utes REst FinsExREst 20221201 -0.0544133 -0.1501373 -0.1391800 -0.0946229 -0.0443176 -0.0878050 -0.0405456 -0.2197664 0.0158905 -0.0108059 -0.1356850 -0.0815507 20221202 -0.0045566 0.0244751 0.0422289 0.0117102 0.0265640 0.0162280 0.0055618 0.0174281 0.0139732 0.0444272 -0.0020316 0.0160702 20221205 0.0848306 0.1446208 0.1196249 0.0999533 0.0509726 0.1128825 0.0669086 0.0627982 0.0332417 0.0309872 0.0835426 0.1051566 20221206 -0.0256779 -0.0091260 0.0133871 -0.0175412 -0.0031798 -0.0144732 -0.0177890 0.0015587 -0.0039850 -0.0906554 -0.0280658 -0.0141986 20221207 -0.0230160 -0.0134151 -0.0053965 -0.0217519 -0.0130111 -0.0120639 -0.0000646 -0.0782963 -0.0163454 -0.0075162 0.0156094 -0.0336547 20221208 -0.0417034 -0.1278279 0.0053458 -0.0505404 -0.0401745 -0.1007443 -0.0593709 -0.2507193 -0.0462828 -0.0075478 -0.0143200 -0.0621246 For convince save the path to the flow file you choose to use as flow.file, example shown below: flow.file &lt;- &quot;C:\\\\EPFR\\\\daily\\\\FloPctSector-US-daily.csv&quot; 7.2.4 Return File The return file for this strategy should contain daily equity returns for each of the sectors in the flow file, over the period of time and within the country or region the user wants to backtest. The user can choose to use return data found with their own resources, or they have the option to use a file EPFR provides of Sector Returns, which is available in the users EPFR FTP connection under the Returns folder ( 11.1 ). The Return file that EPFR provides contains Fund Return data and can be used as a proxy to equity market returns. The user can recreate these files using EPFR daily flow data with the following equation: \\[\\text{Fund Return}_{s,r,t} = 100 \\times \\frac{\\sum^{N}_{i=m} \\text{Portfolio Change}_{i,s,r,t}}{\\sum^{N}_{i=m} \\text{Assets Start}_{i,s,r,t}}\\] Where: \\(\\text{Fund Return}\\) = the percentage return of sector \\(s\\), for country or region \\(r\\), across all funds in our universe \\(i\\), for day \\(t\\) For this demonstration, we will focus on the US so we will be using the file PsuedoReturns-Sector-US-daily.csv, which can be downloaded from the users ftp under the folder Returns/daily and can be stored in the users local folder EPFR/returns. Below shows a snippet of what this file contains: Returns/daily/PsuedoReturns-Sector-US-daily.csv CDisc CStpls Engy Fins HCare Indls Tech Matls Telco Utes REst 20221201 -0.243113 NA -0.581439 -0.147268 0.333339 0.049082 0.444988 -0.148359 0.447848 -0.186503 -0.051698 20221202 0.013766 NA 0.006139 -0.002407 0.070063 0.092855 -0.116138 0.040077 0.002368 -0.144098 -0.160180 20221205 -1.634828 NA -2.918463 -1.941946 -0.686057 -0.841450 -1.952110 -1.337969 -1.361024 -1.000601 -1.037477 20221206 -1.186074 NA -2.868101 -0.975687 -1.468818 -1.447209 -2.783870 -0.853796 -2.851082 0.308589 -0.844595 20221207 0.073598 NA -0.465837 -0.062691 0.429443 -0.126434 -0.435469 -0.115272 -0.205874 -0.188933 0.066555 20221208 0.700870 NA -0.848190 -0.053842 1.193715 0.444036 1.688335 0.378334 -0.525962 0.291734 0.376093 For convince save the path to the return file you choose to use as ret.file, example shown below: ret.file &lt;- &quot;C:\\\\EPFR\\\\returns\\\\PsuedoReturns-Sector-US-daily.csv&quot; 7.3 Strategy Implementation The final step is implementing this strategy to create a signal. Lets begin by reading in the flow and return files to our R studio work space. x &lt;- mat.read(flow.file) # GET FLOW PERCENTAGE C:\\\\EPFR\\\\daily\\\\FloPctSector-US-daily.csv y &lt;- mat.read(ret.file) # GET RETURN C:\\\\EPFR\\\\returns\\\\PsuedoReturns-Sector-US-daily.csv Next we will need to ensure that the data structure in \\(x\\) and \\(y\\) are completely aligned, having the same column names in the same order. Below we will subset the columns of \\(x\\) to use the same sectors, in the same order as \\(y\\). x &lt;- as.matrix(x[, dimnames(y)[[2]]]) # LINE UP INDICATORS WITH RETURNS * Note: subsetting can be also be done when creating the flow and return files 7.3.1 Compounding Flows Next, we set up a variable for our look-back period, which can also be called a flow window. This variable will be the window of time we use to create a trailing compounded daily percentage flow. The look-back period we choose for our demonstrations is 20 days. lookback &lt;- 20 # FLOW WINDOW (IN WEEKDAYS) - 20 day look back period Again, using a function from the library('EPFR.r'), compound.flows() compounds our daily percentage flow over the trailing lookback period for each sector. x &lt;- compound.flows(x, lookback, F) # COMPOUND FLOWS CDisc CStpls Engy Fins HCare Indls Tech Matls Telco Utes REst FinsExREst 20221201 -0.1509415 -0.2250062 0.6044772 -0.2808077 -0.0057585 -0.0289950 -0.1753918 -0.4577443 0.0143092 0.2198572 -1.1441277 0.0042669 20221202 -0.1478096 -0.1767291 0.3400230 -0.2732577 0.0510085 -0.0166465 -0.0866750 -0.3542438 0.0273871 0.2411600 -1.1013972 -0.0002700 20221205 -0.0422361 -0.0162768 0.4322582 -0.1392681 0.1139422 0.0972506 0.0000681 -0.3065147 0.0722724 0.2812595 -0.8822782 0.1048242 20221206 -0.0722140 -0.0336643 0.3658648 -0.1823607 0.0953741 0.0720908 -0.0102382 -0.3810076 0.0533155 0.1301528 -0.9054895 0.0549232 20221207 -0.1002727 -0.0618456 0.2749281 -0.2065582 0.1028432 0.0443100 -0.0173922 -0.4651538 0.0227681 0.0917185 -0.7905249 -0.0152572 20221208 -0.1393354 -0.1889118 0.2466263 -0.2722208 0.0550748 -0.0550250 -0.0694212 -0.7207375 -0.0138364 0.0941653 -0.8540915 -0.0811986 7.3.2 Total Return Index We will now convert our percentage returns data \\(y\\) to total index returns indexed so that time moves forward. To do this we will use function ret.to.idx() from library('EPFR.r'). We also use the functions map.rname() to ensure the row names of the matrices line up with our flow file and ret.idx.gaps.fix() to replace any NA values. Please refer to the library documentation for the complete list of parameters for these functions (tip: ?ret.to.idx(),?ret.idx.gaps.fix() ). y[is.na(y)] &lt;- 0 y &lt;- ret.to.idx(map.rname(y, dimnames(x)[[1]])) # CONVERT TO A TOTAL-RETURN INDEX y &lt;- ret.idx.gaps.fix(y) 7.3.3 Ranking Sectors Next, we sort each of the sectors in our country or region into five equal bins based on their compounded percentage flow values for the selected holding period. To do this, we will use the function from library('EPFR.r'), called bbk(). This function will output a standardized backtest result. The bbk() function requires our daily percentage flow data compounded over a desired period and total return index data. Please refer to the library documentation for the complete list of parameters of this function (tip: ?bbk()). The first parameter we add is the number of bins we want to use. For our case, we want to use 5 because our strategy is to go long the top fifth and short the bottom fifth. nBin &lt;- 5 # NUMBER OF BINS Since EPFR data is published with T+1 day lag and is released around 5:00 pm EST, we account for a T+2 day delay in our model. Users interested in more timely signals can also use the T+2 open prices for backtesting purposes. Alternatively, EPFRs Premium Daily offering collects an earlier release of end-of-day data which includes a significant subset of its original fund-level flow information. delay &lt;- 2 # DELAY IN KNOWING DATA (IN WEEKDAYS) - data takes time to have It is also important to note that this model will need to be re-balanced weekly. The day of the week the rebalancing occurs is at the discretion of the user. For this example we will set the day of the week to trade as Friday. doW &lt;- 5 # DAY OF THE WEEK YOU WILL TRADE ON (5 = FRIDAYS) Additionally, we also evaluate the returns for different holding periods. The user can input return horizons that they are interested in here. For this example we define a return horizon for weekly, fortnightly, monthly, bi-monthly, quarterly, and semi-annual rebalancing. hz &lt;- c(5, 10, 20, 45, 65, 130) # RETURN HORIZON (IN WEEKDAYS) - holding periods Now that we have defined all of our inputs, to rank the sectors into quintiles by their 20-day percentage flow, we call function bbk() for a 1-week holding period. z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay) 7.3.4 Model Go long the top basket and short the bottom basket. Twenty-day flow percentage ranked into quintiles (computed only where forward returns are available) z[[&quot;bins&quot;]] CDisc CStpls Engy Fins HCare Indls Tech Matls Telco Utes REst 20221230 2 NA 1 3 3 2 5 5 4 1 4 20221223 3 NA 1 3 2 2 5 5 4 1 4 20221216 4 NA 1 3 2 2 4 5 3 1 5 20221209 4 NA 1 3 1 2 4 5 3 2 5 20221202 4 NA 1 2 3 2 4 5 3 1 5 Quintile Returns over the equal-weight universe z[[&quot;rets&quot;]] Q1 Q2 Q3 Q4 Q5 TxB uRet 20221230 -1.4944538 0.3856130 -0.1382933 1.0412578 0.2058763 -1.7003301 2.0135404 20221223 -0.0882506 0.2694991 -0.1205644 0.2512244 -0.3119084 0.2236577 -0.1941272 20221216 2.0591454 0.2469925 0.0503967 -1.8664749 -0.4900596 2.5492050 0.0900461 20221209 1.6349877 0.5174518 -0.8224972 -0.9866192 -0.3433231 1.9783108 -1.4672304 20221202 -1.5299698 0.3124433 0.1163219 0.0062501 1.0949545 -2.6249243 -3.3864744 Def: TxB represents summary statistics for the long short portfolio (top - bottom = Q1 - Q5 = overall portfolio returns) 7.3.5 Performance Performance over all holding periods fcn &lt;- function(retW) {as.matrix(bbk(x, y, 1, retW, nBin, doW, T, 0, delay)$summ)} # DEFINE SUMMARY FUNCTION sapply(split(hz, hz), fcn, simplify = &quot;array&quot;) # WRITE SUMMARIES Q1 Q2 Q3 Q4 Q5 TxB uRet Bi-Monthly AnnMn 3.143080e+00 -3.649481e-01 8.677391e-01 -2.045416e+00 -1.600456e+00 4.743536e+00 6.769452e+00 AnnSd 9.188964e+00 7.426444e+00 6.753324e+00 7.051222e+00 8.089120e+00 1.364845e+01 1.787035e+01 Sharpe 3.397483e+01 -4.504349e+00 1.286164e+01 -2.930509e+01 -2.159411e+01 3.509378e+01 3.815054e+01 HitRate 7.458961e+00 2.032289e+00 5.726496e+00 -5.242165e+00 -5.236739e+00 8.936372e+00 1.609144e+01 Beta 4.855390e-02 -6.775770e-02 1.900820e-02 -4.190400e-02 4.209960e-02 6.454300e-03 1.000000e+00 Alpha 2.810483e+00 1.022988e-01 7.515910e-01 -1.756321e+00 -1.908052e+00 4.718535e+00 0.000000e+00 DrawDn -1.975796e+01 -3.514049e+01 -3.302448e+01 -4.820747e+01 -6.815382e+01 -3.217318e+01 -5.998357e+01 DDnBeg 2.011840e+07 2.008970e+07 2.011077e+07 2.008952e+07 2.010626e+07 2.009716e+07 2.007087e+07 DDnN 1.177778e+01 2.922222e+01 2.544444e+01 5.722222e+01 5.988889e+01 7.888889e+00 8.333333e+00 AnnTo 3.170488e+02 4.025397e+02 4.010621e+02 4.085518e+02 3.288223e+02 6.458711e+02 0.000000e+00 Fortnightly AnnMn 4.755545e+00 -1.121376e-01 5.176507e-01 -3.411287e+00 -1.749771e+00 6.505316e+00 7.116885e+00 AnnSd 9.819349e+00 7.522636e+00 7.189585e+00 7.617688e+00 8.153420e+00 1.473942e+01 1.888425e+01 Sharpe 4.806168e+01 -1.498656e+00 7.213118e+00 -4.500241e+01 -2.057634e+01 4.334186e+01 3.770409e+01 HitRate 4.156479e+00 2.322738e+00 1.589242e+00 -2.689487e+00 -4.400978e+00 7.090465e+00 1.002445e+01 Beta 5.524610e-02 -4.226460e-02 1.470160e-02 -9.417500e-03 -1.826560e-02 7.351170e-02 1.000000e+00 Alpha 4.362989e+00 1.884626e-01 4.128160e-01 -3.344571e+00 -1.619696e+00 5.982685e+00 0.000000e+00 DrawDn -2.006170e+01 -4.190897e+01 -3.006866e+01 -6.504796e+01 -7.603531e+01 -3.721909e+01 -7.198044e+01 DDnBeg 2.021546e+07 2.008096e+07 2.020036e+07 2.007072e+07 2.010045e+07 2.021031e+07 2.007101e+07 DDnN 1.850000e+01 1.440000e+02 6.250000e+01 3.510000e+02 2.840000e+02 3.500000e+01 3.650000e+01 AnnTo 8.740831e+02 1.468460e+03 1.544743e+03 1.466870e+03 8.772616e+02 1.751345e+03 0.000000e+00 Monthly AnnMn 4.782294e+00 -4.237952e-01 -2.389509e-01 -2.751899e+00 -1.367649e+00 6.149942e+00 7.076684e+00 AnnSd 9.380030e+00 7.415257e+00 6.915598e+00 7.670364e+00 7.915053e+00 1.370854e+01 1.875821e+01 Sharpe 5.075960e+01 -5.739774e+00 -3.477258e+00 -3.575588e+01 -1.785606e+01 4.540607e+01 3.781550e+01 HitRate 8.333333e+00 1.225490e+00 0.000000e+00 -5.392157e+00 -4.044118e+00 7.965686e+00 1.213235e+01 Beta 2.937410e-02 -2.949250e-02 1.184460e-02 -1.968070e-02 7.954400e-03 2.141970e-02 1.000000e+00 Alpha 4.572876e+00 -2.156501e-01 -3.194197e-01 -2.613964e+00 -1.423842e+00 5.996718e+00 0.000000e+00 DrawDn -1.974943e+01 -3.563380e+01 -3.207475e+01 -5.925775e+01 -6.757526e+01 -3.859698e+01 -6.730961e+01 DDnBeg 2.021294e+07 2.011064e+07 2.012804e+07 2.007084e+07 2.009809e+07 2.017541e+07 2.007091e+07 DDnN 1.625000e+01 6.925000e+01 5.675000e+01 1.630000e+02 1.432500e+02 2.050000e+01 1.950000e+01 AnnTo 6.404412e+02 8.754289e+02 8.945466e+02 9.009191e+02 6.515931e+02 1.292034e+03 0.000000e+00 Quarterly AnnMn 2.918005e+00 -2.304623e-01 1.899200e-01 -1.607357e+00 -1.270106e+00 4.188111e+00 6.788626e+00 AnnSd 8.515469e+00 7.376048e+00 6.959214e+00 7.175983e+00 7.898457e+00 1.251047e+01 1.728854e+01 Sharpe 3.434330e+01 -2.107844e+00 2.522940e+00 -2.243839e+01 -1.789229e+01 3.373430e+01 3.953261e+01 HitRate 6.138485e+00 2.174170e+00 3.899326e+00 -4.905668e+00 -6.743078e+00 7.245264e+00 1.803537e+01 Beta 4.688070e-02 -3.479510e-02 3.068680e-02 -6.550320e-02 2.273080e-02 2.414990e-02 1.000000e+00 Alpha 2.599225e+00 1.284880e-02 -1.319210e-02 -1.162736e+00 -1.436146e+00 4.035371e+00 0.000000e+00 DrawDn -2.094237e+01 -3.290773e+01 -2.839951e+01 -3.882781e+01 -6.128652e+01 -3.894700e+01 -5.580768e+01 DDnBeg 2.011738e+07 2.010160e+07 2.013755e+07 2.008755e+07 2.010368e+07 2.010065e+07 2.007164e+07 DDnN 5.153846e+00 2.276923e+01 1.592308e+01 4.238462e+01 4.346154e+01 6.846154e+00 5.692308e+00 AnnTo 2.369333e+02 3.006066e+02 2.884556e+02 2.902320e+02 2.428887e+02 4.798220e+02 0.000000e+00 Semi-Annual AnnMn 2.207553e+00 -1.312916e-01 3.432285e-01 -7.382067e-01 -1.681284e+00 3.888837e+00 6.898979e+00 AnnSd 8.024417e+00 7.298687e+00 6.874450e+00 7.220375e+00 8.696656e+00 1.296441e+01 1.792593e+01 Sharpe 2.881990e+01 -1.473294e+00 6.029886e+00 -1.023354e+01 -2.100735e+01 3.153222e+01 3.869563e+01 HitRate 7.597188e+00 -2.357320e-01 4.859388e+00 -1.836228e+00 -8.792390e+00 1.002068e+01 1.915219e+01 Beta 4.863230e-02 -1.411540e-02 2.872660e-02 -9.453130e-02 3.128770e-02 1.734460e-02 1.000000e+00 Alpha 1.870397e+00 -2.765740e-02 1.713834e-01 -7.291980e-02 -1.941203e+00 3.811599e+00 0.000000e+00 DrawDn -2.347074e+01 -2.918548e+01 -2.588942e+01 -3.017966e+01 -5.624454e+01 -3.691658e+01 -4.779195e+01 DDnBeg 2.012214e+07 2.010871e+07 2.012721e+07 2.010885e+07 2.010726e+07 2.010830e+07 2.007124e+07 DDnN 8.884615e+00 1.119231e+01 9.192308e+00 1.688462e+01 2.076923e+01 6.038462e+00 2.846154e+00 AnnTo 1.286849e+02 1.498056e+02 1.511911e+02 1.511787e+02 1.294003e+02 2.580852e+02 0.000000e+00 Weekly AnnMn 5.433751e+00 9.783296e-01 -1.058546e+00 -3.678518e+00 -1.675017e+00 7.108769e+00 7.346787e+00 AnnSd 1.003971e+01 7.791874e+00 7.435443e+00 7.940786e+00 8.981531e+00 1.561365e+01 1.971742e+01 Sharpe 5.412260e+01 1.255577e+01 -1.423648e+01 -4.632435e+01 -1.864957e+01 4.552919e+01 3.726039e+01 HitRate 5.555556e+00 3.052503e-01 6.105010e-02 -1.770452e+00 -5.067155e+00 5.433455e+00 7.142857e+00 Beta 4.890340e-02 -7.806200e-03 -1.397100e-03 -3.048450e-02 -9.215700e-03 5.811910e-02 1.000000e+00 Alpha 5.074468e+00 1.035680e+00 -1.048282e+00 -3.454555e+00 -1.607312e+00 6.681780e+00 0.000000e+00 DrawDn -2.006807e+01 -2.947212e+01 -3.762571e+01 -6.483458e+01 -7.971039e+01 -3.753259e+01 -7.566240e+01 DDnBeg 2.021031e+07 2.008091e+07 2.020010e+07 2.007062e+07 2.009031e+07 2.021031e+07 2.007101e+07 DDnN 4.100000e+01 4.470000e+02 1.410000e+02 8.090000e+02 6.250000e+02 1.000000e+02 7.300000e+01 AnnTo 1.130159e+03 2.212698e+03 2.355556e+03 2.279365e+03 1.215873e+03 2.346032e+03 0.000000e+00 Annualized mean one-week returns bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay)$annSumm # DISPLAY CALENDAR-YEAR RETURNS Q1 Q2 Q3 Q4 Q5 TxB uRet nPrds 2007 5.0906228 3.1066768 -12.5241701 -7.0295027 11.3563732 -6.265750 0.1097715 31 2008 6.7084351 -0.7656096 5.3905317 -19.3636307 8.0302735 -1.321838 -46.3570426 52 2009 14.1647697 4.8261812 -9.0670382 -16.1497738 6.2258612 7.938909 35.0538391 52 2010 9.1787616 -9.9713511 -0.9413294 1.4448124 0.2891064 8.889655 17.3509895 53 2011 11.2741661 0.3457603 -6.8993631 3.8166433 -8.5372066 19.811373 0.9244652 52 2012 3.0669502 4.4955769 5.0737526 -3.7248385 -8.9114412 11.978391 13.4808784 52 2013 3.9556329 2.2351574 2.7117738 2.5480915 -11.4506556 15.406289 23.8746385 52 2014 5.9201131 -3.6025308 3.9287980 -2.9761511 -3.2702292 9.190342 12.9408520 52 2015 6.4141677 -7.1314185 0.9152330 6.9355608 -7.1335431 13.547711 -5.9643050 52 2016 -3.0593816 -4.1849979 9.2282408 -5.5161973 3.5323360 -6.591718 10.5592455 53 2017 0.1452464 5.8183581 1.3498303 -0.6014167 -6.7120181 6.857265 11.0792282 52 2018 9.7485029 0.0512399 -0.5075363 -5.1122439 -4.1799626 13.928465 -10.0257047 52 2019 -6.2929697 10.9443837 7.0628608 0.3970551 -12.1113299 5.818360 23.3301464 52 2020 27.9337769 12.9305445 -17.2045069 -16.5315567 -7.1282578 35.062035 12.7458891 52 2021 -11.6685452 -4.4518212 -1.1562478 7.6468180 9.6297962 -21.298341 21.2485677 53 2022 12.3432858 4.0007559 -7.4248486 -10.8860796 1.9668866 10.376399 -12.6974776 52 "],["activepassive-country-strategy.html", "8 Active/Passive Country Strategy 8.1 Overview 8.2 Data 8.3 Strategy Implementation", " 8 Active/Passive Country Strategy 8.1 Overview The Active/Passive Country Strategy is an equity-based rotation strategy that ranks different countries across a customized universe of developed and emerging markets. This approach uses the stated monthly allocations of equity funds with a cross-border mandate and EPFRs fund classification to create an indicator. 8.2 Data The Active/Passive Country Strategy developed by EPFR Global uses the ratio of average allocation of active over passive funds. This section aims to give the reader an understanding of the methodology for constructing the variables used in the strategy. 8.2.1 Aggregations The first step is defining a subset of data to capture in calculating our signal. This strategy uses the following portions of the EPFR dataset; Equity fund-level country weightings, using the EPFR Country Allocation database. Active/Passive tagging at the fund level, using EPFRs fund classifications. Active and passive equity funds which report their country allocations to EPFR have grown substantially over time. The figure below shows EPFRs coverage over time of active versus passive funds used to create this signal. Updated at the end of July each year Users looking for more specific detail can customize this aggregation even further using EPFRs fund-level or share class-level granularity. Some good examples would be to consider only ETFs or mutual funds, geographic mandate, and fund domicile. Users can leverage these tags to different degrees in creating aggregated signals to backtest. Further detail about this is available in section 3. This can be achieved using fund-level allocation files or reaching out to EPFRs quant team for customized aggregations. 8.2.2 Active/Passive Indicator To begin calculating the Active/Passive indicator, we start with our subset of active and passive cross-border equity funds. Then for each country, we compute equally-weighted average allocations. These averages are computed separately across active and passive funds, shown below. \\[\\overline{\\text{Active Allocation}}_{c,m} = \\frac{\\sum^{N}_{i=m}{\\text{Country Allocation}_{i,c,m}}}{N}\\] Where: \\(\\overline{\\text{Active Allocation}}\\) = the equally-weighted average allocations to a country \\(c\\), across all Active funds in our universe \\(i\\), for month \\(m\\) \\[\\overline{\\text{Passive Allocation}}_{c,m} = \\frac{\\sum^{N}_{i=m}{\\text{Country Allocation}_{i,c,m}}}{N}\\] Where: \\(\\overline{\\text{Passive Allocation}}\\) = the equally-weighted average allocations to a country \\(c\\), across all Passive funds in our universe \\(i\\), for month \\(m\\) Finally, to get our Active/Passive Indicator for a country, we express the average allocation of active funds as percentage of that over passive funds. \\[\\text{Active/Passive Indicatior}_{c,m} = \\frac{\\overline{\\text{Active Allocation}}_{c,m}}{\\overline{\\text{Passive Allocation}_{c,m}}}\\] Where: \\(\\text{Active/Passive Indicatior}\\) = the ratio of average active over passive allocations to a country \\(c\\) and month \\(t\\) We repeat this across all different countries for the entire history. 8.2.3 Aggregate Indicator File Users may create the Active/Passive indicator for their desired country aggregations using the methodology described in the previous section. Users also have the option to use the Active/Passive Country Strategy file EPFR provides, which is updated monthly at 5:00 PM est. with a T+23 day lag, and is available in the users EPFR FTP connection under the strategies folder. The Active/Passive Country Strategy file contains aggregate Active/Passive indicator data for 55 countries in the ACWI, EAFE and Emerging Market country universes. For this demonstration, we will be using the file ActPasCtry-monthly.csv, which can be downloaded from the users ftp under the folder Strategies/monthly and can be stored in the users local folder EPFR/monthly. Below shows a snippet of what this file contains: Strategies/monthly/ActPasCtry-monthly.csv AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US JO MA PK AE QA VE SA KW 202201 -0.4116589 0.3215365 -0.4395098 0.2033904 0.6814724 0.4359012 -0.4390273 0.4637412 0.4790104 -0.7655074 0.0506318 0.8326907 0.5432593 -0.3565337 -0.0885959 0.2369512 -0.2751302 5.015702 -0.1436980 -0.4264640 0.2227321 2.269794 1.759860 -0.3421111 -0.3968119 -0.1757148 1.1429755 0.4494854 -0.1866656 -0.1539115 -0.0712242 0.0931108 -0.4833248 0.0320463 -0.4019757 -0.0861903 -0.1956867 1.5642416 0.8871501 -0.2181529 -0.1235379 0.1192964 -0.4029589 0.1356841 0.0619282 -0.3309885 0.3617819 1.336750 -0.2530996 -0.2681152 NA -0.3396732 -0.5408369 202202 -0.3903412 0.3025222 -0.4225272 0.2086961 0.8346743 0.4481174 -0.4344863 0.4338277 0.4957880 -0.7170507 0.1166151 0.2536770 0.6315095 -0.2658749 -0.0945730 0.2137518 -0.2825992 4.950402 -0.0976879 -0.4403187 0.2610183 2.137616 1.957246 -0.2530923 -0.4229628 -0.0924395 1.1403516 0.7415435 -0.1708561 -0.1436105 -0.0530148 0.0119293 -0.5128763 0.0592285 -0.3967172 -0.1061223 -0.1857912 1.6285870 0.9143402 -0.2320151 -0.1179328 0.1480624 -0.3816681 0.2046359 0.0566413 -0.3410773 0.3278588 3.415418 -0.3185905 -0.4135812 NA -0.3550474 -0.6430551 202203 -0.3688560 0.2805165 -0.4101576 0.2130056 0.9772176 0.4236433 -0.4208925 0.4320335 0.4824436 -0.7213895 0.0990333 2.0298302 0.7424796 -0.2424444 -0.1239329 0.1876749 -0.2388349 3.783801 -0.2466231 -0.4549257 -0.1252377 1.595001 1.325004 -0.2543773 -0.2641990 -0.1344421 1.3196491 0.2755998 -0.1513770 -0.1460110 -0.0560442 -0.0339794 -0.5163832 0.0114068 -0.4324152 -0.1140916 -0.2140291 1.3045336 0.9964926 -0.2666780 -0.1303510 0.1535921 -0.3935603 0.2816546 0.0743059 -0.3084517 0.2464617 2.497610 -0.2623263 -0.3940539 NA -0.4000018 -0.6861364 202204 -0.3687968 0.3185151 -0.4228410 0.1550255 0.7892834 0.3386751 -0.4307848 0.3677196 0.5230830 -0.7305293 -0.1046205 -0.2413952 0.6288219 -0.2760861 -0.2448614 0.1259917 -0.2605456 4.307477 -0.2994163 -0.3512995 0.0845009 1.215186 2.770224 -0.2637296 -0.3177815 -0.1463344 0.8749594 0.6741988 -0.1256812 -0.1496520 -0.0667768 0.0192244 -0.4876611 0.0354283 -0.4200972 -0.0827129 -0.1956528 1.1511023 1.0684993 -0.2438731 -0.0809011 0.0970967 -0.3569473 0.2033025 0.0830815 -0.4963108 -0.0593894 2.127893 -0.1883872 -0.3809750 NA -0.3812137 -0.7135296 202205 -0.3249846 0.3724780 -0.4114695 0.1905780 0.8704149 0.4266375 -0.4054981 0.3958469 0.5815749 -0.6398179 -0.0349082 -0.2690386 0.8008241 -0.1764559 -0.2346205 0.1914458 -0.2733041 2.754161 -0.2627486 -0.3475267 0.0143530 1.225950 2.988442 -0.1929273 -0.3614982 -0.1143957 0.8995259 0.6297235 -0.1119129 -0.1712639 -0.0724077 -0.0228316 -0.5338787 0.0560249 -0.4237451 -0.1154279 -0.2119235 0.8590158 0.9323932 -0.2412536 -0.1130822 0.1693429 -0.3634012 0.2639463 0.0492678 -0.3985578 -0.0424219 1.870296 -0.1153921 -0.3414538 NA -0.3858441 -0.7030830 202206 -0.3155353 0.3446796 -0.3982346 0.2677924 0.8230942 0.4334032 -0.4136115 0.3311540 0.5725105 -0.6247500 -0.0960704 -0.1732658 0.7694420 -0.1765785 -0.3187803 0.1387018 -0.2167914 3.801217 -0.3088773 -0.3191568 -0.0639615 1.132402 2.504805 -0.1836117 -0.3493510 -0.0881084 0.8910945 0.5377157 -0.1594006 -0.1762541 -0.0893935 -0.1267178 -0.5137351 0.0860649 -0.4322122 -0.1106705 -0.2105706 0.9199082 0.9540571 -0.2610024 -0.1213421 0.2150883 -0.3659797 0.2774824 0.0490680 -0.3892771 0.0136632 1.366859 -0.0071518 -0.3459011 NA -0.3127394 -0.6181641 For convince save the path to the active/passive indicator file you choose to use as indicator.file, example shown below: indicator.file &lt;- &quot;C:\\\\EPFR\\\\monthly\\\\ActPasCtry-monthly.csv&quot; 8.2.4 Return File The return file for this strategy should contain monthly equity returns for each of the countries in the aggregate indicator file, over the period of time the user wants to backtest. The user can choose to use return data found with their own resources, or they have the option to use a file EPFR provides of ETF Country Returns, which is available in the users EPFR FTP connection under the Returns folder ( 11.1 ). The Return file that EPFR provides contains Fund Return data and can be used as a proxy to equity market returns. The user can recreate these files using EPFR daily flow data with the following equation: \\[\\text{Fund Return}_{c,t} = 100 \\times \\frac{\\sum^{N}_{i=m} \\text{Portfolio Change}_{i,c,t}}{\\sum^{N}_{i=m} \\text{Assets Start}_{i,c,t}}\\] Where: \\(\\text{Fund Return}\\) = the percentage return of country \\(c\\), across all funds in our universe \\(i\\), for day \\(t\\) However, since this signal is limited to monthly granularity, it is important to ensure that returns are also indexed by month. If the users return file is indexed daily or weekly, the function mat.daily.to.monthly(, T) from library('EPFR.r') should be used when implementing the strategy. For this demonstration, we will be using the file PsuedoReturns-Country-ETF-daily.csv, which can be downloaded from the users ftp under the folder Returns/daily and can be stored in the users local folder EPFR/returns. Below shows a snippet of what this file contains: Returns/daily/PsuedoReturns-Country-ETF-daily.csv AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US MA PK AE QA SA 202201 0.547280 1.149944 1.192422 0.547289 -0.407459 1.694421 1.536473 0.097345 1.907697 -0.013895 1.221743 1.638844 -0.368943 0.414399 0.042166 -0.006234 1.582979 NA 0.224131 NA NA NA NA 2.548363 0.456836 0.370019 NA NA 2.555645 0.903208 0.315024 -0.088273 0.414096 1.089137 1.960306 0.078862 1.261945 1.215283 1.435721 0.308269 0.616929 0.074402 -0.397877 NA 2.289492 0.179543 NA -0.148698 0.773003 0.261818 202202 0.531193 0.129895 -0.174379 0.130838 0.284484 0.678856 0.598186 0.803453 0.531718 0.793295 0.710997 -3.220668 -0.089544 0.135609 4.491420 -0.010400 1.637369 NA 0.129307 NA NA NA NA 1.578363 0.201900 0.760538 NA NA 0.213631 0.203231 0.499874 0.763587 0.562133 0.680689 0.263907 0.151655 0.067339 -2.808181 0.442892 0.129968 1.400582 0.093068 1.361696 NA -0.011292 0.000000 NA 1.534273 0.000000 0.828499 202203 -0.177781 -0.004356 -0.811008 -0.984324 -0.493174 0.323106 -0.746492 0.041913 0.310798 0.231841 0.953292 0.205061 0.368590 -0.083101 0.875527 -0.693379 0.085143 NA 0.654976 NA NA NA NA -1.078182 -0.603615 -1.075438 NA NA -0.271150 -0.697954 0.177759 -0.095078 -0.617693 -0.153650 -0.335804 -0.857452 -0.721859 -0.460942 -0.952408 -0.914282 -1.483243 0.023492 -0.276927 NA -1.383924 0.772242 NA 0.227109 0.000000 -0.068411 202204 0.565469 0.953312 -1.521909 3.186653 0.372052 -0.693193 0.116741 1.262988 -0.765657 0.646296 -1.440437 0.004594 0.234312 0.052000 -0.613548 0.735590 1.061893 NA 0.305623 NA NA NA NA -1.318334 0.812328 0.601321 NA NA 1.906264 0.410217 0.283497 0.423915 -0.194340 1.019574 -0.237111 0.326330 0.511306 0.006810 0.803217 0.710218 0.646461 0.011348 0.732527 NA -2.804547 0.000000 NA 0.000000 0.000000 0.000000 202205 -0.263717 -0.164763 -0.515901 2.279579 1.959117 0.557097 -0.336877 1.057413 -0.565459 1.572992 0.445959 0.010527 1.561389 0.433028 2.635568 1.839213 0.818061 NA -0.823026 NA NA NA NA 1.769972 0.856755 0.950011 NA NA -0.166399 -0.858810 0.129545 0.257528 -0.763044 -0.505884 -0.773514 -0.744378 -0.594139 -0.227145 -0.294141 -0.197975 0.845504 -0.010354 -0.043525 NA -0.716139 0.505240 NA 1.005684 0.000000 -0.189026 202206 -1.475059 -0.562635 -0.821784 0.057141 -0.657057 -0.228367 -0.927995 -2.173332 -1.257009 -0.617513 -1.736676 -11.146542 -0.496867 -0.932739 -2.942384 -2.801136 -1.675359 NA -0.007251 NA NA NA NA -3.100414 -0.965654 -2.262768 NA NA -2.168846 -0.408254 -1.700924 -0.415290 -1.245070 -0.559802 -1.598393 -1.655982 -2.270164 -1.321312 -0.922674 -1.852214 -0.772996 -0.021100 -0.961815 NA -0.863734 0.357573 NA -0.573802 NA -0.016509 For convince save the path to the return file you choose to use as ret.file, example shown below: ret.file &lt;- &quot;C:\\\\EPFR\\\\returns\\\\PsuedoReturns-Country-ETF-daily.csv&quot; 8.3 Strategy Implementation The final step is implementing this strategy to create a signal. Lets begin by reading in the aggregate indicator and return files to our R studio work space. x &lt;- as.matrix(mat.read(indicator.file)) # GET ACTIVE/PASSIVE INDICATOR C:\\\\EPFR\\\\monthly\\\\ActPasCtry-monthly.csv y &lt;- mat.read(ret.file) # GET TOTAL RETURN INDEX C:\\\\EPFR\\\\returns\\\\PsuedoReturns-Country-ETF-daily.csv Before we the data is ready, we will first need to apply the mat.daily.to.monthly() function to ensure that return data is correctly indexed by month, as mentioned previously (help: ?mat.daily.to.monthly()). y &lt;- mat.daily.to.monthly(y, T) One of our first options is choosing the universe we want to use. EPFR has tested this signal within three different universes of countries ACWI (All Country World Index), EAFE (Europe, Australasia, and the Far East), and EM (Emerging Markets). For this example, we choose ACWI, which includes 52 countries. idx &lt;- &quot;ACWI&quot; Depending on what universe \\(idx\\) the user chooses to test, the indicator file \\(x\\) and return file \\(y\\) must both be subset to the correct countries. Running the code below, which calls from functions contained inlibrary('EPFR'), helps identify every member that was included the selected universe during the period over which we are backtesting. x &lt;- x[, is.element(dimnames(x)[[2]], Ctry.msci.members.rng(idx, dimnames(x)[[1]][1], dimnames(x)[[1]][dim(x)[1]]))] # SUBSET TO INDEX COUNTRIES A few other adjustments must also be applied to our monthly Active/Passive signal data to ensure that it aligns with returns. First  the internally-generated fund returns are only available with sufficient coverage from the end of 2015 onwards. Second  fund returns for country ISO codes JO and VE are unavailable. startdate &lt;- &quot;20150512&quot; x &lt;- x[rownames(x)&gt;=startdate, ] # SUBSET TIME PERIOD ctry &lt;- c(&#39;JO&#39;, &#39;VE&#39;) x &lt;- x[, !(dimnames(x)[[2]] %in% ctry)] Next we will need to ensure that the data structure in \\(x\\) and \\(y\\) are completely aligned, having the same column names in the same order. Below we will subset the columns of \\(y\\) to use the same countries, in the same order as \\(x\\). y &lt;- y[, dimnames(x)[[2]]] # TOTAL RETURN INDEX * Note: subsetting can be also be done when creating the indicator and return files 8.3.1 Moving Sum of Indicator Next, we set up a variable for our look-back period. This variable will be the window of time across which we smooth the signal for each country. The look-back period we choose for our demonstrations is 12 months. lookback &lt;- 12 # LOOKBACK (IN MONTHS) Now, using the function from the library('EPFR.r'), called compound.flows() we compute the moving sum of our signal over the trailing lookback period for each country. x &lt;- compound.flows(x, lookback, T) # COMPUTE MOVING SUM AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US MA PK AE QA SA 202201 -5.117164 4.678409 -5.655730 2.567462 4.723583 5.463615 -5.396886 5.092788 5.806146 -8.940355 0.2127890 11.291808 6.580787 -4.331993 4.598560 1.717442 -2.337778 37.33551 -1.852158 -4.854193 4.747390 31.76519 28.36629 -2.172202 -4.960506 -0.2916124 13.09126 7.164393 -1.817267 -1.976079 -1.1403057 2.2294622 -5.361904 0.1641512 -4.941868 -1.144588 -2.466260 21.57215 9.252658 -2.382309 -1.250053 1.183348 -4.141872 1.628550 0.5623372 2.442255 36.00374 -2.001183 -4.747304 -4.489196 202202 -5.072419 4.637230 -5.621818 2.574939 5.331131 5.494082 -5.388036 5.121049 5.941346 -8.932020 0.4178712 10.642956 6.848616 -4.216254 4.004105 1.822039 -2.401967 39.95124 -1.770836 -4.858818 4.345430 30.62884 27.65854 -2.324806 -4.962109 -0.5969357 13.16735 7.116680 -1.931579 -1.983764 -1.0847287 1.6754867 -5.465089 0.2845010 -4.910503 -1.164140 -2.437013 21.85479 9.576143 -2.471491 -1.279265 1.084992 -4.192530 1.717976 0.5468860 2.468647 36.43622 -2.196695 -4.636670 -4.465992 202203 -5.015681 4.643543 -5.574692 2.597466 6.155813 5.484428 -5.358121 5.147998 6.013065 -8.930333 0.5304089 11.705001 7.138094 -4.124273 3.461151 1.894532 -2.465178 41.44260 -1.847794 -4.892082 3.413912 29.36388 26.38921 -2.492902 -4.796030 -0.8192064 13.35556 6.587172 -1.989177 -1.978598 -1.0278146 1.3565412 -5.542525 0.2927595 -4.913480 -1.203407 -2.435036 21.01725 10.011778 -2.557305 -1.358146 1.102749 -4.263043 1.870577 0.5366788 2.639549 35.90684 -2.383396 -4.548398 -4.496952 202204 -4.947918 4.535185 -5.495884 2.520172 6.801915 5.411781 -5.328401 5.101505 6.032498 -8.918860 0.4628795 10.434452 7.345398 -4.049834 2.570905 1.894301 -2.578488 43.34312 -2.056172 -4.943089 2.905736 27.74858 26.86343 -2.622450 -4.680218 -1.0788292 12.86845 6.647043 -1.984618 -1.980360 -0.9948773 1.1127796 -5.603665 0.3202932 -4.919820 -1.221229 -2.429764 19.64961 10.381683 -2.613288 -1.398923 1.051464 -4.309179 1.910272 0.6001556 2.517206 34.76934 -2.499323 -4.464717 -4.523993 202205 -4.820733 4.507865 -5.434879 2.465613 7.397669 5.387254 -5.277615 5.057851 6.143054 -8.821450 0.3577807 9.211567 7.630802 -3.913319 1.788540 1.904205 -2.730111 43.94098 -2.188964 -4.991435 2.297136 26.12656 27.10910 -2.688053 -4.603027 -1.2426424 12.76230 6.535463 -1.951538 -1.976833 -0.9690803 0.8319998 -5.711483 0.3444544 -4.914463 -1.230629 -2.437072 18.39921 10.585603 -2.657278 -1.443286 1.065102 -4.333185 2.030077 0.6219051 2.330161 33.43916 -2.482779 -4.381071 -4.558491 202206 -4.671999 4.474621 -5.356142 2.505159 7.969634 5.359422 -5.231112 4.989937 6.264760 -8.704054 0.1956019 8.055630 7.883029 -3.736385 1.005881 1.885444 -2.846336 45.64295 -2.337513 -4.882090 1.794952 24.42459 26.72583 -2.756549 -4.485215 -1.3480140 12.58793 6.386792 -1.964803 -1.980810 -0.9705799 0.5179211 -5.774074 0.3909402 -4.924925 -1.248182 -2.444340 17.20674 10.804709 -2.718384 -1.487150 1.255855 -4.375402 2.150373 0.6290547 2.121053 31.55198 -2.326925 -4.316165 -4.519375 8.3.2 Total Return Index We will now convert our percentage returns data \\(y\\) to total index returns indexed so that time moves forward. To do this we will use function ret.to.idx() from library('EPFR.r'). We also use the functions map.rname() to ensure the row names of the matrices line up with our flow file and ret.idx.gaps.fix() to replace any NA values. Please refer to the library documentation for the complete list of parameters for these functions (tip: ?ret.to.idx(),?ret.idx.gaps.fix() ). y[is.na(y)] &lt;- 0 y &lt;- ret.to.idx(map.rname(y, dimnames(x)[[1]])) # CONVERT TO A TOTAL-RETURN INDEX y &lt;- ret.idx.gaps.fix(y) 8.3.3 Ranking Countries Next, we sort each of the countries in our universe into five equal bins based on the last 12-month Active/Passive Indicator values for the selected holding period. To do this, we will use the function from library('EPFR.r'), called bbk(). This function will output a standardized backtest result. The bbk() function requires our 12-month Active/Passive indicator, total return index data, and our selected universe. Please refer to the library documentation for the complete list of parameters of this function (tip: ?bbk()). The first parameter we add is the number of bins we want to use. For our case, we want to use 5 because our strategy is to go long the top fifth and short the bottom fifth. nBin &lt;- 5 # NUMBER OF BINS Since EPFR data is published with T+23 day lag and is released around 5:00 pm EST, we account for a T+1 month delay in our model. delay &lt;- 1 # DELAY IN KNOWING DATA (IN MONTHS) The day of the week the rebalancing occurs is at the discretion of the user, but for this example we will set the day of the week to trade as N/A.This allows the bbk() function to default to monthly-indexed returns, and avoids trading on a specific weekday on each rebalancing date. doW &lt;- NULL # DAY OF THE WEEK YOU WILL TRADE ON (5 = FRIDAYS) Additionally, we also evaluate the returns for different holding periods. The user can input return horizons that they are interested in here. For this example we define a return horizon for monthly, quarterly, semi-annual, and annual rebalancing, but is it important to note that this model can be re-balanced as desired. hz &lt;- c(1, 3, 6, 12) # RETURN HORIZON (IN MONTHS) Now that we have defined all of our inputs, to rank the countries into quintiles by their 12-month Active/Passive indicator, we call function bbk() for a 1-month holding period. By adding the selected backtesting universe as an input to the function, we can ensure that the model tracks additions and removals of countries over time, and is therefore able to identify all members on a point-in-time basis. z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, idx) 8.3.4 Model 12 month cumulative indicator ranked into quintiles (computed only where forward returns are available) z[[&quot;bins&quot;]] AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US MA PK AE QA SA 202210 5 1 5 2 1 1 5 1 1 5 2 NA 1 4 3 2 4 NA 4 NA NA NA NA 4 4 3 NA NA 3 3 3 2 5 2 5 3 4 1 1 4 3 2 5 NA 2 NA NA 3 NA 5 202209 5 2 5 2 1 1 5 1 1 5 2 NA 1 4 3 2 4 NA NA NA NA NA NA 4 4 3 NA NA 3 3 3 2 5 2 5 3 4 1 1 4 3 2 5 NA 2 NA NA 4 NA 4 202208 5 1 5 2 1 1 5 1 1 5 3 NA 1 4 2 2 4 NA 4 NA NA NA NA 4 5 3 NA NA 3 3 3 2 5 2 5 3 4 1 1 4 3 2 4 NA 2 NA NA 3 NA 5 202207 5 2 5 2 1 1 5 1 1 NA 3 NA 1 4 2 2 4 NA 4 NA NA NA NA 4 5 3 NA NA 3 3 3 2 5 2 5 3 4 1 1 4 3 2 4 NA 2 NA NA 4 NA 5 202206 5 2 5 2 1 1 5 1 1 NA 2 NA 1 4 2 2 4 NA 4 NA NA NA NA 4 5 3 NA NA 3 3 3 2 5 3 5 3 4 1 1 4 3 2 4 NA 2 NA NA 4 NA 5 202205 5 1 5 2 1 1 5 1 1 5 2 NA 1 4 2 2 4 NA 3 NA NA NA NA 4 5 3 NA NA 3 3 3 2 5 3 5 3 4 1 1 4 3 2 4 NA 2 NA NA 4 NA 5 Quintile Returns over the equal-weight universe z[[&quot;rets&quot;]] Q1 Q2 Q3 Q4 Q5 TxB uRet 202210 0.6620801 0.2447392 -0.5474274 -0.0486223 -0.2862549 0.9483350 0.7134352 202209 0.2177060 0.1127918 -0.2642686 -0.0491221 -0.0262027 0.2439087 0.2560926 202208 0.5099108 -0.4994066 -0.0643303 -0.1229586 0.0989890 0.4109217 0.0842466 202207 0.3996864 0.0848470 -0.2633860 -0.2171199 0.0148687 0.3848177 -0.3086101 202206 0.0346536 -0.5115993 0.5362296 -0.1832487 0.2232286 -0.1885750 0.7441408 202205 0.2295339 -0.0642279 -0.0101624 -0.4418462 0.2234434 0.0060905 -1.1819405 Def: TxB represents summary statistics for the long short portfolio (top - bottom = Q1 - Q5 = overall portfolio returns) 8.3.5 Performance Go long the top basket and short the bottom basket. Performance over all holding periods fcn &lt;- function(retW) {as.matrix(bbk(x, y, 1, retW, nBin, doW, T, 0, delay, idx)$summ)} # DEFINE SUMMARY FUNCTION sapply(split(hz, hz), fcn, simplify = &quot;array&quot;) # WRITE SUMMARIES Q1 Q2 Q3 Q4 Q5 TxB uRet Annually AnnMn 2.360933e-01 -2.543786e-01 3.327623e-01 -3.162431e-01 1.366470e-02 2.224286e-01 -2.025473e-01 AnnSd 1.147053e+00 7.514113e-01 4.682933e-01 5.959022e-01 7.507300e-01 1.714557e+00 1.840460e+00 Sharpe 1.925952e+01 -2.661848e+01 7.859352e+01 -6.377080e+01 5.736057e-01 1.240388e+01 -1.095737e+01 HitRate 5.277778e+00 -1.194444e+01 2.416667e+01 -2.388889e+01 -8.888889e+00 -5.555556e+00 3.055556e+00 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -1.494123e+00 -2.118059e+00 -2.884156e-01 -2.115540e+00 -1.529416e+00 -2.443119e+00 -4.315926e+00 DDnBeg 2.019232e+05 2.016898e+05 2.019398e+05 2.016898e+05 2.017315e+05 2.019398e+05 2.019148e+05 DDnN 2.083333e+00 3.583333e+00 1.000000e+00 3.833333e+00 2.750000e+00 2.416667e+00 2.333333e+00 AnnTo 4.222994e+01 5.235725e+01 4.757716e+01 4.684799e+01 3.533565e+01 7.756559e+01 0.000000e+00 Monthly AnnMn 3.706081e-01 -1.464025e-01 2.834796e-01 -2.208219e-01 -2.650967e-01 6.357048e-01 4.521240e-02 AnnSd 8.563774e-01 1.076763e+00 7.655591e-01 7.910944e-01 7.111503e-01 1.247842e+00 1.776624e+00 Sharpe 4.327626e+01 -1.359654e+01 3.702909e+01 -2.791347e+01 -3.727717e+01 5.094436e+01 2.544848e+00 HitRate 5.128205e+00 -6.410256e+00 5.128205e+00 -1.025641e+01 0.000000e+00 7.692308e+00 -1.898734e+00 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -2.681769e+00 -2.341680e+00 -1.139412e+00 -2.325356e+00 -2.956199e+00 -3.481014e+00 -5.780692e+00 DDnBeg 2.019080e+05 2.020090e+05 2.022070e+05 2.017120e+05 2.016100e+05 2.019120e+05 2.019090e+05 DDnN 1.800000e+01 2.400000e+01 4.000000e+00 5.900000e+01 3.800000e+01 1.400000e+01 2.600000e+01 AnnTo 1.675407e+02 2.135925e+02 2.177215e+02 2.024714e+02 1.710669e+02 3.386076e+02 0.000000e+00 Quarterly AnnMn 4.984723e-01 -3.901768e-01 3.538981e-01 -2.621338e-01 -2.022081e-01 7.006804e-01 -1.124976e-01 AnnSd 1.024765e+00 9.730449e-01 6.967631e-01 7.277884e-01 6.511449e-01 1.365985e+00 1.618146e+00 Sharpe 4.917659e+01 -4.000806e+01 5.196707e+01 -3.603273e+01 -3.084254e+01 5.212115e+01 -8.577596e+00 HitRate 1.312821e+01 -1.179487e+01 6.564103e+00 -1.184615e+01 -6.512821e+00 9.179487e+00 6.666667e-01 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -2.329033e+00 -2.545941e+00 -6.974503e-01 -2.430299e+00 -2.711958e+00 -3.436083e+00 -5.518941e+00 DDnBeg 2.019413e+05 2.017413e+05 2.020040e+05 2.018403e+05 2.016100e+05 2.019403e+05 2.019090e+05 DDnN 5.666667e+00 1.933333e+01 2.333333e+00 1.566667e+01 1.200000e+01 8.666667e+00 8.333333e+00 AnnTo 6.067521e+01 8.531502e+01 8.365527e+01 8.330281e+01 6.150997e+01 1.221852e+02 0.000000e+00 Semi-Annual AnnMn 3.684152e-01 -3.892728e-01 4.644043e-01 -3.555294e-01 -1.025337e-01 4.709489e-01 -1.882637e-01 AnnSd 1.168825e+00 8.582451e-01 5.756527e-01 6.941787e-01 6.500845e-01 1.531985e+00 1.647724e+00 Sharpe 3.188337e+01 -4.914146e+01 8.100068e+01 -5.203416e+01 -1.633848e+01 3.199072e+01 -1.127905e+01 HitRate 7.692308e+00 -1.581197e+01 2.264957e+01 -1.431624e+01 -1.164530e+01 6.196581e+00 2.457265e+00 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -1.949173e+00 -2.595338e+00 -3.923071e-01 -2.423604e+00 -2.131821e+00 -3.166323e+00 -4.997404e+00 DDnBeg 2.019565e+05 2.017428e+05 2.019702e+05 2.017545e+05 2.016585e+05 2.019565e+05 2.019095e+05 DDnN 3.666667e+00 8.333333e+00 1.166667e+00 9.833333e+00 5.833333e+00 4.333333e+00 4.333333e+00 AnnTo 5.206849e+01 6.941477e+01 6.277896e+01 6.298670e+01 4.417735e+01 9.624585e+01 0.000000e+00 Annualized mean one-week returns bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, idx)$annSumm # DISPLAY CALENDAR-YEAR RETURNS Q1 Q2 Q3 Q4 Q5 TxB uRet nPrds 2016 1.8603089 -1.0134944 0.3020191 -1.0624729 -0.1094739 1.9697827 1.6306345 6 2017 -0.0253753 -1.0028518 0.1869877 1.2511589 -0.3951589 0.3697836 0.1779952 12 2018 -0.1622709 1.1858780 0.9357913 -0.7708582 -0.9391669 0.7768960 1.3943653 12 2019 1.3539924 -0.1648449 -0.6192540 0.5713747 -1.2428261 2.5968186 1.3567260 12 2020 -1.9204924 0.8330956 1.8299606 -1.6347049 0.7771602 -2.6976526 -2.7352694 12 2021 0.1584688 -1.0532849 -0.1439689 0.4361039 0.6169839 -0.4585150 -2.5809790 12 2022 2.0744756 -0.2428611 -0.4979089 -0.7571803 -0.4853840 2.5598596 1.7336066 12 "],["activepassive-sector-strategy.html", "9 Active/Passive Sector Strategy 9.1 Overview 9.2 Data 9.3 Strategy Implementation", " 9 Active/Passive Sector Strategy 9.1 Overview The Active/Passive Sector Strategy is an equity-based rotation strategy that ranks different sectors across a customized universe of geographic regions. This approach uses the stated monthly sector allocations of equity funds and EPFRs fund classification to create an indicator. 9.2 Data The Active/Passive Sector Strategy developed by EPFR Global uses the ratio of average allocation of active over passive funds. This section aims to give the reader an understanding of the methodology for constructing the variables used in the strategy. 9.2.1 Aggregations The first step is defining a subset of data to capture in calculating our signal. This strategy uses the following portions of the EPFR dataset; Equity fund-level sector weightings, using the EPFR Sector Allocation database. Equity fund-level country weightings, using the EPFR Country Allocation database. Funds with a geographic mandate confined to the country or region of interest (e.g. for U.S. sector, we look only at funds that have a mandate to invest in the United States). Active/Passive tagging at the fund level, using EPFRs fund classifications. Active and passive equity funds which report their sector allocations to EPFR have grown substantially over time. The figure below shows EPFRs coverage over time of funds used to create this signal for different countries and regions. Updated at the end of July each year Users looking for more specific detail can customize this aggregation even further using EPFRs fund-level or share class-level granularity. Some good examples would be to consider only ETFs or mutual funds, geographic mandate, and fund domicile. Users can leverage these tags to different degrees in creating aggregated signals to backtest. Further detail about this is available in section 3. This can be achieved using fund-level allocation files or reaching out to EPFRs quant team for customized aggregations. 9.2.2 Active/Passive Indicator To begin calculating the Active/Passive indicator, we start with our subset of active and passive equity funds with a geographic mandate confined to the country or region of interest. First, we calculate a funds weighting to each sector, within our region or country of interest, as the product of its stated sector and country allocation. \\[\\text{Fund Weight}_{i,s,r,m} = \\text{Sector Allocation}_{i,s,m} \\times \\text{Country Allocation}_{i,r,m}\\] Where: \\(\\text{Fund Weight}\\) = weighting to sector \\(s\\), within country or region \\(r\\), across all funds in our universe \\(i\\), for month \\(m\\) Then, for each sector, we compute equally-weighted average allocations, within our country or region. These equal-weight averages are computed separately across active and passive funds, shown below. \\[\\overline{\\text{Active Allocation}}_{s,r,m} = \\frac{\\sum^{N}_{i=n}{\\text{Fund Weight}_{i,s,r,m}}}{N}\\] Where: \\(\\overline{\\text{Active Allocation}}\\) = the equally-weighted average allocations to a sector \\(s\\), within country or region \\(r\\), across all Active funds \\(i\\), for month \\(t\\) \\[\\overline{\\text{Passive Allocation}}_{s,r,m} = \\frac{\\sum^{N}_{i=n}{\\text{Fund Weight}_{i,s,r,m}}}{N}\\] Where: \\(\\overline{\\text{Passive Allocation}}\\) = the equally-weighted average allocations to a sector \\(s\\), within country or region \\(r\\), across all Passive funds \\(i\\), for month \\(m\\) Finally, to get our Active/Passive Indicator for a sector within our country or region, we express the average allocation of active funds as percentage of that over passive funds. \\[\\text{Active/Passive Indicatior}_{s,r,m} = \\frac{\\overline{\\text{Active Allocation}}_{s,r,m}}{\\overline{\\text{Passive Allocation}_{s,r,m}}}\\] Where: \\(\\text{Active/Passive Indicatior}\\) = the ratio of average active over passive allocations to a sector \\(s\\), within country or region \\(r\\), across all Passive funds \\(i\\), for month \\(m\\) We repeat this across all different sectors and countries or regions for the entire history. 9.2.3 Aggregate Indicator File Users may create the Active/Passive indicator for their desired sector and country aggregations using the methodology described in the previous section. Users also have the option to use the Active/Passive Sector Strategy files EPFR provides, which are updated monthly at 5:00 PM est. with a T+23 day lag, and are available in the users EPFR FTP connection under the strategies folder. There are five different types of Active/Passive Sector Strategy files available for different countries or geographic regions which include; Emerging Markets (EM), Japan (JP), United Kingdom (UK), Eurozone, and the United States (US). Each of these files contain aggregate Active/Passive indicator data for 12 sectors (displayed below). For this demonstration, we will focus on the US so we will be using the file ActPasSector-US-monthly.csv, which can be downloaded from the users ftp under the folder Strategies/monthly and can be stored in the users local folder EPFR/monthly. Below shows a snippet of what this file contains: Strategies/monthly/ActPasSector-US-monthly.csv CDisc CStpls Engy Fins HCare Indls Tech Matls Telco Utes REst FinsExREst 202201 -0.0433309 -0.2569239 -0.0847072 -0.0257469 0.0903608 0.0596510 -0.0019699 -0.0933515 1.0445337 -0.4266538 -0.6044792 0.1126693 202202 -0.0409194 -0.2444632 -0.1180361 -0.0344230 0.1048389 0.0656965 0.0052952 -0.1229965 0.9884343 -0.4413073 -0.6168956 0.1026448 202203 -0.0321449 -0.2341893 -0.0948149 -0.0500640 0.1074406 0.0747911 0.0012635 -0.1240600 0.9621974 -0.4181823 -0.5910677 0.0834273 202204 -0.0299786 -0.2415415 -0.1160230 -0.0595987 0.1177913 0.0611670 0.0134044 -0.1411849 0.9257296 -0.4332796 -0.5914524 0.0828742 202205 -0.0220213 -0.2374495 -0.1246013 -0.0375359 0.1032653 0.0726302 0.0091783 -0.0900981 0.7769177 -0.4187418 -0.5691501 0.0965970 202206 -0.0332674 -0.2413157 -0.1121087 -0.0483676 0.1201985 0.0606431 0.0013251 -0.0841842 0.7326374 -0.4030974 -0.5752789 0.0890789 For convince save the path to the active/passive indicator file you choose to use as indicator.file, example shown below: indicator.file &lt;- &quot;C:\\\\EPFR\\\\monthly\\\\ActPasSector-US-monthly.csv&quot; 9.2.4 Return File The return file for this strategy should contain monthly equity returns for each of the sectors in the aggregate indicator file, over the period of time and within the country or region the user wants to backtest. The user can choose to use return data found with their own resources, or they have the option to use a file EPFR provides of Sector Returns, which is available in the users EPFR FTP connection under the Returns folder ( 11.1 ). The Return file that EPFR provides contains Fund Return data and can be used as a proxy to equity market returns. The user can recreate these files using EPFR daily flow data with the following equation: \\[\\text{Fund Return}_{s,r,t} = 100 \\times \\frac{\\sum^{N}_{i=m} \\text{Portfolio Change}_{i,s,r,t}}{\\sum^{N}_{i=m} \\text{Assets Start}_{i,s,r,t}}\\] Where: \\(\\text{Fund Return}\\) = the percentage return of sector \\(s\\), for country or region \\(r\\), across all funds in our universe \\(i\\), for day \\(t\\) However, since this signal is limited to monthly granularity, it is important to ensure that returns are also indexed by month. If the users return file is indexed daily or weekly, the function mat.daily.to.monthly(, T) from library('EPFR.r') should be used when implementing the strategy. For this demonstration, we will focus on the US so we will be using the file PsuedoReturns-Sector-US-daily.csv, which can be downloaded from the users ftp under the folder Returns/daily and can be stored in the users local folder EPFR/returns. Below shows a snippet of what this file contains: Returns/daily/PsuedoReturns-Sector-US-daily.csv CDisc CStpls Engy Fins HCare Indls Tech Matls Telco Utes REst 202201 2.457867 NA 0.967615 0.922865 2.102820 1.438713 4.022171 1.422923 2.425002 1.715978 1.247590 202202 -0.211507 NA 3.039501 -0.812586 -0.345352 1.105089 0.252647 -0.165339 -0.149913 0.666561 -0.638588 202203 -1.471125 NA -1.253313 -1.417372 -0.961182 -1.597034 -1.792896 -1.072492 -1.858456 -0.322294 -0.823918 202204 -3.688983 NA -2.506160 -2.296956 -2.344701 -2.722575 -3.912571 -2.043036 -3.386828 -2.927519 -3.008072 202205 -0.275990 NA -1.268234 -0.212988 -1.565658 -0.891486 -0.816681 -1.790260 -0.171689 -1.241383 -0.607755 202206 -0.727714 NA -1.816846 -0.665003 -0.524416 0.537997 -1.544673 -1.675792 -1.192192 0.817509 -0.187776 For convince save the path to the return file you choose to use as ret.file, example shown below: ret.file &lt;- &quot;C:\\\\EPFR\\\\returns\\\\PsuedoReturns-Sector-US-daily.csv&quot; 9.3 Strategy Implementation The final step is implementing this strategy to create a signal. Lets begin by reading in the aggregate indicator and return files to our R studio work space. x &lt;- mat.read(indicator.file) # GET ACTIVE/PASSIVE INDICATOR C:\\\\EPFR\\\\monthly\\\\ActPasSector-US-monthly.csv y &lt;- mat.read(ret.file) # GET TOTAL RETURN INDEX C:\\\\EPFR\\\\returns\\\\PsuedoReturns-Sector-US-daily.csv Before we the data is ready, we will first need to apply the mat.daily.to.monthly() function to ensure that return data is correctly indexed by month, as mentioned previously (help: ?mat.daily.to.monthly()). y &lt;- mat.daily.to.monthly(y, T) Now, we will need to ensure that the data structure in \\(x\\) and \\(y\\) are completely aligned, having the same column names in the same order. Below we will subset the columns of \\(x\\) to use the same sectors, in the same order as \\(y\\). x &lt;- as.matrix(x[, dimnames(y)[[2]]]) # LINE UP INDICATORS WITH RETURNS * Note: subsetting can be also be done when creating the indicator and return files 9.3.1 Moving Sum of Indicator Next, we set up a variable for our look-back period. This variable will be the window of time across which we smooth the signal for each country. The look-back period we choose for our demonstrations is 12 months. lookback &lt;- 12 # LOOKBACK (IN MONTHS) Now, using the function from the library('EPFR.r'), called compound.flows() we compute the moving sum of our signal over the trailing lookback period for each sector. x &lt;- compound.flows(x, lookback, T) # COMPUTE MOVING SUM CDisc CStpls Engy Fins HCare Indls Tech Matls Telco Utes REst FinsExREst 202201 -0.7156276 -3.125668 -0.9110936 -0.1612643 0.7458485 0.4150336 -0.0528877 -0.8602142 13.83616 -5.061333 -7.300732 1.477671 202202 -0.6835107 -3.150278 -0.8738219 -0.1801454 0.7784470 0.4498826 -0.0339342 -0.9024594 13.76228 -5.126640 -7.300896 1.465128 202203 -0.6527746 -3.131600 -0.8590385 -0.2299449 0.8278040 0.4885882 -0.0236669 -0.9417546 13.69471 -5.135598 -7.278306 1.414010 202204 -0.6246197 -3.117799 -0.8779855 -0.2713483 0.8958192 0.5136460 -0.0101432 -1.0076511 13.46132 -5.139532 -7.247421 1.379699 202205 -0.5895009 -3.091071 -0.9465558 -0.2888459 0.9546409 0.5523154 -0.0025015 -1.0194861 13.05166 -5.119721 -7.202301 1.368803 202206 -0.5606572 -3.059903 -1.0011090 -0.3213590 1.0281215 0.5902327 -0.0017198 -1.0372759 12.56834 -5.085358 -7.162568 1.340906 9.3.2 Total Return Index We will now convert our percentage returns data \\(y\\) to total index returns indexed so that time moves forward. To do this we will use function ret.to.idx() from library('EPFR.r'). We also use the functions map.rname() to ensure the row names of the matrices line up with our flow file and ret.idx.gaps.fix() to replace any NA values. Please refer to the library documentation for the complete list of parameters for these functions (tip: ?ret.to.idx(),?ret.idx.gaps.fix() ). y[is.na(y)] &lt;- 0 y &lt;- ret.to.idx(map.rname(y, dimnames(x)[[1]])) # CONVERT TO A TOTAL-RETURN INDEX y &lt;- ret.idx.gaps.fix(y) 9.3.3 Ranking Sectors Next, we sort each of the sectors in our country or region into five equal bins based on the last 12-month Active/Passive Indicator values for the selected holding period. To do this, we will use the function from library('EPFR.r'), called bbk(). This function will output a standardized backtest result. The bbk() function requires our 12-month Active/Passive indicator and total return index data. Please refer to the library documentation for the complete list of parameters of this function (tip: ?bbk()). The first parameter we add is the number of bins we want to use. For our case, we want to use 5 because our strategy is to go long the top fifth and short the bottom fifth. nBin &lt;- 5 # NUMBER OF BINS Since EPFR data is published with T+23 day lag and is released around 5:00 pm EST, we account for a T+1 month delay in our model. delay &lt;- 1 # DELAY IN KNOWING DATA (IN MONTHS) The day of the week the rebalancing occurs is at the discretion of the user, but for this example we will set the day of the week to trade as N/A.This allows the bbk() function to default to monthly-indexed returns, and avoids trading on a specific weekday on each rebalancing date. doW &lt;- NULL # DAY OF THE WEEK YOU WILL TRADE ON (5 = FRIDAYS) Additionally, we also evaluate the returns for different holding periods. The user can input return horizons that they are interested in here. For this example we define a return horizon for monthly, quarterly, semi-annual, and annual rebalancing, but is it important to note that this model can be re-balanced as desired. hz &lt;- c(1, 3, 6, 12) # RETURN HORIZON (IN MONTHS) Now that we have defined all of our inputs, to rank the sectors into quintiles by their 12-month Active/Passive indicator, we call function bbk() for a 1-month holding period. z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay) 9.3.4 Model 12 month cumulative indicator ranked into quintiles (computed only where forward returns are available) z[[&quot;bins&quot;]] CDisc CStpls Engy Fins HCare Indls Tech Matls Telco Utes REst 202210 3 NA 4 1 2 2 3 4 1 5 5 202209 3 NA 4 1 2 2 3 4 1 5 5 202208 3 NA 4 1 2 2 3 4 1 5 5 202207 3 NA 4 1 2 2 3 4 1 5 5 202206 3 NA 4 1 2 2 3 4 1 5 5 202205 3 NA 4 1 2 2 3 4 1 5 5 Quintile Returns over the equal-weight universe z[[&quot;rets&quot;]] Q1 Q2 Q3 Q4 Q5 TxB uRet 202210 0.3844391 -0.1382389 1.1863906 -0.9202874 -0.5123034 0.8967425 2.4868979 202209 -0.5325965 0.1837215 -0.4585510 0.6320340 0.1753920 -0.7079885 -0.4308140 202208 0.1039982 -0.0734268 -0.7122723 0.5122117 0.1694892 -0.0654910 -0.9890212 202207 0.3624280 0.0512595 -0.2209815 -0.2695390 0.0768330 0.2855950 -0.6301745 202206 -0.5297859 -0.4560059 0.1644676 1.2780561 -0.4567319 -0.0730540 1.1646219 202205 -0.2307069 0.7046811 -0.4383029 -1.0484284 1.0127571 -1.2434640 -0.6978906 Def: TxB represents summary statistics for the long short portfolio (top - bottom = Q1 - Q5 = overall portfolio returns) 9.3.5 Performance Go long the top basket and short the bottom basket. Performance over all holding periods fcn &lt;- function(retW) {as.matrix(bbk(x, y, 1, retW, 5, NULL, T, 0, delay)$summ)} # DEFINE SUMMARY FUNCTION mat.ex.array3d(sapply(split(hz, hz), fcn, simplify = &quot;array&quot;)) # WRITE SUMMARIES Q1 Q2 Q3 Q4 Q5 TxB uRet Annually AnnMn -6.218319e-01 -1.476475e-01 4.196839e-01 -6.464450e-01 9.230832e-01 -1.544915 -8.579572e-01 AnnSd 1.378370e+00 1.345271e+00 2.607213e+00 2.084279e+00 1.166986e+00 2.019166 3.221771e+00 Sharpe -4.741888e+01 -1.735692e+01 1.418552e+01 -3.028606e+01 8.331947e+01 -78.414696 -2.654787e+01 HitRate -1.689394e+01 -1.151515e+01 -1.545455e+01 -1.666667e+00 3.787879e+01 -33.106061 -5.833333e+00 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -8.305167e+00 -4.677691e+00 -3.786027e+00 -9.205988e+00 -1.249490e+00 -17.414246 -1.287676e+01 DDnBeg 2.011648e+05 2.013232e+05 2.014148e+05 2.015148e+05 2.019732e+05 201164.833333 2.019065e+05 DDnN 7.333333e+00 6.333333e+00 3.833333e+00 6.416667e+00 1.000000e+00 8.583333 2.916667e+00 AnnTo 3.143939e+01 5.344697e+01 6.128788e+01 5.534091e+01 2.405303e+01 55.492424 0.000000e+00 Monthly AnnMn -6.082073e-01 -1.811913e-01 -2.650759e-01 -1.837957e-01 7.930963e-01 -1.401304 -8.816524e-01 AnnSd 1.271006e+00 1.383531e+00 2.337018e+00 1.881433e+00 1.687557e+00 2.335399 3.334523e+00 Sharpe -4.785245e+01 -1.309630e+01 -1.134248e+01 -9.768916e+00 4.699672e+01 -60.002754 -2.644013e+01 HitRate -6.296296e+00 -4.074074e+00 -4.814815e+00 -3.333333e+00 9.259259e+00 -8.518519 -3.676471e+00 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -9.399097e+00 -7.747315e+00 -6.766105e+00 -8.175982e+00 -3.448997e+00 -18.507415 -1.650999e+01 DDnBeg 2.011090e+05 2.011100e+05 2.011080e+05 2.020030e+05 2.020010e+05 201108.000000 2.019040e+05 DDnN 9.200000e+01 1.020000e+02 3.900000e+01 2.200000e+01 6.000000e+00 101.000000 4.200000e+01 AnnTo 4.852941e+01 7.941176e+01 1.191176e+02 7.500000e+01 3.970588e+01 88.235294 0.000000e+00 Quarterly AnnMn -6.268940e-01 -1.551370e-01 -1.302912e-01 -2.884604e-01 8.578381e-01 -1.484732 -9.935848e-01 AnnSd 1.267839e+00 1.302129e+00 2.074130e+00 1.822093e+00 1.386998e+00 1.975170 3.084728e+00 Sharpe -4.966864e+01 -1.091156e+01 -6.217972e+00 -1.556783e+01 6.183763e+01 -75.207113 -3.221721e+01 HitRate -1.092593e+01 -4.141414e+00 -1.010101e+01 -6.414141e+00 1.313131e+01 -14.680135 -8.973064e+00 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -9.492684e+00 -5.547610e+00 -6.180985e+00 -7.460834e+00 -2.664197e+00 -18.665453 -1.558650e+01 DDnBeg 2.011393e+05 2.012423e+05 2.013717e+05 2.018050e+05 2.019413e+05 201139.333333 2.019030e+05 DDnN 2.800000e+01 2.466667e+01 1.400000e+01 1.500000e+01 2.333333e+00 32.666667 1.400000e+01 AnnTo 3.878788e+01 7.013468e+01 8.952862e+01 6.117845e+01 2.535354e+01 64.141414 0.000000e+00 Semi-Annual AnnMn -6.966079e-01 -1.095018e-01 1.580558e-01 -6.007321e-01 9.881369e-01 -1.684745 -9.439998e-01 AnnSd 1.301195e+00 1.296814e+00 2.017629e+00 2.010211e+00 1.483099e+00 2.067783 3.029637e+00 Sharpe -5.397042e+01 -1.006985e+01 8.018707e+00 -3.027864e+01 6.733267e+01 -81.812138 -3.160098e+01 HitRate -1.608947e+01 1.623377e+00 -1.305916e+01 -7.756133e+00 2.005772e+01 -20.815296 -1.103896e+01 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -9.669741e+00 -4.471301e+00 -4.174417e+00 -8.292961e+00 -2.113394e+00 -19.556428 -1.501046e+01 DDnBeg 2.011252e+05 2.013742e+05 2.016545e+05 2.013732e+05 2.019252e+05 201140.833333 2.019035e+05 DDnN 1.416667e+01 1.116667e+01 7.333333e+00 1.583333e+01 1.666667e+00 15.833333 6.666667e+00 AnnTo 3.740981e+01 6.565657e+01 7.633478e+01 5.728716e+01 2.442280e+01 61.832612 0.000000e+00 Annualized mean one-week returns bbk(x, y, 1, hz[1], 5, NULL, T, 0, delay)$annSumm # DISPLAY CALENDAR-YEAR RETURNS Q1 Q2 Q3 Q4 Q5 TxB uRet nPrds 2011 0.2641002 -0.9880383 -2.7207498 -2.5231278 2.7633642 -2.4992640 0.0487183 4 2012 -1.6973426 -0.4697251 -0.1885156 0.4279194 0.0927324 -1.7900750 2.9166006 12 2013 0.1934342 -0.5345483 -0.5271813 0.7483762 1.1883302 -0.9948960 -2.2906497 12 2014 -0.1235039 0.7656981 -4.8020164 -1.2333559 1.2602496 -1.3837535 -0.7522206 12 2015 -2.4251396 -1.5257936 5.5768054 -1.2514156 0.5996779 -3.0248175 -2.5920699 12 2016 -1.7013683 -2.5967263 0.3865787 1.9944217 1.9170942 -3.6184625 3.4823023 12 2017 -2.1532316 1.5519629 1.2104429 -1.1474221 0.5382479 -2.6914795 1.1371301 12 2018 -0.8896876 0.8755994 -0.9180501 2.2547074 -1.3275951 0.4379075 0.8687716 12 2019 -0.2484728 -3.6565318 -0.6058728 0.8628162 3.6480612 -3.8965340 0.4192918 12 2020 1.4907462 2.6155142 -1.5446173 -1.0054618 -1.5561813 3.0469275 -4.8401117 12 2021 1.6673300 1.0056315 -0.3435320 -3.6054485 1.2663035 0.4010265 -6.3864690 12 2022 -1.1379595 0.2834864 -0.3482493 0.7944049 0.4083175 -1.5462769 -2.1544751 11 output: html_document "],["flow-percentage-dm-rates-strategy.html", "10 Flow-Percentage DM Rates Strategy 10.1 Overview 10.2 Data 10.3 Strategy Implementation", " 10 Flow-Percentage DM Rates Strategy 10.1 Overview The Flow-Percentage DM Rates Strategy is a bond based rotation strategy, which ranks G10 countries based on a percentage flow indicator, and invests in their respective 10-year rates. This approach uses the stated allocations of bond funds with a cross-border focus and calculates percentage flow into G10 countries. G10 Countries used in analysis are: 1. United States 2. Europe 3. United Kingdom 4. Japan 5. Australia 6. New Zealand 7. Canada 8. Switzerland 9. Norway 10. Sweden 10.2 Data The Flow-Percentage DM Rates Strategy developed by EPFR Global is based on percentage flow into countries via cross-border bond funds. In this section, the reader will gain an understanding of the aggregations which can be used to create a signal as well as the methodology behind daily percentage flow calculations. 10.2.1 Aggregations The first step is defining a subset of data to capture in calculating our signal. This strategy requires; Bond funds with a cross-border focus. These are essentially any fund that has a mandate spanning more than one country. The vast majority of these will be global and regional funds. Funds must report both daily flows and country allocations, since these values are needed to calculate Daily Percentage Flow. Fixed income cross-border funds, which report their country allocations and their daily flows, are a subset of those that only report their fund flows to EPFR. The figure below shows EPFRs coverage of this universe over time compared to our total monthly and daily coverages. Updated at the end of July each year Users looking for more specific detail can customize this aggregation even further using EPFRs fund-level or share class-level granularity. Some good examples would be to consider only active, passive, ETFs or mutual funds, or only institutional or retail share class flows and assets. Users can leverage these tags to different degrees in creating aggregated signals to backtest. Further detail about this is available in section 3. This can be achieved using fund-level flow and allocation files or by reaching out to EPFRs quant team for customized aggregations. 10.2.2 Daily Percentage Flow To begin calculating Daily Percentage flow, we start with our subset of cross-border bond funds. To calculate the dollar flow into a country, we scale a funds flow by multiplying it against its stated country allocation, on that day. We then apply the same procedure to all funds with fund flow and country allocation information and then sum the flows for each country across all funds, to get the total dollar flow into a country. EPFR releases country allocations of all funds on the \\(23^{\\text{rd}}\\) of each month (or the next available business day) at a monthly frequency. Hence, our calculation assumes constant country weightings between two consecutive release dates within the month. \\[\\text{Total Flow}_{c,t} = \\sum^{N}_{i=m}{\\text{Flow}_{i,c,t} \\times \\text{Country Allocation}_{i,c}}\\] Where: \\(\\text{Total Flow}\\) = the total dollar flow into a country \\(c\\), across all funds in our universe \\(i\\), for day \\(t\\) We will want to normalize this figure. So, we repeat the process across the same funds Assets held under Management (AuM), to get the total AuM held in a country. \\[\\text{Total AuM}_{c,t} = \\sum^{N}_{i=m}{\\text{AuM}_{i,c,t} \\times \\text{Country Allocation}_{i,c}}\\] Where: \\(\\text{Total AuM}\\) = the total assets held in a country \\(c\\), across all funds in our universe \\(i\\), for day \\(t\\) Finally, to find the daily percentage flow for a country, we divide the total flow by the total AuM held in a country. \\[\\text{Percentage Flow}_{c,t} = \\frac{\\text{Total Flow}_{c,t}}{\\text{Total AuM}_{c,t}}\\] Where: \\(\\text{Percentage Flow}\\) = the scaled flow as a percentage into a country \\(c\\), across all funds in our universe \\(i\\), for day \\(t\\) We repeat this across all different countries for the entire history. 10.2.3 Aggregate Flow File Users may create flow percentages for their desired country aggregations and granularity using the methodology described in the previous section. Users also have the option to use the Flow-Percentage DM Strategy file EPFR provides, which is daily at 5:00 PM est. with a T+1 day lag, and is available in the users EPFR FTP connection under the strategies folder. The Flow-Percentage DM Strategy file contains aggregate percentage flow data for 52 countries in the ACWI, EAFE and Emerging Market country universes. For this demonstration, we will be using the file FloPctCtry-B-daily.csv, which can be downloaded from the users ftp under the folder Strategies/daily and can be stored in the users local folder EPFR/daily. Below shows a snippet of what this file contains: Strategies/daily/FloPctCtry-B-daily.csv AU CA CH DE GB JP NO NZ SE US 20220201 -0.0950507 -0.0315327 -0.3727611 -0.1047609 -0.0969043 0.0081440 -0.0657132 -0.1475318 -0.0844231 -0.0759766 20220202 -0.0469661 -0.0249638 -0.2127343 0.0741945 -0.0554096 -0.0186634 -0.0711573 -0.0314773 -0.0065801 -0.0266499 20220203 -0.0082617 0.0043339 -0.0404950 -0.0704836 -0.0494751 0.0709754 -0.0488570 0.0036287 -0.0407186 -0.0568840 20220204 -0.1367533 -0.0449064 -0.3684561 -0.1533709 -0.1369094 0.0093309 -0.1679166 -0.1858445 -0.2541709 -0.1108859 20220207 -0.1280167 0.0041454 -0.2162555 -0.2249074 -0.1607073 -0.0305696 -0.1262835 -0.1076707 -0.1903250 -0.1399923 20220208 -0.1972474 -0.1002139 -0.2642751 -0.2797248 -0.1652405 -0.0904993 -0.2372150 -0.2663778 -0.2768842 -0.1358340 For convince save the path to the flow file you choose to use as flow.file, example shown below: flow.file &lt;- &quot;C:\\\\EPFR\\\\daily\\\\FloPctCtry-B-daily.csv&quot; 10.2.4 Return File The return file for this strategy should contain data for the 10-year rates for each G10 country in the flow file, over the period of time the user wants to backtest. However, EPFR is not able to provide this data, so users must find this data though their own third party resources. For the purpose of creating backtest results in this notebook, we have used an internal file containing historical daily 10-year rates, and stored locally in the folder EPFR/returns. Below shows a snippet of what this file contains: EPFR/returns/g10rates.csv Below shows a snippet of what the return file contains: AU CA CH DE GB JP NO NZ SE US 20220201 1.9025 1.790 0.079 0.034 1.300 0.180 1.987 2.595 0.406 1.789 20220202 1.9125 1.756 0.090 0.038 1.257 0.179 1.990 2.572 0.424 1.777 20220203 1.8675 1.799 0.176 0.139 1.368 0.176 2.077 2.520 0.521 1.832 20220204 1.9600 1.853 0.246 0.203 1.411 0.198 2.104 2.600 0.595 1.911 20220207 1.9950 1.836 0.266 0.225 1.408 0.197 2.121 2.600 0.656 1.917 20220208 2.1200 1.855 0.326 0.263 1.489 0.218 2.153 2.708 0.690 1.965 For convince save the path to the return file you choose to use as ret.file, example shown below: ret.file &lt;- &quot;C:\\\\EPFR\\\\returns\\\\g10rates.csv&quot; 10.3 Strategy Implementation The final step is implementing this strategy to create a signal. Lets begin by reading in the flow and return files to our R studio work space. x &lt;- mat.read(flow.file) # GET FLOW PERCENTAGE C:\\\\EPFR\\\\daily\\\\FloPctCtry-B-daily.csv y &lt;- mat.read(ret.file) # TOTAL RETURN INDEX C:\\\\EPFR\\\\returns\\\\g10rates.csv Next we will need to ensure that the data structure in \\(x\\) and \\(y\\) are completely aligned, having the same column names in the same order. Below we will subset the columns of \\(x\\) to only use the G10 countries listed in y, and in the same date order as y \\(y\\). x &lt;- x[, is.element(dimnames(x)[[2]],dimnames(y)[[2]])] # SUBSET TO G10 COUNTRIES y &lt;- y[,dimnames(x)[[2]]] * Note: subsetting can be also be done when creating the flow and return files 10.3.1 Compounding Flows Next, we set up a variable for our look-back period, which can also be called a flow window. This variable will be the window of time we use to create a trailing compounded daily percentage flow. The look-back period we choose for our demonstrations is 20 days. lookback &lt;- 20 # FLOW WINDOW (IN WEEKDAYS) - 20 day look back period Again, using a function from the library('EPFR.r'), compound.flows() compounds our daily percentage flow over the trailing lookback period for each country. x &lt;- compound.flows(x, lookback, F) # COMPOUND FLOWS AU CA CH DE GB JP NO NZ SE US 20220201 -0.0147356 0.0998440 -1.281829 -0.5176295 -0.4215695 0.8690703 -0.8346496 -1.086802 -0.6430788 -1.085531 20220202 -0.1436693 0.0422141 -1.566203 -0.4747096 -0.5748950 0.8112050 -0.9143912 -1.137833 -0.6976324 -1.079877 20220203 -0.1788996 0.0583401 -1.648158 -0.5788006 -0.6370636 0.7962985 -0.9826300 -1.174760 -0.7499326 -1.154433 20220204 -0.2867007 0.0322003 -1.957859 -0.6540758 -0.7560261 0.7889151 -1.1206663 -1.358382 -0.9953409 -1.232607 20220207 -0.4238226 0.0518056 -2.150644 -0.8875790 -0.8945644 0.7171231 -1.2435045 -1.439052 -1.2318519 -1.332639 20220208 -0.6638225 -0.1019379 -2.488187 -1.1557103 -1.0960234 0.5340066 -1.5090552 -1.721286 -1.6577818 -1.430017 10.3.2 Ranking Countries Next, we sort each of the countries in our universe into five equal bins based on their compounded percentage flow values for the selected holding period. To do this, we will use the function from library('EPFR.r'), called bbk(). This function will output a standardized backtest result. The bbk() function requires our daily percentage flow data compounded over a desired period and 10-year rates data for each G10 country. Please refer to the library documentation for the complete list of parameters of this function (tip: ?bbk()). The first parameter we add is the number of bins we want to use. For our case, we want to use 5 because our strategy is to go long the top fifth and short the bottom fifth. nBin &lt;- 5 # NUMBER OF BINS Since EPFR data is published with T+1 day lag and is released around 5:00 pm EST, we account for a T+2 day delay in our model. Users interested in more timely signals can also use the T+2 open prices for backtesting purposes. Alternatively, EPFRs Premium Daily offering collects an earlier release of end-of-day data which includes a significant subset of its original fund-level flow information. delay &lt;- 2 # DELAY IN KNOWING DATA (IN WEEKDAYS) - data takes time to have It is also important to note that this model will need to be re-balanced weekly. The day of the week the rebalancing occurs is at the discretion of the user. For this example we will set the day of the week to trade as Friday. doW &lt;- 5 # DAY OF THE WEEK YOU WILL TRADE ON (5 = FRIDAYS) Additionally, we also evaluate the returns for different holding periods. The user can input return horizons that they are interested in here. For this example we define a return horizon for weekly, fortnightly, monthly, bi-monthly, quarterly, and semi-annual rebalancing. hz &lt;- c(5, 10, 20, 45, 65, 130) # RETURN HORIZON (IN WEEKDAYS) - holding periods Now that we have defined all of our inputs, to rank the countries into quintiles by their 20-day percentage flow, we call function bbk() for a 1-week holding period. z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, sprds = T) 10.3.3 Model Twenty-day flow percentage ranked into quintiles (computed only where forward returns are available) z[[&quot;bins&quot;]] AU CA CH DE GB JP NO NZ SE US 20220225 2 1 5 2 3 1 4 3 5 4 20220218 2 1 5 2 3 1 4 3 5 4 20220211 2 1 5 3 2 1 4 4 5 3 20220204 2 1 5 2 3 1 4 5 3 4 Quintile Returns over the equal-weight universe z[[&quot;rets&quot;]] Q1 Q2 Q3 Q4 Q5 TxB uRet 20220225 0.03595 -0.0168 0.04595 -0.06605 0.00095 0.0350 -0.17545 20220218 -0.02070 -0.0177 0.00480 0.02080 0.01280 -0.0335 0.02970 20220211 0.04895 -0.0203 -0.01255 0.00545 -0.02155 0.0705 -0.04445 20220204 -0.07860 0.0764 0.00390 -0.04060 0.03890 -0.1175 0.09410 Def: TxB represents summary statistics for the long short portfolio (top - bottom = Q1 - Q5 = overall portfolio returns) 10.3.4 Performance Performance over all holding periods fcn &lt;- function(retW) {as.matrix(bbk(x, y, 1, retW, nBin, doW, T, 0, delay, sprds = T)$summ)} # DEFINE SUMMARY FUNCTION sapply(split(hz, hz), fcn, simplify = &quot;array&quot;) # WRITE SUMMARIES Q1 Q2 Q3 Q4 Q5 TxB uRet Bi-Monthly AnnMn -7.167160e-02 1.549270e-02 1.217680e-02 -3.689980e-02 8.717830e-02 -1.588499e-01 -2.343894e-01 AnnSd 2.584897e-01 2.577459e-01 2.606363e-01 2.301503e-01 2.512954e-01 3.943829e-01 6.150931e-01 Sharpe -2.747335e+01 5.650258e+00 4.618285e+00 -1.591327e+01 3.482574e+01 -3.987790e+01 -3.815570e+01 HitRate -5.913476e+00 -1.188920e+00 1.977902e+00 1.556200e-03 7.485216e+00 -7.091503e+00 -8.320884e+00 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -1.779573e+00 -9.084084e-01 -8.370737e-01 -9.733102e-01 -6.255435e-01 -2.911889e+00 -4.497872e+00 DDnBeg 2.008430e+07 2.010289e+07 2.009169e+07 2.010962e+07 2.011867e+07 2.007751e+07 2.007177e+07 DDnN 6.355556e+01 3.800000e+01 2.444444e+01 2.444444e+01 1.666667e+01 6.488889e+01 7.511111e+01 AnnTo 3.653909e+02 4.296829e+02 4.448961e+02 4.341785e+02 3.729571e+02 7.383480e+02 0.000000e+00 Fortnightly AnnMn -8.633860e-02 9.608950e-02 -3.903190e-02 -7.824630e-02 1.123880e-01 -1.987267e-01 -2.240893e-01 AnnSd 2.689808e-01 2.866758e-01 2.733013e-01 2.526959e-01 2.796387e-01 4.413866e-01 5.649655e-01 Sharpe -3.214246e+01 3.351931e+01 -1.456455e+01 -3.128636e+01 4.018942e+01 -4.504100e+01 -3.966480e+01 HitRate -3.573458e+00 2.402259e+00 3.273810e-01 -4.228220e+00 5.204106e+00 -5.395360e+00 -5.584416e+00 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -2.165617e+00 -6.991906e-01 -1.344263e+00 -1.318189e+00 -8.400900e-01 -4.182525e+00 -4.583743e+00 DDnBeg 2.009037e+07 2.011082e+07 2.007061e+07 2.009566e+07 2.008122e+07 2.008562e+07 2.007066e+07 DDnN 3.265000e+02 6.500000e+01 1.110000e+02 3.105000e+02 1.350000e+01 3.355000e+02 3.390000e+02 AnnTo 1.055195e+03 1.568442e+03 1.691688e+03 1.649481e+03 1.119351e+03 2.174545e+03 0.000000e+00 Monthly AnnMn -7.244850e-02 6.609160e-02 -3.658370e-02 -6.559270e-02 1.088961e-01 -1.813446e-01 -2.289807e-01 AnnSd 2.633189e-01 2.663772e-01 2.596148e-01 2.453967e-01 2.641925e-01 4.237120e-01 5.809063e-01 Sharpe -2.755410e+01 2.425606e+01 -1.449531e+01 -2.859310e+01 4.171271e+01 -4.333208e+01 -3.941185e+01 HitRate -2.932073e+00 3.060918e+00 -2.670975e+00 -5.419666e+00 8.028605e+00 -5.281959e+00 -6.770833e+00 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -2.030367e+00 -7.190181e-01 -1.151830e+00 -1.408312e+00 -6.824661e-01 -3.654950e+00 -4.574229e+00 DDnBeg 2.008797e+07 2.009807e+07 2.010057e+07 2.008314e+07 2.009321e+07 2.008789e+07 2.007064e+07 DDnN 1.620000e+02 6.825000e+01 9.400000e+01 1.225000e+02 2.900000e+01 1.630000e+02 1.702500e+02 AnnTo 7.397135e+02 9.242188e+02 9.766927e+02 9.529948e+02 7.854167e+02 1.525130e+03 0.000000e+00 Quarterly AnnMn -5.721930e-02 -1.401970e-02 1.424720e-02 -2.039660e-02 8.263180e-02 -1.398510e-01 -2.368743e-01 AnnSd 2.392533e-01 2.448572e-01 2.518899e-01 2.313962e-01 2.345971e-01 3.670633e-01 6.256437e-01 Sharpe -2.327565e+01 -5.148035e+00 5.390597e+00 -8.737743e+00 3.629578e+01 -3.774300e+01 -3.799464e+01 HitRate -5.397204e+00 -2.117520e+00 1.966911e+00 -1.728634e+00 9.771614e+00 -6.444724e+00 -9.411950e+00 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -1.526000e+00 -1.128827e+00 -7.990348e-01 -9.039951e-01 -5.067754e-01 -2.510550e+00 -4.405895e+00 DDnBeg 2.008904e+07 2.010288e+07 2.010218e+07 2.011465e+07 2.010819e+07 2.008990e+07 2.007071e+07 DDnN 4.384615e+01 3.330769e+01 2.076923e+01 2.738462e+01 8.692308e+00 4.500000e+01 5.223077e+01 AnnTo 2.564267e+02 2.995819e+02 3.025626e+02 3.067887e+02 2.611204e+02 5.175471e+02 0.000000e+00 Semi-Annual AnnMn -3.043560e-02 -4.901300e-03 -9.802100e-03 -1.016970e-02 6.381790e-02 -9.425350e-02 -2.401389e-01 AnnSd 2.419034e-01 2.366248e-01 2.350842e-01 2.203452e-01 2.360099e-01 3.789460e-01 6.363702e-01 Sharpe -1.384945e+01 -1.746696e+00 -2.512583e+00 -5.898583e+00 2.732460e+01 -2.585615e+01 -3.809156e+01 HitRate -4.021410e+00 -2.088859e+00 2.936718e-01 -2.780409e+00 8.521220e+00 -8.080712e+00 -9.676961e+00 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -1.303615e+00 -9.306337e-01 -9.142391e-01 -7.925222e-01 -5.126589e-01 -2.196439e+00 -4.255378e+00 DDnBeg 2.009335e+07 2.011289e+07 2.009607e+07 2.011454e+07 2.010717e+07 2.009143e+07 2.007122e+07 DDnN 1.742308e+01 1.188462e+01 1.223077e+01 1.292308e+01 6.269231e+00 1.876923e+01 2.588462e+01 AnnTo 1.431461e+02 1.562145e+02 1.581376e+02 1.598333e+02 1.401525e+02 2.832986e+02 0.000000e+00 Weekly AnnMn -8.311870e-02 3.359090e-02 -9.442360e-02 -1.035920e-02 1.488554e-01 -2.319740e-01 -2.110488e-01 AnnSd 2.945322e-01 3.043751e-01 2.939055e-01 2.813943e-01 2.968231e-01 4.627533e-01 5.735331e-01 Sharpe -2.822057e+01 1.103604e+01 -3.212720e+01 -3.681375e+00 5.014953e+01 -5.012909e+01 -3.679802e+01 HitRate -1.038961e+00 1.298701e-01 -1.298701e+00 -2.597403e-01 6.363636e+00 -4.350649e+00 -4.215305e+00 Beta NA NA NA NA NA NA 1.000000e+00 Alpha NA NA NA NA NA NA 0.000000e+00 DrawDn -1.999987e+00 -7.566700e-01 -1.989821e+00 -8.333244e-01 -9.794400e-01 -4.310650e+00 -4.615729e+00 DDnBeg 2.009042e+07 2.009062e+07 2.007062e+07 2.012091e+07 2.008123e+07 2.009061e+07 2.007071e+07 DDnN 6.310000e+02 5.390000e+02 4.090000e+02 4.800000e+02 2.600000e+01 6.160000e+02 6.710000e+02 AnnTo 1.443320e+03 2.579767e+03 2.876524e+03 2.542672e+03 1.517510e+03 2.960830e+03 0.000000e+00 Annualized mean one-week returns bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, sprds = T)$annSumm # DISPLAY CALENDAR-YEAR RETURNS Q1 Q2 Q3 Q4 Q5 TxB uRet nPrds 2007 0.1625349 0.4996383 -0.3870513 -0.4919479 0.1499831 0.0125517 -0.4653037 29 2008 0.1918144 -0.0184856 -0.8614856 0.1409144 0.5613144 -0.3695000 -1.3718144 52 2009 0.1401778 0.1771778 0.0966778 0.2764278 -0.6690722 0.8092500 0.7055722 52 2010 -0.0416992 -0.0214388 0.1716480 0.0192782 -0.0763332 0.0346340 -0.2631876 53 2011 -0.1948700 -0.0022700 -0.5873700 0.2538300 0.4953800 -0.6902500 -1.3339800 52 2012 0.2783133 -0.3524867 -0.1900367 -0.0988867 0.3250633 -0.0467500 -0.2274133 52 2013 -0.2597867 0.0164133 0.1279633 -0.1336367 0.2443633 -0.5041500 0.8895367 52 2014 -0.1563333 0.3199667 -0.4349333 -0.0438833 0.2466667 -0.4030000 -1.0756667 52 2015 -0.0590556 0.0320944 0.1243944 -0.0875056 0.0142944 -0.0733500 -0.1212444 52 2016 -0.0901224 -0.0204621 0.2361040 -0.1838205 0.0197644 -0.1098868 -0.1517266 53 2017 -0.3763222 -0.1743222 0.1176778 0.1026778 0.3611778 -0.7375000 -0.0056778 52 2018 -0.5571722 0.0475778 0.1909778 0.2819278 0.1048278 -0.6620000 -0.0833278 52 2019 -0.1360744 -0.1326744 0.0849256 0.0133756 0.1702256 -0.3063000 -0.4894756 52 2020 0.1081800 0.0549800 -0.0210700 -0.4761200 0.3340300 -0.2258500 -0.4174300 52 2021 0.0498568 0.2390190 -0.3819395 0.0239549 0.0017813 0.0480755 0.5731621 53 2022 -1.1272040 0.2593760 0.7468760 0.1826760 -0.0617240 -1.0654800 2.6461240 10 "],["FAQ.html", "11 FAQ 11.1 Returns Information 11.2 Country Flows", " 11 FAQ 11.1 Returns Information When available, EPFR has provided daily fund return data which can be used as a proxy for the returns of each market that were backtesting. For demonstration purposes these files are used throughout this notebook to exhibit use cases. However, EPFR is not able to produce bond rates and these files will need to be sourced using 3rd party return data. For users who choose to use these readily available fund return files to follow along can access them under the ftp folder Returns. Disclaimer: EPFR Quant team uses 3rd party data providers to calculate returns in our usual presentations to showcase performances. Fund returns are calculated using EPFR daily flow data, and can be recreated using following equations: \\[\\text{Fund Return}_{a,t} = \\frac{\\sum^{N}_{i=m} \\text{Portfolio Change}_{i,a,t}}{\\sum^{N}_{i=m} \\text{Assets Start}_{i,a,t}}\\] Where: \\(\\text{Fund Return}\\) = the return value of asset class \\(a\\), across all funds in our universe \\(i\\), for day \\(t\\) \\[\\text{Fund Return}_{c,t} = \\frac{\\sum^{N}_{i=m} \\text{Portfolio Change}_{i,c,t}}{\\sum^{N}_{i=m} \\text{Assets Start}_{i,c,t}}\\] Where: \\(\\text{Fund Return}\\) = the return value of country \\(c\\), across all funds in our universe \\(i\\), for day \\(t\\) \\[\\text{Fund Return}_{s,r,t} = \\frac{\\sum^{N}_{i=m} \\text{Portfolio Change}_{i,s,r,t}}{\\sum^{N}_{i=m} \\text{Assets Start}_{i,s,r,t}}\\] Where: \\(\\text{Fund Return}\\) = the return value of sector \\(s\\), for region \\(r\\), across all funds in our universe \\(i\\), for day \\(t\\) However, depending on how the signal being tested is indexed, it is important that the return file is also indexed at the same frequency. For example if the signal being tested is limited to monthly granularity, it is important to ensure that returns are also indexed by month. In this case if the user chooses to use one of EPFRs daily return files, the function mat.daily.to.monthly(, T) from library('EPFR.r') should be used to modify a daily return file to be indexed with monthly dates. This same process can also be done using mat.daily.to.weekly from library('EPFR.r') to modify a daily return file to be indexed with weekly dates. 11.2 Country Flows Country flows is a derived dataset that delivers flows to individual countries. It uses a proprietary algorithm to calculate these derivations. The procedure assumes fixed average country allocations across different cross-border mandates. It then uses fund-level flow data to calculate flows to individual countries. One advantage of this derivation is the broader coverage. EPFRs Fund Flows Database has significant coverage across different regions and countries. In contrast, the Country Allocations Database is a subset of the fund flows dataset. Using fixed average country allocations allows us to include a broader range of cross-border funds in individual country flow calculations. Because of the more general assumptions, Country Flows Database is typically a better fit for macroeconomist &amp; strategists. A typical use case for a macroeconomist would be calculating a high-frequency proxy for those countries balance of payments statistics. On the other hand, when trying to create country rotation strategies, quantitative hedge funds rely on fund-level data. This lets them have a one-to-one match between the country allocations and fund-level flows. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
